<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Gradle构建</title>
      <link href="/2019/05/05/Gradle%E6%9E%84%E5%BB%BA/"/>
      <url>/2019/05/05/Gradle%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>自动化构建、分发工具</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>安装java 的Jdk 或者Jre<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">java version &quot;1.8.0_121&quot;</span><br></pre></td></tr></table></figure></p><h3 id="安装Gradle"><a href="#安装Gradle" class="headerlink" title="安装Gradle"></a>安装Gradle</h3><h4 id="MacOs"><a href="#MacOs" class="headerlink" title="MacOs"></a>MacOs</h4><p>通过<a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">HomeBrew</a>进行安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gradle</span><br></pre></td></tr></table></figure></p><h4 id="WinOs"><a href="#WinOs" class="headerlink" title="WinOs"></a>WinOs</h4><p>待完善</p><h4 id="验证安装结果"><a href="#验证安装结果" class="headerlink" title="验证安装结果"></a>验证安装结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gradle -v</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Gradle 5.4</span><br><span class="line">------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="设置中央仓库"><a href="#设置中央仓库" class="headerlink" title="设置中央仓库"></a>设置中央仓库</h4><p>将中央仓库设置为阿里代理库，否则总会卡死。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.gradle/init.d/ </span><br><span class="line">touch ~/.gradle/init.d/init.gradle</span><br></pre></td></tr></table></figure></p><p>init.gradle 内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url &apos;https://maven.aliyun.com/repository/public‘&#125;</span><br><span class="line">        maven &#123; url &quot;https://maven.aliyun.com/repository/spring&quot; &#125;</span><br><span class="line">        maven &#123; url &quot;https://maven.aliyun.com/repository/google&quot; &#125;</span><br><span class="line">        maven &#123; url &quot;https://maven.aliyun.com/repository/gradle-plugin&quot; &#125;</span><br><span class="line">        maven &#123; url &quot;https://maven.aliyun.com/repository/spring&quot; &#125;</span><br><span class="line">        maven &#123; url &quot;https://maven.aliyun.com/repository/spring-plugin&quot; &#125;</span><br><span class="line">        mavenLocal()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="构建JavaApplication项目"><a href="#构建JavaApplication项目" class="headerlink" title="构建JavaApplication项目"></a>构建JavaApplication项目</h2><h4 id="gradle-构建引导"><a href="#gradle-构建引导" class="headerlink" title="gradle 构建引导"></a>gradle 构建引导</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mkdir learn-gradle</span><br><span class="line">cd learn-gradle </span><br><span class="line"></span><br><span class="line">gradle init</span><br><span class="line"></span><br><span class="line">Select type of project to generate:</span><br><span class="line">  1: basic</span><br><span class="line">  2: cpp-application</span><br><span class="line">  3: cpp-library</span><br><span class="line">  4: groovy-application</span><br><span class="line">  5: groovy-library</span><br><span class="line">  6: java-application</span><br><span class="line">  7: java-library</span><br><span class="line">  8: kotlin-application</span><br><span class="line">  9: kotlin-library</span><br><span class="line">  10: scala-library</span><br><span class="line">Enter selection (default: basic) [1..10] 6</span><br><span class="line"></span><br><span class="line">Select build script DSL:</span><br><span class="line">  1: groovy</span><br><span class="line">  2: kotlin</span><br><span class="line">Enter selection (default: groovy) [1..2] 1</span><br><span class="line"></span><br><span class="line">Select test framework:</span><br><span class="line">  1: junit</span><br><span class="line">  2: testng</span><br><span class="line">  3: spock</span><br><span class="line">Enter selection (default: junit) [1..3] 1</span><br><span class="line"></span><br><span class="line">Project name (default: learn-gradle):</span><br><span class="line">Source package (default: learn.gradle):</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 1m 22s</span><br><span class="line">2 actionable tasks: 2 executed</span><br></pre></td></tr></table></figure><h4 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">learn-gradle </span><br><span class="line">├── build.gradle</span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── gradle-wrapper.jar</span><br><span class="line">│       └── gradle-wrapper.properties</span><br><span class="line">├── gradlew</span><br><span class="line">├── gradlew.bat</span><br><span class="line">├── settings.gradle</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   │   └── learn</span><br><span class="line">    │   │       └── gradle</span><br><span class="line">    │   │           └── App.java</span><br><span class="line">    │   └── resources</span><br><span class="line">    └── test</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── learn</span><br><span class="line">        │       └── gradle</span><br><span class="line">        │           └── AppTest.java</span><br><span class="line">        └── resources</span><br></pre></td></tr></table></figure><h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gradle run</span><br><span class="line"></span><br><span class="line">&gt; Task :run</span><br><span class="line">Hello world.</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 2s</span><br><span class="line">2 actionable tasks: 2 executed</span><br></pre></td></tr></table></figure><h3 id="Maven迁移到Gradle"><a href="#Maven迁移到Gradle" class="headerlink" title="Maven迁移到Gradle"></a>Maven迁移到Gradle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd projectRoot</span><br><span class="line">gradle init --type pom</span><br></pre></td></tr></table></figure><p>基于 生成的 build.gradle 自行调整即可</p><h3 id="Idea使用Gradle"><a href="#Idea使用Gradle" class="headerlink" title="Idea使用Gradle"></a>Idea使用Gradle</h3><h4 id="安装Gradle插件"><a href="#安装Gradle插件" class="headerlink" title="安装Gradle插件"></a>安装Gradle插件</h4><p><a href="https://www.jetbrains.com/help/idea/gradle.html" target="_blank" rel="noopener">更多信息看这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> gradle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java注解</title>
      <link href="/2019/05/04/%E5%B9%B6%E5%8F%91%E5%8C%85/"/>
      <url>/2019/05/04/%E5%B9%B6%E5%8F%91%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天用idea学习lombok时遇到一个问题，注解@Getter @Setter 编译通过通过struct视图也可以看到动态添加的 方法，但是运行时就会提示方法不存在。开始以为是依赖引入时机不对，调整后还是没有效果。百度一下需要这么操作：<br><img src="/images/pasted-58.png" alt="idea设置AnnotationProcessors"><br>此图为gradle依赖<br><img src="/images/pasted-59.png" alt="lombok依赖"><br>作为常年使用eclipse的我觉得有必要搞搞清楚idea的这个AnnotionProcessor是个什么鬼东西了。</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><img src="/images/pasted-57.png" alt="注解脑图"><br>(此图来自互联网)</p><h2 id="AnnotionProcessor"><a href="#AnnotionProcessor" class="headerlink" title="AnnotionProcessor"></a>AnnotionProcessor</h2><p>首先并不是idea创造的东西，而是java提供的编译时注解处理机制。两种编译时解析方案</p><pre><code>1. APT（Annotation Processing Tool）2. Pluggable Annotation Processing API</code></pre><h3 id="APT"><a href="#APT" class="headerlink" title="APT"></a>APT</h3><p>apt自JDK5产生，JDK7已标记为过期、不推荐使用，JDK8中已彻底删除，自JDK6开始，可以使用Pluggable Annotation Processing API来替换它，apt被替换主要有2点原因： </p><ol><li>api都在com.sun.mirror非标准包下</li><li>没有集成到javac中，需要额外运行<br><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/apt/GettingStarted.html" target="_blank" rel="noopener">apt的更多介绍可以参见这里</a></li></ol><h3 id="Pluggable-Annotation-Processing-API"><a href="#Pluggable-Annotation-Processing-API" class="headerlink" title="Pluggable Annotation Processing API"></a>Pluggable Annotation Processing API</h3><p><a href="https://jcp.org/en/jsr/detail?id=269" target="_blank" rel="noopener">JSR 269</a>，自JDK6加入，作为apt的替代方案，它解决了apt的两个问题，javac在执行的时候会调用实现了该API的程序，这样我们就可以对编译器做一些增强，这时javac执行的过程如下：<br><img src="/images/pasted-60.png" alt="upload successful"></p><h2 id="做一个AnnotationProcessor"><a href="#做一个AnnotationProcessor" class="headerlink" title="做一个AnnotationProcessor"></a>做一个AnnotationProcessor</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><pre><code>* Mac(gradle)* IntelliJ IDEA* Java1.8* 构建工具Gradle 语言 Groovy</code></pre><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><img src="/images/pasted-61.png" alt="upload successful"><br><img src="/images/pasted-63.png" alt="upload successful"><br><img src="/images/pasted-64.png" alt="upload successful"><br><img src="/images/pasted-65.png" alt="upload successful"><br><img src="/images/pasted-66.png" alt="upload successful"></p><h3 id="模块author-processorx"><a href="#模块author-processorx" class="headerlink" title="模块author-processorx"></a>模块author-processorx</h3><p><img src="/images/pasted-67.png" alt="upload successful"><br><img src="/images/pasted-68.png" alt="upload successful"><br><img src="/images/pasted-69.png" alt="upload successful"><br><img src="/images/pasted-70.png" alt="upload successful"></p><h4 id="创建Annotation"><a href="#创建Annotation" class="headerlink" title="创建Annotation"></a>创建Annotation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.hardydou.learn.annotation.processor;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.CLASS)</span><br><span class="line">public @interface EnableAuthor &#123;</span><br><span class="line">    String name() default &quot;authorXXX&quot;;</span><br><span class="line">    String email() default &quot;author@XX.com&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建Processor"><a href="#创建Processor" class="headerlink" title="创建Processor"></a>创建Processor</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.hardydou.learn.annotation.processor;</span><br><span class="line"></span><br><span class="line">import javax.annotation.processing.AbstractProcessor;</span><br><span class="line">import javax.annotation.processing.RoundEnvironment;</span><br><span class="line">import javax.annotation.processing.SupportedAnnotationTypes;</span><br><span class="line">import javax.lang.model.SourceVersion;</span><br><span class="line">import javax.lang.model.element.Element;</span><br><span class="line">import javax.lang.model.element.ElementKind;</span><br><span class="line">import javax.lang.model.element.TypeElement;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">@SupportedAnnotationTypes(&#123;&quot;com.hardydou.learn.annotation.processor.EnableAuthor&quot;&#125;)</span><br><span class="line">public class AuthorProcessor extends AbstractProcessor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public SourceVersion getSupportedSourceVersion() &#123;</span><br><span class="line">        return SourceVersion.latestSupported();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) &#123;</span><br><span class="line">        Set&lt;? extends Element&gt; elements = roundEnv.getElementsAnnotatedWith(EnableAuthor.class);</span><br><span class="line"></span><br><span class="line">        for (Element ele : elements) &#123;</span><br><span class="line">            if (ele.getKind() == ElementKind.CLASS) &#123;</span><br><span class="line">                EnableAuthor author = ele.getAnnotation(EnableAuthor.class);</span><br><span class="line">                System.out.println(ele + &quot;[&#123;author:&quot; + author.name() + &quot;email:&quot; + author.email() + &quot;&#125;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注册Processor服务"><a href="#注册Processor服务" class="headerlink" title="注册Processor服务"></a>注册Processor服务</h4><p><img src="/images/pasted-72.png" alt="upload successful"></p><h3 id="模块test"><a href="#模块test" class="headerlink" title="模块test"></a>模块test</h3><p><img src="/images/pasted-73.png" alt="upload successful"><br><img src="/images/pasted-74.png" alt="upload successful"></p><h4 id="修改build-gradle文件"><a href="#修改build-gradle文件" class="headerlink" title="修改build.gradle文件"></a>修改build.gradle文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &apos;java&apos;</span><br><span class="line">    id &apos;application&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group &apos;com.hardydou.learn&apos;</span><br><span class="line">version &apos;1.0-SNAPSHOT&apos;</span><br><span class="line">mainClassName = &quot;com.hardydou.learn.annotation.TestProcessor&quot;</span><br><span class="line">sourceCompatibility = 1.8</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile project(&quot;:author-processor&quot;)</span><br><span class="line">    annotationProcessor project(&quot;:author-processor&quot;)</span><br><span class="line">    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.hardydou.learn.annotation;</span><br><span class="line"></span><br><span class="line">import com.hardydou.learn.annotation.processor.EnableAuthor;</span><br><span class="line"></span><br><span class="line">@EnableAuthor(name = &quot;hardy&quot;, email = &quot;hardydou@163.com&quot;)</span><br><span class="line">public class TestProcessor &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;TestProcessor.main&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h4><p>由于事件发生在编译时，所以每次要执行clean 才可以看到效果<br><img src="/images/pasted-77.png" alt="upload successful"><br><img src="/images/pasted-78.png" alt="upload successful"><br>执行结果<br><img src="/images/pasted-79.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 刻意练习 </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>架构图</title>
      <link href="/2019/04/03/%E7%94%BB%E6%9E%B6%E6%9E%84%E5%9B%BE/"/>
      <url>/2019/04/03/%E7%94%BB%E6%9E%B6%E6%9E%84%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>架构图是展示软件系统的<font size="6"> 整体全貌、组件关系、部署情况、演进方向</font>  视图语言。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>传递架构师要表达的信息，快速评估架构的可行性、安全性、以及问题所在。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>分类较多，目前以 4+1视图（场景视图、逻辑视图、物理视图、处理流程图、开发视图）、4C（上下文、容器图、组件图、代码图）为主流。</p><h2 id="4-1视图"><a href="#4-1视图" class="headerlink" title="4+1视图"></a>4+1视图</h2><h3 id="场景视图"><a href="#场景视图" class="headerlink" title="场景视图"></a>场景视图</h3><p>描述 参与者与功能用力的关系，通常以用例图表示。<br><img src="/images/pasted-50.png" alt="upload successful"></p><h3 id="逻辑视图"><a href="#逻辑视图" class="headerlink" title="逻辑视图"></a>逻辑视图</h3><p>描述软件功能拆解后的组件关系，组件约束和边界，通常用 组件图来表示<br>//TODO 添加组件图图片</p><h3 id="物理视图"><a href="#物理视图" class="headerlink" title="物理视图"></a>物理视图</h3><p>描述软件到硬件的映射关系，反映出系统的组件是如何部署到一组计算器节点上的，通常以 部署图表示</p><h3 id="处理流程图"><a href="#处理流程图" class="headerlink" title="处理流程图"></a>处理流程图</h3><p>描述系统之间、组件之间通信时序，数据的输入输出，反应系统的功能流程与数据流程，通常由时序图和流程图表示。</p><h3 id="开发视图"><a href="#开发视图" class="headerlink" title="开发视图"></a>开发视图</h3><p>描述系统的模块划分和组成，以及细化到内部包的组成设计，服务于开发人员，反映系统开发实施过程。</p><h2 id="4C图"><a href="#4C图" class="headerlink" title="4C图"></a>4C图</h2><h3 id="上下文（语境图Context）"><a href="#上下文（语境图Context）" class="headerlink" title="上下文（语境图Context）"></a>上下文（语境图Context）</h3><p><img src="/images/pasted-52.png" alt="语境图"></p><p>参与者、系统之间的关系，系统状态进度。</p><font color="red">抽象说：<br>  人、ofo 是2个独立存在的事物，可以称作context。<br></font><h3 id="容器图"><a href="#容器图" class="headerlink" title="容器图"></a>容器图</h3><p><img src="/images/pasted-54.png" alt="容器图"><br>互相独立存在的应用（占用独立的pid 就可以看做一个容器）例如：</p><ul><li>终端应用：<br>APP、API接口、WEB</li><li>Web服务器：<br>apache、 nginx </li><li>Web应用:<br>部署在 Tomcat、jetty、resion、jboss、Weblogic、Websphere 一个应用</li><li>数据库应用：<br>Mysql、Oracle、Mongodb</li><li>其它<br>ELK、文件系统、dns服务  <font color="red"><br>抽象说：<br>ofo 可以分解为 车子、APP、其它 这些可以被称为容器。<br></font>  </li></ul><h3 id="组件图"><a href="#组件图" class="headerlink" title="组件图"></a>组件图</h3><p>这张组件图不是很严格，没有表示清楚组件提供的能力名称。<br><img src="/images/pasted-55.png" alt="组件图"><br>容器是由多个组件构成，所有组件应当运行在同一个进程中。   </p><font color="red"><br>  抽象说：<br>  车子 可以分解为 车胎、车把、车蹬子、车座子、链条、车架、其它 这些可以被称为组件。<br></font><h3 id="代码图"><a href="#代码图" class="headerlink" title="代码图"></a>代码图</h3><p><img src="/images/pasted-56.png" alt="类图"></p><font color="red"><br>  抽象说：<br>  外胎、内胎、辐条、轮圈、轴承 生产方式，轮胎 组装方式 。<br></font>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java类加载机制</title>
      <link href="/2019/03/20/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/03/20/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-48.png" alt="upload successful"><br><img src="/images/pasted-49.png" alt="upload successful"></p><h2 id="加载器类型"><a href="#加载器类型" class="headerlink" title="加载器类型"></a>加载器类型</h2><h3 id="启动加载器"><a href="#启动加载器" class="headerlink" title="启动加载器"></a>启动加载器</h3><ul><li>BootstrapClassLoader  </li><li>C++语言实现</li><li>负责加载&lt;JAVA_HOME&gt;\lib (或者 -Xbootclasspath 参数指定路径)目录中的类库加载到内存</li></ul><h3 id="扩展加载类"><a href="#扩展加载类" class="headerlink" title="扩展加载类"></a>扩展加载类</h3><ul><li>ExtensionClassLoader</li><li>Java实现</li><li>负责加载&lt;JAVA_HOME&gt;\lib\ext目录（或者java.ext.dirs系统变量指定的路径）所有类库</li></ul><h3 id="应用程序类加载器"><a href="#应用程序类加载器" class="headerlink" title="应用程序类加载器"></a>应用程序类加载器</h3><ul><li>ApplicationClassLoader</li><li>负责加载 classpath 上的指定类库，我们可以直接使用这个类加载器</li></ul><h2 id="双亲委派模式"><a href="#双亲委派模式" class="headerlink" title="双亲委派模式"></a>双亲委派模式</h2><p>类架加载器在加载一个类时先咨询自己发父亲是否已经加载如果已经加载就直接返回，没有加载子加载器就进行加载。<br><img src="/images/pasted-47.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java内存模型（JMM）</title>
      <link href="/2019/03/05/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%EF%BC%88JMM%EF%BC%89/"/>
      <url>/2019/03/05/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%EF%BC%88JMM%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h2><p>在写单例模式的时候涉及到了线程安全，继而又涉及到了volatile、无序写入、synchronized等内容到此为止有必要了解下JMM了。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在<font color="red" size="5" face="黑体">Java虚拟机</font>中通过<font color="blue" size="5" face="黑体">java内存模型</font>来 <em>屏蔽</em> 各种硬件和操作系统的内存访问差异，以实现让java程序在各种平台下都能够达到<em>一致的内存访问效果</em> 。</p><h3 id="性能一致性方案"><a href="#性能一致性方案" class="headerlink" title="性能一致性方案"></a>性能一致性方案</h3><p>性能一致性方案（下图）<br><img src="/images/pasted-40.png" alt="upload successful"><br>java也有有采用类似方案（下图）<br><img src="/images/pasted-42.png" alt="upload successful"></p><h4 id="方案带来的挑战："><a href="#方案带来的挑战：" class="headerlink" title="方案带来的挑战："></a>方案带来的挑战：</h4><h5 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h5><p>一个线程写入的数据是否能立刻马上被其它线程看到。是否存在不能被看到的可能性？</p><h5 id="应对-可见性"><a href="#应对-可见性" class="headerlink" title="应对-可见性"></a>应对-可见性</h5><ul><li>volatile 关键字，被它修饰后表示：线程本地缓存失效，每次从主存里面拉去数据。</li><li>同步锁有序执行</li></ul><h5 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h5><p>一个操作是否可以被一个线程一个计算机写指令完成？如果存在多个写指令完成的操作就会破坏掉原子性。（高级语言的一个指令往往被分割成1个或者多个计算机指令）</p><h5 id="应对-原子性"><a href="#应对-原子性" class="headerlink" title="应对=原子性"></a>应对=原子性</h5><ul><li>atomicXX解决方案</li><li>基本变量（除 long,double外）的赋值操作。64位系统也被拆分位2个指令集合</li><li>同步锁有序执行</li></ul><h3 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h3><p>编译器和处理器为了优化执行效率可能会调整指令执行顺序。<br><img src="/images/pasted-43.png" alt="upload successful"></p><h4 id="方案带来的挑战"><a href="#方案带来的挑战" class="headerlink" title="方案带来的挑战"></a>方案带来的挑战</h4><h5 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h5><p>一个指令集合是否被按照一定的顺序执行？重新排序后是否与原有执行顺序一致？</p><h5 id="应对-有序性（happens-before）"><a href="#应对-有序性（happens-before）" class="headerlink" title="应对-有序性（happens-before）"></a>应对-有序性（happens-before）</h5><p> 1、程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作。<br> 2、锁定规则：一个unLock操作先行发生于后面对同一个锁的Lock()操作。<br> 3、volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作。<br> 4、传递规则：如果操作A先行发生与操作B,而操作B先行发生于操作C，则操作A先行发生于操作C。<br> 5、线程启动规则：Thread对象的start()方法先行发生于此线程的每一个动作。<br> 6、线程终端规则：对线程interrupt()方法的调用先行发生与被中断线程的代码检测到中断事件的发生（只有执行了interrupt()方法才可以检测到中断事件的发生）。<br> 7、线程终结规则：线程中所有操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束，Thread.isAlive()的返回值手段检测到线程已经终止执行。<br> 8、对象终结规则：一个对象的初始化完成先行发生于它的finallze方法的开始。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上面提到的原子性、可见性、有序性等解决方案是有关系的，其中happens-before 是其它的基础。</p><p><img src="/images/pasted-46.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式-单例模式</title>
      <link href="/2019/03/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/03/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>程序运行周期内这个对象最多被创建一次，这类对象我们称之为单例，这个设计模式称作单例模式。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>私有化构造；</li><li>通过调用静态方法获取对象；  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private Singleton() &#123;</span><br><span class="line">//do something</span><br><span class="line">&#125;</span><br><span class="line">public static Singleton getInstance() &#123;</span><br><span class="line">  return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static Singleton instance = new Singleton();</span><br></pre></td></tr></table></figure><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li>简单</li><li>线程安全</li></ul><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ul><li>资源效率不高，当执行其它静态方法 或者 class.forName 时就会被初始化。</li></ul><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public synchronized static Singleton getInstance() &#123;</span><br><span class="line">        if (instance == null) &#123;</span><br><span class="line">            instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><ul><li>线程安全<h4 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h4></li><li>synchronized 的使用造成资源消耗较大</li></ul><h3 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h3><h4 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static Singleton getInstance() &#123;</span><br><span class="line">if (instance == null) &#123;</span><br><span class="line">synchronized (Singleton.class) &#123;</span><br><span class="line">if (instance == null) &#123;</span><br><span class="line">instance = new Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优势-2"><a href="#优势-2" class="headerlink" title="优势"></a>优势</h4><ul><li>线程安全</li><li>第一次以后调用 不再受到 synchronize 影响；<h4 id="劣势-2"><a href="#劣势-2" class="headerlink" title="劣势"></a>劣势</h4></li><li>java内存模型（jmm）无序写入可能会引发，对象创建失败问题；<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><h4 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private static class NoThing &#123;</span><br><span class="line">   private static Singleton instance = new Singleton();</span><br><span class="line">   &#125;</span><br><span class="line">public static Singleton getInstance() &#123;</span><br><span class="line">        return NoThing.instance;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="优势-3"><a href="#优势-3" class="headerlink" title="优势"></a>优势</h4><ul><li>线程安全</li><li>延迟加载</li><li>资源消耗低<h4 id="劣势-3"><a href="#劣势-3" class="headerlink" title="劣势"></a>劣势</h4></li><li>较饿汉模式代码较复杂<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li></ul><h3 id="关系图谱"><a href="#关系图谱" class="headerlink" title="关系图谱"></a>关系图谱</h3><p><img src="/images/pasted-38.png" alt="upload successful"></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><img src="/images/pasted-39.png" alt="upload successful"></p><h3 id="个人观点"><a href="#个人观点" class="headerlink" title="个人观点"></a>个人观点</h3><p>你会写一个 消耗资源且可能不被调用的单例吗？所以 就用饿汉模式吧。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>种植业财务报表</title>
      <link href="/2019/02/20/%E7%A7%8D%E6%A4%8D%E4%B8%9A%E5%88%A9%E6%B6%A6%E8%A1%A8/"/>
      <url>/2019/02/20/%E7%A7%8D%E6%A4%8D%E4%B8%9A%E5%88%A9%E6%B6%A6%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>前两天学习到利润表，就利用分析了梨农的利润情况。整体感觉梨农太不容易了，干了赔钱不干还得外出务工，但整体对财务知识用到的不多，今天想构建一个梨农的故事来学以致用 财务知识。</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>资产负债表是什么、作用</li><li>利润表是什么、作用</li><li>现金流量表是什么、作用</li><li>财务科目是什么、作用</li></ul><h2 id="故事开始"><a href="#故事开始" class="headerlink" title="故事开始"></a>故事开始</h2><h3 id="第一章、开始"><a href="#第一章、开始" class="headerlink" title="第一章、开始"></a>第一章、开始</h3><p>小鱼、小李跟小花三个人准备创业。在经过慎重考虑后决定成立一个果园，果园位置就定在了石家庄赵县。  </p><h4 id="注册公司"><a href="#注册公司" class="headerlink" title="注册公司"></a>注册公司</h4><p>经过讨论三人各自出资10万，注册《梨花雨果园有限公司》。以下是公司概要信息：  </p><table><thead><tr><th>名称</th><th>值</th><th>备注</th></tr></thead><tbody><tr><td>公司名称</td><td>梨花雨果园有限责任公司</td><td></td></tr><tr><td>注册资本</td><td>30万</td><td></td></tr><tr><td>法人</td><td>小鱼</td><td></td></tr><tr><td>监事</td><td>小花</td></tr></tbody></table><h3 id="第二章、财务报表"><a href="#第二章、财务报表" class="headerlink" title="第二章、财务报表"></a>第二章、财务报表</h3><h4 id="台账（流水账）"><a href="#台账（流水账）" class="headerlink" title="台账（流水账）"></a>台账（流水账）</h4><p>台账规划的好会有事半功倍的效果。<br><img src="/images/pasted-30.png" alt="upload successful"></p><h4 id="期初"><a href="#期初" class="headerlink" title="期初"></a>期初</h4><p>三个人都是农民出身，说起怎么种树大家都很在行，但在聊到 资产负债表 应该包含哪些科目的时候，都傻眼了。最后通过网上查阅下资料确定了具体科目。<br><img src="/images/pasted-23.png" alt="upload successful"></p><h4 id="租地-amp-置办机器后"><a href="#租地-amp-置办机器后" class="headerlink" title="租地&amp;置办机器后"></a>租地&amp;置办机器后</h4><p><img src="/images/pasted-25.png" alt="upload successful"><br><em>思考问题</em> </p><ul><li>已支付租赁费用、已支付工资该如何表示？</li></ul><h4 id="贷款后"><a href="#贷款后" class="headerlink" title="贷款后"></a>贷款后</h4><p><img src="/images/pasted-32.png" alt="upload successful"><br><em>思考问题</em> </p><ul><li>日常经营支出：灌溉费用、农药费用、人工费用该如何表达<h4 id="收获后"><a href="#收获后" class="headerlink" title="收获后"></a>收获后</h4><img src="/images/pasted-33.png" alt="upload successful"><br><em>思考问题</em> </li><li>存货如何货币化？依据生产产本记录？还是依据 预计销售价记录</li></ul><h4 id="销售后"><a href="#销售后" class="headerlink" title="销售后"></a>销售后</h4><p><img src="/images/pasted-34.png" alt="upload successful"><br><em>思考问题</em> </p><ul><li>营业收入如何记录<h4 id="还清欠款后"><a href="#还清欠款后" class="headerlink" title="还清欠款后"></a>还清欠款后</h4><img src="/images/pasted-35.png" alt="upload successful"></li></ul><h3 id="第三章、利润分析"><a href="#第三章、利润分析" class="headerlink" title="第三章、利润分析"></a>第三章、利润分析</h3><h4 id="利润表"><a href="#利润表" class="headerlink" title="利润表"></a>利润表</h4><p><img src="/images/pasted-31.png" alt="upload successful"></p><h3 id="第四章、总结"><a href="#第四章、总结" class="headerlink" title="第四章、总结"></a>第四章、总结</h3><p>暂无</p>]]></content>
      
      
      <categories>
          
          <category> 财务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刻意练习 </tag>
            
            <tag> 财务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>果农利润表</title>
      <link href="/2019/02/19/%E6%9E%9C%E5%86%9C%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/"/>
      <url>/2019/02/19/%E6%9E%9C%E5%86%9C%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-14.png" width="400" div="" align="/"></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>从小在梨树下长大，与梨树相关的工作没有没干过的：  </p><ul><li>10+次浇地  （2月-11月）</li><li>10次打药 （2月-9月）</li><li>疏花疏果     （4月）</li><li>套袋    （5月）</li><li>卸梨、包梨、装箱、入库（8月-10月）</li><li>卖梨（8月-次年5月）</li></ul><p>2010年以后人均收入快速上升，非农产品物价上涨飞速，最重要的房价坐上火箭一般窜。老乡们能出国，能进城的绝对不会留下来种地。财务里面讲的是利润率、投资回报率，我们来为果农算一笔账。</p><h2 id="抽离-成本项"><a href="#抽离-成本项" class="headerlink" title="抽离 成本项"></a>抽离 成本项</h2><h3 id="调研问题："><a href="#调研问题：" class="headerlink" title="调研问题："></a>调研问题：</h3><ul><li>雪梨有几亩地：4亩</li><li>多少棵雪梨树：80</li><li>一年收多少件雪梨：750</li><li>15-19年价格：25、35、35、</li><li>一年浇几次地：5 次  2次肥料1000/次</li><li>一年打几次药：6次    </li><li>几次药 分别多少钱：300/次</li><li>一件梨包装费：11</li><li>一件梨制冷费：5</li></ul><h3 id="成本项以及条件假设"><a href="#成本项以及条件假设" class="headerlink" title="成本项以及条件假设"></a>成本项以及条件假设</h3><p><img src="/images/pasted-19.png" alt="upload successful"></p><h2 id="利润表"><a href="#利润表" class="headerlink" title="利润表"></a>利润表</h2><p><img src="/images/pasted-20.png" alt="upload successful"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分析利润表，关键因素有 售价、包装、冷藏、人工上面。其中 包装、冷藏成本上涨较小，人工成本上涨十分剧烈 但售价基本无变化。导致 2010年以后种地 远远不如 外出务工收入高。</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>物价上涨是趋势所以 包装、冷藏、人工成本无法降低，只能想法提升售价。提升售价方式：</p><ul><li>更换品种例如 皇冠 近些年售价在40-100元/件。</li><li>减少中间环节 直接铺货到零售商。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 财务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刻意练习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>人工智能</title>
      <link href="/2019/02/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
      <url>/2019/02/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-8.png" alt="upload successful"><center> 大家对“人工智能” </center></p><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><h3 id="个人观点"><a href="#个人观点" class="headerlink" title="个人观点"></a>个人观点</h3><ul><li>这次讲的人工智能本质就是神经网络+数据。</li><li>人工智能 不会威胁到人的生存 ，的确会解放一些劳动力。</li><li>人工智能 就像计算器、计算机、汽车 是人类的工具（如同 汽车让人日行千里、计算机让人计算简化，人工智能可以多方面增幅人类）</li></ul><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>   人工智能 让机器具备人类的视觉、听觉、嗅觉、逻辑推理等能力。目前有两大类方案一类是基于规则，一类是神经网络。此次人工智能浪潮之前一直是规则占据上风。得益于 全球数据电子化，计算能力提升才导致了神经网络卷土从来。<br>   现在再给人工智能做个理解就是，让计算机利用神经网络（深度学习）通过大量数据的训练后而具备的一些人类具备的特殊能力（图形识别，语音识别等能力）。<br><img src="/images/pasted-10.png" alt="upload successful"></p><h3 id="神经网络发展史"><a href="#神经网络发展史" class="headerlink" title="神经网络发展史"></a>神经网络发展史</h3><p><img src="/images/pasted-9.png" alt="upload successful"></p><h3 id="人工智能进展"><a href="#人工智能进展" class="headerlink" title="人工智能进展"></a>人工智能进展</h3><p><img src="/images/pasted-11.png" alt="upload successful"><br>目前来看 语音、图像识别、逻辑推理、自然语言交流处于技术成熟期（可以以此开发应用重构一些行业），可以考虑以下行业：<br><img src="/images/pasted-12.png" alt="upload successful"></p><h3 id="对人工智能的误解"><a href="#对人工智能的误解" class="headerlink" title="对人工智能的误解"></a>对人工智能的误解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">误解1：人工智能等于机器人。</span><br><span class="line">事实：人工智能是包含大量子领域的全部术语，涉及广泛的应用范围。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">误解2：人工智能对标的是O2O，电商和消费升级这样的具体赛道。</span><br><span class="line">事实：人工智能提供的是为全产业升级的技术工具。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">误解3：人工智能的产品离普通人很遥远。</span><br><span class="line">事实：现实生活中，我们已经在使用AI技术，而且无处不在。例如：邮件过滤、个性化推荐、微信语音转文字、苹果Siri、谷歌搜索引擎、机器翻译、自动驾驶等等。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">误解4：人工智能是一项技术。</span><br><span class="line">事实：人工智能包含许多技术。在具体的语境中，如果一个系统拥有语音识别、图像识别、检索、自然语言处理、机器翻译、机器学习中的一个或几个能力，那么我们就认为它拥有一定的人工智能。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">误解5：通用型人工智能将在短期内到来。</span><br><span class="line">事实：短期内，通用型人工智能不是产业界主流的研究方向。我们更有可能看到深度学习技术在各个领域深耕。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">误解6：人工智能可以独立、自主地产生意识。</span><br><span class="line">事实：目前的人工智能离通用型人工智能还有一段距离。工具型人工智能无法产生意识。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">误解7：人工智能会在短期内取代人类的工作。</span><br><span class="line">事实：人工智能在不同领域的应用成熟度差别很大，虽然现在人工智能已经能在围棋领域战胜世界上最强的职业棋手，但可能还需要50年才能自主创作出畅销作品。工具型人工智能和人类的能力在许多情境下是互补的，短期内更有可能出现的是人机协作的状态。</span><br></pre></td></tr></table></figure><h3 id="资本思路"><a href="#资本思路" class="headerlink" title="资本思路"></a>资本思路</h3><p><img src="/images/pasted-13.png" alt="upload successful"></p><h3 id="入场思路"><a href="#入场思路" class="headerlink" title="入场思路"></a>入场思路</h3><ul><li>选择成熟技术 结合 已有行业特点 重构新的商业模式。</li><li>选择未成熟技术 深耕技术。</li></ul><h3 id="参考书目"><a href="#参考书目" class="headerlink" title="参考书目"></a>参考书目</h3><ul><li>人工智能 腾讯研究院</li><li>AI.未来 李开复</li><li>人工智能 李开复</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>财务报表</title>
      <link href="/2019/02/13/%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/"/>
      <url>/2019/02/13/%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="三张表"><a href="#三张表" class="headerlink" title="三张表"></a>三张表</h2><p><img src="/images/pasted-3.png" alt="upload successful"></p><h3 id="第一步、利润表"><a href="#第一步、利润表" class="headerlink" title="第一步、利润表"></a>第一步、利润表</h3><p>利润表更多的是给现金流量表和资产负债表提供输入，所以利润表比较容易建立。为了建立利润表，必须对影响利润表的一系列因素进行假设。一些最基本的假设如下：</p><p><img src="/images/pasted-4.png" alt="upload successful"></p><h4 id="指标关系"><a href="#指标关系" class="headerlink" title="指标关系"></a>指标关系</h4><ul><li>销售额增长 ：模型中最底层的预测指标。</li><li>边际贡献（Tcm）： 销售收入 - 变动成本</li><li>运营杠杆 ：又称营业杠杆或营运杠杆，反映销售和息税前盈利的杠杆关系。指在企业生产经营中由于存在固定成本而使利润变动率大于产销量变动率的规律；计算公式 息税前利润变动率/产销业务量变动率；<br>  DOL=（EBIT+F）/EBIT 或者 DOL=Tcm/（Tcm-F）<br>  F 即固定成本<br>  EBIT 为息税前收益  </li><li>净利润增长率 ：(当期净利润-上期净利润)/上期净利润*100%</li><li>净资产收益率（ROE）：净资产收益率又称股东权益报酬率/净值报酬率/权益报酬率/权益利润率/净资产利润率，是净利润与平均股东权益的百分比</li></ul><h4 id="质量监控指标"><a href="#质量监控指标" class="headerlink" title="质量监控指标"></a>质量监控指标</h4><h5 id="运营杠杆"><a href="#运营杠杆" class="headerlink" title="运营杠杆"></a>运营杠杆</h5><p>一般来讲，一个公司的运营杠杆相对固定。如果预测未来公司的各项数字，发现运营杠杆与历史相比有重大变化，这时候就要重新检查各种假设，看是不是有不合理的地方。一般模型假设都没有深入的固定成本与费用和可变成本与费用的分析，很容易把运营杠杆的效果就忽视了</p><h5 id="净利润增长率与ROE"><a href="#净利润增长率与ROE" class="headerlink" title="净利润增长率与ROE"></a>净利润增长率与ROE</h5><p>在盈利能力与资本结构不变的情况下，ROE就是净利增长的极限。如果净利润增长远远超过历史平均ROE水平，那么这个公司一定有重大的改变，比如增发或借贷这样的资本结构变化，或者盈利能力的大幅度提高。如果没有这些重大改变，肯定有一些假设是错误的。 </p><h3 id="第二步、资产负债表"><a href="#第二步、资产负债表" class="headerlink" title="第二步、资产负债表"></a>第二步、资产负债表</h3><p><img src="/images/pasted-5.png" alt="upload successful"></p><h4 id="指标关系-1"><a href="#指标关系-1" class="headerlink" title="指标关系"></a>指标关系</h4><ul><li>现金部分（<strong>现金流量表</strong>）</li><li>借款 ：现金流量表的筹资部分</li><li>固定资产及无形资产 ：现金流量表的经营现金流和投资现金流</li><li>股东权益：现金流量表的筹资部分</li><li>存留收益：利润表中的净利润（<strong>利润表</strong>）  </li></ul><h4 id="质量监控指标-1"><a href="#质量监控指标-1" class="headerlink" title="质量监控指标"></a>质量监控指标</h4><h5 id="现金转换周期"><a href="#现金转换周期" class="headerlink" title="现金转换周期"></a>现金转换周期</h5><p>现金转换周期=存货转换期间+应收账款转换期间－应付账款递延期间=生产经营周期－应付账款平均付款期</p><h3 id="第三步、现金流量表"><a href="#第三步、现金流量表" class="headerlink" title="第三步、现金流量表"></a>第三步、现金流量表</h3><p><img src="/images/pasted-6.png" alt="upload successful"></p><h4 id="指标关系-2"><a href="#指标关系-2" class="headerlink" title="指标关系"></a>指标关系</h4><h4 id="质量监控指标-2"><a href="#质量监控指标-2" class="headerlink" title="质量监控指标"></a>质量监控指标</h4><ul><li>资产周转率 </li><li>财务杠杆</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/images/pasted-7.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> 财务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 财务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>熟悉 IntelliJ IDEA</title>
      <link href="/2019/02/13/%E6%B8%90%E8%BF%9B%E6%AD%A5%E9%AA%A4/"/>
      <url>/2019/02/13/%E6%B8%90%E8%BF%9B%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="安装IntelliJ"><a href="#安装IntelliJ" class="headerlink" title="安装IntelliJ"></a>安装IntelliJ</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><pre><code>http://www.jetbrains.com/idea/download/</code></pre><h3 id="激活教程"><a href="#激活教程" class="headerlink" title="激活教程"></a>激活教程</h3><pre><code>http://idea.lanyus.com/</code></pre><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><pre><code>Grep ConsoleFindBugsCheckStyleGsonFormatJrebelAceJumpmarkdownKey promoter.ignoreMavenAlibaba Java Coding CamelCaseGradle Dependencies FormatterGradle Dependencies HelperLiveEditTranslation</code></pre><h2 id="熟悉快捷键"><a href="#熟悉快捷键" class="headerlink" title="熟悉快捷键"></a>熟悉快捷键</h2><h3 id="ctrl"><a href="#ctrl" class="headerlink" title="ctrl+?"></a>ctrl+?</h3><ul><li>ctrl+E,打开最近文件</li><li>ctrl+J,快速打开帮助文档</li><li>ctrl+enter ,生成代码</li><li>ctrl+O ,覆盖方法</li><li>ctrl+I,实现接口方法</li><li>ctrl+R,运行程序</li><li>ctrl+D,调试程序 </li></ul><h3 id="ctrl-alt"><a href="#ctrl-alt" class="headerlink" title="ctrl+alt+?"></a>ctrl+alt+?</h3><ul><li>ctrl+alt+o，移除未使用 imports</li><li>ctrl+alt+I, 调整光标所在行缩进</li><li>ctrl+alt+R ,列出可执行菜单</li><li>ctrl+alt+H, 方法调用记录</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java基本数据类型</title>
      <link href="/2018/12/02/java%E7%9A%84%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/12/02/java%E7%9A%84%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>原码、反码和补码是计算机存储数字的编码方式（表示方法）。 </li><li>ASCII码、utf-8和utf-16是计算机存储字符的编码方式。</li></ol><h2 id="你需要了解的存储单位"><a href="#你需要了解的存储单位" class="headerlink" title="你需要了解的存储单位"></a>你需要了解的存储单位</h2><table><thead><tr><th>符号</th><th>中文</th><th>解释</th></tr></thead><tbody><tr><td>b (bit)</td><td>比特，位</td><td>存放一位二进制数，即 0 或 1，最小的存储单位</td></tr><tr><td>B (Byte)</td><td>字节</td><td>1B = 8b</td></tr><tr><td>KB</td><td>KB</td><td>1KB = 2^10B = 1024B</td></tr><tr><td>MB</td><td>兆</td><td>1MB = 2^20B = 1024 * 1KB</td></tr><tr><td>GB</td><td>G</td><td>1GB = 2^30B = 1024 * 1MB</td></tr><tr><td>TB</td><td>T</td><td>1TB = 2^40B = 1024 * 1GB</td></tr></tbody></table><ul><li>存储设备一般以B为常用单位；</li><li>宽带传输速度是以Kb为单位，与实际存储单位KB有所不同。（我办理了一个100M带宽，实际速度不会超过100/8=12.5M）</li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><table><thead><tr><th>类型</th><th>字节数</th><th>位数</th><th>最小</th><th>最大</th></tr></thead><tbody><tr><td>byte</td><td>1Byte</td><td>8Bit</td><td>-2^7(-128)</td><td>2^8-1(127)</td></tr><tr><td>short</td><td>2Byte</td><td>2 * 8Bit</td><td>-2^15(-32768)</td><td>2^15-1(32768)</td></tr><tr><td>int</td><td>4Byte</td><td>4* 8Bit</td><td>-2^31</td><td>2^31-1</td></tr><tr><td>long</td><td>8Byte</td><td>8 * 8Bit</td><td>-2^63</td><td>2^63-1</td></tr><tr><td>float</td><td>4Byte</td><td>4 * 8Bit</td><td>-2^</td><td></td></tr><tr><td>double</td><td>8Byte</td><td>8* 8Bit</td><td></td><td></td></tr><tr><td>char</td><td>2Byte</td><td>2* 8Bit</td><td>\u0000</td><td>\uffff</td></tr><tr><td>boolean</td><td>0</td><td>1bit</td><td>0</td><td>1</td></tr></tbody></table><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ol><li>float</li><li>double</li></ol><blockquote><p>在数学中，特别是在计算机相关的数字（浮点数）问题的表述中，有一个基本表达法：<br>value of floating-point = significand x base ^ exponent , with sign<br>译为中文表达即为：<br>（浮点）数值 =      尾数    ×    底数 ^ 指数，（附加正负号）<br>于是，float的指数范围为-127~128，而double的指数范围  为-1023~1024，并且指数位是按补码的形式来划分的。其中负指数决定了浮点数所能表达的绝对值最小的数；而正指数决定了浮点数所能表达的绝对值最大的数，也即决定了浮点数的取值范围。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[高位] ------------------------&gt; [低位]                      </span><br><span class="line">[*][********][***********************]                   </span><br><span class="line"> ↑                                                       </span><br><span class="line">1符号位  ↑                                                  </span><br><span class="line">       8位指数              ↑                                 </span><br><span class="line">                 23位尾数(基数是【1.&lt;尾数&gt;】)                        </span><br><span class="line"> 比如：                                                       </span><br><span class="line"> Float Value:0.75                                          </span><br><span class="line"> IEEE Memory:0-01111110-10000000000000000000000            </span><br><span class="line"> 符号位是：正数，                                                  </span><br><span class="line"> 指数部分是：01111110，即126，根据指数的规则-127~128，0在中间.与char不同。         </span><br><span class="line">          也就是01111111代表数字0。 01111110就是-1(126-127=-1)       </span><br><span class="line"> 基数就是1.100000000                                           </span><br><span class="line"> 二进制值就是：1.1 * 2^-1 = 0.11                                  </span><br><span class="line"> 十进制表示就是:2^-1 + 2^-2 = 0.5 + 0.25 = 0.75</span><br></pre></td></tr></table></figure><hr><ol><li>原码：符号位+数值的绝对值。<br>（1）以8位为例，1的原码为 0000 0001，-1的原码为 1000 0001。<br>（2）取值范围：11111111 ~ 01111111，即：-127 ~ 127。</li><li>反码：正数的反码是原码，负数的反码是在原码的基础上符号位不变，其他位取反的结果。<br>以8位为例：1的反码为 0000 0001，-1的反码为 1111 1110。</li><li>补码：正数的补码是原码，负数的补码是在原码的基础上符号位不变，其他位取反再加一，即：反码+1。<br>以8位为例：1的补码为 0000 0001，-1的补码为 1111 1111。</li><li>补码存在的意义<br>（1）1 - 1 = 1 + (-1) = (0000 0001)(原) + (1000 0001)(原) = (1000 0010)(原) = -2。错误<br>（2）3 + 5 = (0000 0011)(原) + (0000 0101)(原) = (0000 1000)(原) = 8。正确<br>（3）反码相减：3 - 4 = (0000 0011)(原) + (1000 0100)(原) = (0000 0011)(反) + (1111 1011)(反) = (1111 1110)(反) = (1000 0001)(原) = -1。正确<br>（4）反码相减：5 - 3 = (0000 0101)(原) + (1000 0011)(原) = (0000 0101)(反) + (1111 1100)(反) + 1（循环进位）= (0000 0010)(反) = (0000 0010)(原) = 2。正确<br>（5）1 - 1 = 1 + (-1) = (0000 0001)(反) + (1111 1110)(反) = (1111 1111)(反) = (1000 0000) = -0。<br>（6）1 - 1 = (0000 0001)(原) + (1000 0001)(原) = (0000 0001)(补) + (1111 1111)(补)= (0000 0000) (补) = (0000 0000) (原) = 0。<br>（7）-1-127 = (1000 0001)(原) + (1111 1111)(原) = (1111 1111)(补) + (1000 0001)(补) = (1000 0000)(补) = -128。<br>A、由（1）和（2）可知，原码相加是正确的，但是相减是错误的。<br>B、由（3）和（4）可知，反码相加减都是正确的。<br>C、但是由（5）可知，1-1的反码结果为-0，这个结果在数学上是没有意义的，为了解决这个问题，引入了补码。因为补码是在反码的基础上加1，故补码的加减是没有问题的，关键是1-1了。由（6）可知，补码完美的解决了1-1等于-0的尴尬局面，直接得到0。<br>D、由（7）可知，计算机底层算法规定了补码1000 0000 = -128。这也就导致了补码的取值范围由-127~127变为-128~127。</li></ol><p>总结：<br>（1）由于原码相减结果不对，故使用了反码。但是反码1-1得到的结果是-0，这个在数学上是无意义的，为了导出1-1=0的正确结果，故使用了补码，同时规定补码1000 0000 = -128，从而可以将-0表示为-128，拓展了一个表示位，故8位二进制取值范围为-128~127。<br>（2）这里再次强调，在计算机中，数据都是以正数的补码的形式存在的。正数的补码是其本身，负数则是以其本身的正数的补码的形式存在的。<br>栗子：-123在计算机中的存储的值是1111 1011 -&gt; 1000 0100 -&gt; 1000 0101。</p><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><p>占用4个字节，即：32b，有符号位：从左数第一位。<br>取值范围：-2^31 ~ 2^31-1。<br>原因：0 代表 +0，-0 代表 -2^31，故负数比整数多一个。<br>数据以补码的形式存放在内存中。<br>对于+0和-0在内存中的存储方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int _tmain(int argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    int i = +0;</span><br><span class="line">    int k = -0;</span><br><span class="line">    int *pi = &amp;i;</span><br><span class="line">    int *pk = &amp;k;</span><br><span class="line">    char c = &apos;1&apos;;</span><br><span class="line">    char *pc = &amp;c;</span><br><span class="line">    cout&lt;&lt;&quot;int: &quot;&lt;&lt;sizeof(int)&lt;&lt;&quot; byte&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;unsigned int: &quot;&lt;&lt;sizeof(unsigned int)&lt;&lt;&quot; byte&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;float: &quot;&lt;&lt;sizeof(float)&lt;&lt;&quot; byte&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;double: &quot;&lt;&lt;sizeof(double)&lt;&lt;&quot; byte&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;char: &quot;&lt;&lt;sizeof(char)&lt;&lt;&quot; byte&quot;&lt;&lt;endl;</span><br><span class="line">    cin.get();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="unsigned-int"><a href="#unsigned-int" class="headerlink" title="unsigned int"></a>unsigned int</h3><p>占用4个字节，即：32b，无符号位。<br>取值范围：0 ~ 2^32。<br>数据以补码的形式存放在内存中。</p><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><ol><li>浮点数在计算机中用科学计数法表示，栗：1.0100011*2^7。 </li><li>符号位：“+”或者“-”。 </li><li>指数部分：2的幂指数，栗子中的“7”。 </li><li>尾数部分：最高位为“1”的底数，栗子中的“10100011”。 </li><li>栗子：15.987在计算机中存储方式。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（1）15.987的整数部分原码：1111。</span><br><span class="line">（2）15.987的小数部分原码：11111100……此处省略11位。</span><br><span class="line">（3）经过上述计算，15.987的二进制为1111.11111100……，用科学计数法表示为1.11111111100……*2^3。 </span><br><span class="line">（4）指数部分采用移位存储的方式，即3+（2^7-1） = 130。其二进制：10000010。 </span><br><span class="line">（5）尾数部分省略科学计数法的整数部分！！（因为肯定是1）（隐藏位） </span><br><span class="line">（6）15.987在内存中的存放的内容为： </span><br><span class="line">符号位：0（共1位）。 </span><br><span class="line">指数部分：10000010（共8位）。 </span><br><span class="line">尾数部分：111111111000……（共23位）。 </span><br><span class="line">（7）写成完整的二进制：0100 0001 0111 1111 1100 0…… </span><br><span class="line">（8）写成16进制：41 7F C……。 </span><br><span class="line">（9）因为Intel的架构的字节序是小端序，则真正的存放内容为……C 7F 41。</span><br></pre></td></tr></table></figure></li></ol><h3 id="double"><a href="#double" class="headerlink" title="double"></a>double</h3><p>原理同上！</p><h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><p>在内存中以ASCII码的形式存储。<br>栗子：<br><img src="/images/pasted-2.png" alt="img"><br>代码中字符是“1”，ASCII码为49，转换为16进制为31。</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>移位存储：<br>在存储浮点数时，若指数部分若不使用移位存储技术，则会导致0有两种表示方式：1000 000 0和0000 000 0。所以，为了最大化利用价值，同时保留正负性，在原数据的基础上加127，其结果如下：<br>0000 000 0~0111 111 1代表着-127~0。<br>1000 000 0~1111 111 1代表着1~127。<br>这样正负指数均可表示的数量保持一致。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java数据类型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>人生处世</title>
      <link href="/2018/11/30/%E4%BA%BA%E7%94%9F%E5%A4%84%E4%B8%96/"/>
      <url>/2018/11/30/%E4%BA%BA%E7%94%9F%E5%A4%84%E4%B8%96/</url>
      
        <content type="html"><![CDATA[<ol><li>凡事顺其自然。遇事之时泰然，成功之时淡然，失败之时坦然</li><li>岁月本长，而亡者自促；天地本宽，而鄙者自隘；风花雪月本闲，而扰攘者自冗。</li><li>风来疏竹，风过而竹不留声；雁渡寒潭，雁去而谭不留影。故君子事来而心始现，事去而心随空。</li><li>鱼得水逝，而相忘乎水，鸟乘风飞，而不知有风。</li><li>交友须带三分侠气，做人要存一点素心。</li><li>邀千百人之欢，不如释一人之怨；希千百事之荣，不如免一事之丑。</li><li>世态有炎凉，而我无嗔喜；世味有浓淡，而我无欣厌；</li><li>觉人之诈，不形于言；受人之侮，不动于色。</li><li>遍阅人情，始识疏狂之足贵；备尝世味，方知淡泊之为真。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java简介</title>
      <link href="/2018/11/29/java%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/11/29/java%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>java是开发语言，你需要掌握它的语法规则。</p><p>jdk(Java Development Kit)是用java语言写的sdk，你需要了解它提供的能力。</p><p>JVM java虚拟机</p><h2 id="有什么特点"><a href="#有什么特点" class="headerlink" title="有什么特点"></a>有什么特点</h2><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象出现之前的编程方式被称作：结构化编程（面向过程编程）。在我看来本质是方法组合方式的变化，面向对象编程更接近现实生活。</p><p>结构化编程：针对问题设计解决问题的步骤，第一步、第二步、第三步…..等，将这些步骤以方法（function）为载体组合成为一个结构。</p><p>面向对象编程：针对问题设计解决问题步骤，第一步 由谁做什么，第二步由谁做什么…..等，最后将 “谁” 定义出来 且将他们做什么以function的形式声明到它的结构体上面。</p><p>对比：行为关联给对象，可以更好地管理行为。</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>以对象为主体，对象内的东西（属性、方法）与其它对象互相独立。</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>就像你可以集成你父亲的财产，手艺一样。但是你跟你父亲真的是两个独立主体。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>你跟你兄弟姐妹都继承了你父亲的手艺但多少有些不同就产生了多样性。</p><p>高级语言之所以高级是因为：他的理念越来越接近你与人交往沟通方式。面向对象是很重要的里程碑，它是定义了对象并且给予对象拥有万物一样的一些特性：个体独立，可繁衍等。</p><p><img src="/images/pasted-1.png" alt="高级语言的位置"></p><h3 id="与平台无关"><a href="#与平台无关" class="headerlink" title="与平台无关"></a>与平台无关</h3><p>先编译后执行，编写的程序统一由javac 编译成字节码class文件，然后在jvm中解释执行。<br><img src="/images/pasted-0.png" alt="java执行过程"></p><h3 id="其它同级别高级语言特点"><a href="#其它同级别高级语言特点" class="headerlink" title="其它同级别高级语言特点"></a>其它同级别高级语言特点</h3><h4 id="数据结构更直观简单"><a href="#数据结构更直观简单" class="headerlink" title="数据结构更直观简单"></a>数据结构更直观简单</h4><h4 id="自动垃圾回收"><a href="#自动垃圾回收" class="headerlink" title="自动垃圾回收"></a>自动垃圾回收</h4><h4 id="安全、可靠、多线程-等"><a href="#安全、可靠、多线程-等" class="headerlink" title="安全、可靠、多线程 等"></a>安全、可靠、多线程 等</h4><h2 id="你该做什么"><a href="#你该做什么" class="headerlink" title="你该做什么"></a>你该做什么</h2><ul><li>掌握java基础语法</li><li>熟悉SDK提供的能力</li><li>熟悉Jre提供的能力</li><li>深入JVM的原理<ul><li>内存管理</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>选定&amp;搭建博客</title>
      <link href="/2018/11/28/%E9%80%89%E5%AE%9A-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/11/28/%E9%80%89%E5%AE%9A-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="常见博客系统"><a href="#常见博客系统" class="headerlink" title="常见博客系统"></a>常见博客系统</h3><ol><li>wordpress</li><li>Zblog</li><li>Typecho</li><li>hexo</li></ol><h3 id="应该选择哪个"><a href="#应该选择哪个" class="headerlink" title="应该选择哪个"></a>应该选择哪个</h3><p>选择是恐惧的，所以我总在尝试进行降维选择。这里不会对几个主流博客进行一一对比了，问自己两个问题即可：</p><ol><li>工具：你喜欢用word写？还是用md语法写？</li><li>成本：你准备投入多少钱？</li></ol><p>结论：</p><ol><li>工具选择md语法，别犹豫直接选择 hexo  因为可以是0成本</li><li>工具选择word，别犹豫直接选择wordpress 成本为100+/年</li><li>你想用word 又想降低成本，选择云平台：简书 等</li></ol><h3 id="搭建hexo平台"><a href="#搭建hexo平台" class="headerlink" title="搭建hexo平台"></a>搭建hexo平台</h3><h4 id="步骤概览"><a href="#步骤概览" class="headerlink" title="步骤概览"></a>步骤概览</h4><ol><li>安装node</li><li>安装git</li><li>安装hexo</li><li>注册 coding 账号</li><li>注册 github 账号（非必须）</li><li>买域名（非必须）</li><li>开通云主机（非必须）</li></ol><h4 id="步骤拆解"><a href="#步骤拆解" class="headerlink" title="步骤拆解"></a>步骤拆解</h4><h5 id="安装node-已经安装的忽略"><a href="#安装node-已经安装的忽略" class="headerlink" title="安装node(已经安装的忽略)"></a>安装node(已经安装的忽略)</h5><ul><li><p>MAC环境</p><p>  <a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">安装homebrew</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://nodejs.org/zh-cn/download/package-manager" target="_blank" rel="noopener">安装node</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure></p><ul><li><p>WIN环境</p><p>  <a href="https://nodejs.org/zh-cn/download/package-manager" target="_blank" rel="noopener">安装node</a></p></li></ul><h5 id="安装GIT"><a href="#安装GIT" class="headerlink" title="安装GIT"></a>安装GIT</h5><ul><li><p>MAC环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure></li><li><p>WIN环境</p><p>  <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000" target="_blank" rel="noopener">参考安装教程</a></p></li></ul><h5 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h5><pre><code>npm install hexo-cli -ghexo init blogcd blognpm installhexo server</code></pre><p>浏览器打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以访问你刚才安装的hexo了</p><h5 id="搞定Coding环境"><a href="#搞定Coding环境" class="headerlink" title="搞定Coding环境"></a>搞定Coding环境</h5><ul><li><a href="https://coding.net/" target="_blank" rel="noopener">注册</a></li><li><a href="https://coding.net/user/projects" target="_blank" rel="noopener">创建一个项目</a></li><li>配置Page属性，项目—&gt;代码—&gt;Page服务<br>到此，你会得到一个xxx.coding.me/项目名称 网络地址。</li></ul><h5 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h5><ul><li>生成静态文件<pre><code>hexo generate</code></pre></li><li>配置发布地址<pre><code>_config.yml deploy:    type: git    repo:      coding: git@git.coding.net:xxx/xxx.git,master    name:your name     email: doouxiaoyu@163.com</code></pre></li><li>配置GIT账号<pre><code>git config --global user.namegit config --global user.email</code></pre></li><li><p>配置GIT证书</p><pre><code>#生成证书#配置coding 部署公钥</code></pre></li><li><p>发布文件</p><pre><code>hexo deploy</code></pre></li></ul><p>到此，你访问你的coding 地址就会看到你的hexo文章信息了。</p><p>这只是开始，你还得学习hexo的以下内容：</p><ol><li>模版 </li><li>主题</li><li>插件</li></ol><h5 id="添加github支持"><a href="#添加github支持" class="headerlink" title="添加github支持"></a>添加github支持</h5><p><strong>目的</strong><br>github功能跟coding一样一样的，增加它的目的有两个</p><ol><li>不要钱，也不增加工作量</li><li>有自己域名的可以 配置中国访问coding，外国访问 github内容。</li></ol><p><strong>开通步骤</strong> </p><ul><li>注册github账号</li><li>创建项目</li><li>开通page功能</li><li>配置公钥证书</li><li>修改hexo博客配置文件_config.yml<pre><code>deploy:    type: git    repo:      coding: git@git.coding.net:xxx/xxx.git,master      github:xxxxxxx,master    name:your name     email: xxx@163.com</code></pre></li></ul><h5 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h5><p><strong>目的</strong></p><ol><li>牛逼</li><li>方便</li></ol><h5 id="开通云主机"><a href="#开通云主机" class="headerlink" title="开通云主机"></a>开通云主机</h5><p><strong>目的</strong></p><ol><li>牛逼</li><li>hexo 部署到云主机上面可以随时写文字</li><li>可以直接部署自己的博客从而不再依赖coding，github。访问速度更快</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>作战计划</title>
      <link href="/2018/11/28/%E4%BD%9C%E6%88%98%E8%AE%A1%E5%88%92/"/>
      <url>/2018/11/28/%E4%BD%9C%E6%88%98%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><h4 id="选定-amp-搭建好博客环境"><a href="#选定-amp-搭建好博客环境" class="headerlink" title="选定&amp;搭建好博客环境"></a><strong><em>选定&amp;搭建好博客环境</em></strong></h4><h4 id="制定渐进步骤"><a href="#制定渐进步骤" class="headerlink" title="制定渐进步骤"></a><strong><em>制定渐进步骤</em></strong></h4><h3 id="二、java基础"><a href="#二、java基础" class="headerlink" title="二、java基础"></a>二、java基础</h3><h4 id="java简介"><a href="#java简介" class="headerlink" title="java简介"></a>java简介</h4><h4 id="java的基础数据类型"><a href="#java的基础数据类型" class="headerlink" title="java的基础数据类型"></a>java的基础数据类型</h4><h4 id="java数据结构"><a href="#java数据结构" class="headerlink" title="java数据结构"></a>java数据结构</h4><h4 id="待完善……"><a href="#待完善……" class="headerlink" title="待完善……"></a>待完善……</h4><h3 id="三、常见系统架构"><a href="#三、常见系统架构" class="headerlink" title="三、常见系统架构"></a>三、常见系统架构</h3><h4 id="待完善……-1"><a href="#待完善……-1" class="headerlink" title="待完善……"></a>待完善……</h4><h3 id="四、常见问题-amp-解决方案"><a href="#四、常见问题-amp-解决方案" class="headerlink" title="四、常见问题&amp;解决方案"></a>四、常见问题&amp;解决方案</h3><h4 id="等待完善"><a href="#等待完善" class="headerlink" title="等待完善"></a>等待完善</h4><h3 id="五、常见面试题"><a href="#五、常见面试题" class="headerlink" title="五、常见面试题"></a>五、常见面试题</h3><h4 id="待完善……-2"><a href="#待完善……-2" class="headerlink" title="待完善……"></a>待完善……</h4>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> plan </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/13/hello-world/"/>
      <url>/2018/11/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
