<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>国家职业资格证</title>
      <link href="/2019/05/29/PPP/"/>
      <url>/2019/05/29/PPP/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>职业资格证分为准入类、水平评价类。其中准入类时从事相关职业必须要取得的证书，水平评价类 某些职位会有要去，同时作为国家认可的能力。可以享受很多福利待遇。<br>我们常见的职业资格证有：</p><ul><li>教师资格证</li><li>注册会计师</li><li>法律职业资格证，律师</li><li>注册建筑工程师</li><li>护士职业资格证</li><li>记者</li><li>导游<br>…..</li></ul><h2 id="计算机技术与软件专业技术资格"><a href="#计算机技术与软件专业技术资格" class="headerlink" title="计算机技术与软件专业技术资格"></a>计算机技术与软件专业技术资格</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>工作非必须、一般工作无用</li><li>在北京可以以此办理《工作居住证》(工作居住证正常是必须本科及以上学历才可以办理的)，大专生的福音。</li><li>待补充</li></ul><h3 id="证件模版"><a href="#证件模版" class="headerlink" title="证件模版"></a>证件模版</h3><p><img src="/images/pasted-116.png" alt="upload successful"></p><h3 id="资格设置"><a href="#资格设置" class="headerlink" title="资格设置"></a>资格设置</h3><p><img src="/images/pasted-117.png" alt="upload successful"></p><h3 id="岗位设置介绍"><a href="#岗位设置介绍" class="headerlink" title="岗位设置介绍"></a>岗位设置介绍</h3><p><img src="/images/pasted-119.png" alt="upload successful"><br><img src="/images/pasted-118.png" alt="upload successful"><br><img src="/images/pasted-120.png" alt="upload successful"></p><h3 id="报考时间"><a href="#报考时间" class="headerlink" title="报考时间"></a>报考时间</h3><ul><li>3月份</li><li>8月份</li></ul><h3 id="考试时间"><a href="#考试时间" class="headerlink" title="考试时间"></a>考试时间</h3><ul><li>5月份</li><li>11月份</li></ul><h3 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h3><ul><li><a href="http://www.ruankao.org.cn" target="_blank" rel="noopener">计算机技术职业资格网-报名入口</a>  </li><li><a href="http://www.ruankao.org.cn/book" target="_blank" rel="noopener">考试用书</a></li><li><a href="http://bm.ruankao.org.cn/sign/welcome" target="_blank" rel="noopener">报名入口</a></li></ul><h2 id="职业资格证目录"><a href="#职业资格证目录" class="headerlink" title="职业资格证目录"></a>职业资格证目录</h2><p><img src="/images/pasted-115.png" alt="职业资格证">，</p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> 软考 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java语法糖</title>
      <link href="/2019/05/28/JavaGrammarSugar/"/>
      <url>/2019/05/28/JavaGrammarSugar/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>几乎所有语法都有语法糖；</li><li>无实质性的功能，方便开发者；</li><li>或能提高编码效率，或能提供可读性、严谨性；</li></ul><h2 id="常见语法糖"><a href="#常见语法糖" class="headerlink" title="常见语法糖"></a>常见语法糖</h2><h3 id="泛型与类型擦除"><a href="#泛型与类型擦除" class="headerlink" title="泛型与类型擦除"></a>泛型与类型擦除</h3><p>泛型思想最早出现在C++，JDK1.5引进，本质是参数化类型（Parametersized Type)。包含泛型接口、泛型类、泛型方法。Java无泛型时，经常需要开发者强制转换Object类型，运行期间必须对这些风险做处理。泛型出现后将这些风险前置到编译期间。</p><p>代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//不使用泛型</span><br><span class="line">List array=new ArrayList();</span><br><span class="line">array.add(“abc”);</span><br><span class="line">array.add(123);//编译通过</span><br><span class="line">String v=(String)array.get(0);//处理ClassCastException异常</span><br><span class="line"></span><br><span class="line">//使用泛型</span><br><span class="line">List&lt;String&gt; array2=new ArrayList();</span><br><span class="line">array2.add(&quot;abc&quot;);</span><br><span class="line">array.add(123);//编译不通过</span><br><span class="line">String v2=array2.get(0);</span><br></pre></td></tr></table></figure></p><h3 id="自动装箱、拆箱与遍历循环"><a href="#自动装箱、拆箱与遍历循环" class="headerlink" title="自动装箱、拆箱与遍历循环"></a>自动装箱、拆箱与遍历循环</h3><ul><li>包装类的”==”运算在不遇到算数运算的情况下不会自动拆箱</li><li>equals方法不处理数据类型转换的关系。</li></ul><p>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 自动装箱、拆箱</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * a==a1 : true</span><br><span class="line">     * c.equals(c1) : false</span><br><span class="line">     * d.equals(a1 + b1) : false</span><br><span class="line">     * d==a1+b1 : true</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void boxOrUnbox() &#123;</span><br><span class="line">        int a = 1;</span><br><span class="line">        Integer a1 = 1;</span><br><span class="line">        int b = 2;</span><br><span class="line">        Integer b1 = 2;</span><br><span class="line">        Integer c = 300;</span><br><span class="line">        Long c1 = 300l;</span><br><span class="line">        Long d = 3L;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;a==a1 : &quot; + (a == a1));</span><br><span class="line">        System.out.println(&quot;c.equals(c1) : &quot; + (c.equals(c1)));</span><br><span class="line">        System.out.println(&quot;d.equals(a1 + b1) : &quot; + (d.equals(a1 + b1)));</span><br><span class="line">        System.out.println(&quot;d==a1+b1 : &quot; + (d == (a1 + b1)));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h3><p>通过推理可以预测到用于不会执行的代码会在编译时丢掉。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 条件编译</span><br><span class="line">    * &lt;p&gt;</span><br><span class="line">    */</span><br><span class="line">   @Test</span><br><span class="line">   public void conditionCompile() &#123;</span><br><span class="line"></span><br><span class="line">       if (false) &#123;</span><br><span class="line">           System.out.println(&quot;222222&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(&quot;33333&quot;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"> //编译后字节码</span><br><span class="line"> // access flags 0x1</span><br><span class="line"> public conditionCompile()V</span><br><span class="line"> @Lorg/junit/Test;()</span><br><span class="line">  L0</span><br><span class="line">   LINENUMBER 85 L0</span><br><span class="line">   GETSTATIC java/lang/System.out : Ljava/io/PrintStream;</span><br><span class="line">   LDC &quot;33333&quot;</span><br><span class="line">   INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/String;)V</span><br><span class="line">  L1</span><br><span class="line">   LINENUMBER 87 L1</span><br><span class="line">   RETURN</span><br><span class="line">  L2</span><br><span class="line">   LOCALVARIABLE this Lcom/hardydou/lang/GrammarSugarTest; L0 L2 0</span><br><span class="line">   MAXSTACK = 2</span><br><span class="line">   MAXLOCALS = 1</span><br></pre></td></tr></table></figure></p><p>此语法糖只针对if有效，其它条件语(while、for、switch)句会提醒无法编译提示：Unreachable statement  </p><p>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for (; false; ) &#123;&#125;</span><br><span class="line">while (false) &#123;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><ul><li>是一个类</li><li>集成enum类</li><li>是一个final 类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enum EType &#123;</span><br><span class="line">    A,</span><br><span class="line">    B,</span><br><span class="line">    C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">// class version 52.0 (52)</span><br><span class="line">// access flags 0x4030</span><br><span class="line">// signature Ljava/lang/Enum&lt;Lcom/hardydou/lang/EType;&gt;;</span><br><span class="line">// declaration: com/hardydou/lang/EType extends java.lang.Enum&lt;com.hardydou.lang.EType&gt;</span><br><span class="line">final enum com/hardydou/lang/EType extends java/lang/Enum &#123;</span><br><span class="line"></span><br><span class="line">  // compiled from: GrammarSugarTest.java</span><br><span class="line"></span><br><span class="line">  // access flags 0x4019</span><br><span class="line">  public final static enum Lcom/hardydou/lang/EType; A</span><br><span class="line"></span><br><span class="line">  // access flags 0x4019</span><br><span class="line">  public final static enum Lcom/hardydou/lang/EType; B</span><br><span class="line"></span><br><span class="line">  // access flags 0x4019</span><br><span class="line">  public final static enum Lcom/hardydou/lang/EType; C</span><br><span class="line"></span><br><span class="line">  // access flags 0x101A</span><br><span class="line">  private final static synthetic [Lcom/hardydou/lang/EType; $VALUES</span><br><span class="line"></span><br><span class="line">  // access flags 0x9</span><br><span class="line">  public static values()[Lcom/hardydou/lang/EType;</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 131 L0</span><br><span class="line">    GETSTATIC com/hardydou/lang/EType.$VALUES : [Lcom/hardydou/lang/EType;</span><br><span class="line">    INVOKEVIRTUAL [Lcom/hardydou/lang/EType;.clone ()Ljava/lang/Object;</span><br><span class="line">    CHECKCAST [Lcom/hardydou/lang/EType;</span><br><span class="line">    ARETURN</span><br><span class="line">    MAXSTACK = 1</span><br><span class="line">    MAXLOCALS = 0</span><br><span class="line"></span><br><span class="line">  // access flags 0x9</span><br><span class="line">  public static valueOf(Ljava/lang/String;)Lcom/hardydou/lang/EType;</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 131 L0</span><br><span class="line">    LDC Lcom/hardydou/lang/EType;.class</span><br><span class="line">    ALOAD 0</span><br><span class="line">    INVOKESTATIC java/lang/Enum.valueOf (Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;</span><br><span class="line">    CHECKCAST com/hardydou/lang/EType</span><br><span class="line">    ARETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE name Ljava/lang/String; L0 L1 0</span><br><span class="line">    MAXSTACK = 2</span><br><span class="line">    MAXLOCALS = 1</span><br><span class="line"></span><br><span class="line">  // access flags 0x2</span><br><span class="line">  // signature ()V</span><br><span class="line">  // declaration: void &lt;init&gt;()</span><br><span class="line">  private &lt;init&gt;(Ljava/lang/String;I)V</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 131 L0</span><br><span class="line">    ALOAD 0</span><br><span class="line">    ALOAD 1</span><br><span class="line">    ILOAD 2</span><br><span class="line">    INVOKESPECIAL java/lang/Enum.&lt;init&gt; (Ljava/lang/String;I)V</span><br><span class="line">    RETURN</span><br><span class="line">   L1</span><br><span class="line">    LOCALVARIABLE this Lcom/hardydou/lang/EType; L0 L1 0</span><br><span class="line">    MAXSTACK = 3</span><br><span class="line">    MAXLOCALS = 3</span><br><span class="line"></span><br><span class="line">  // access flags 0x8</span><br><span class="line">  static &lt;clinit&gt;()V</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 132 L0</span><br><span class="line">    NEW com/hardydou/lang/EType</span><br><span class="line">    DUP</span><br><span class="line">    LDC &quot;A&quot;</span><br><span class="line">    ICONST_0</span><br><span class="line">    INVOKESPECIAL com/hardydou/lang/EType.&lt;init&gt; (Ljava/lang/String;I)V</span><br><span class="line">    PUTSTATIC com/hardydou/lang/EType.A : Lcom/hardydou/lang/EType;</span><br><span class="line">   L1</span><br><span class="line">    LINENUMBER 133 L1</span><br><span class="line">    NEW com/hardydou/lang/EType</span><br><span class="line">    DUP</span><br><span class="line">    LDC &quot;B&quot;</span><br><span class="line">    ICONST_1</span><br><span class="line">    INVOKESPECIAL com/hardydou/lang/EType.&lt;init&gt; (Ljava/lang/String;I)V</span><br><span class="line">    PUTSTATIC com/hardydou/lang/EType.B : Lcom/hardydou/lang/EType;</span><br><span class="line">   L2</span><br><span class="line">    LINENUMBER 134 L2</span><br><span class="line">    NEW com/hardydou/lang/EType</span><br><span class="line">    DUP</span><br><span class="line">    LDC &quot;C&quot;</span><br><span class="line">    ICONST_2</span><br><span class="line">    INVOKESPECIAL com/hardydou/lang/EType.&lt;init&gt; (Ljava/lang/String;I)V</span><br><span class="line">    PUTSTATIC com/hardydou/lang/EType.C : Lcom/hardydou/lang/EType;</span><br><span class="line">   L3</span><br><span class="line">    LINENUMBER 131 L3</span><br><span class="line">    ICONST_3</span><br><span class="line">    ANEWARRAY com/hardydou/lang/EType</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_0</span><br><span class="line">    GETSTATIC com/hardydou/lang/EType.A : Lcom/hardydou/lang/EType;</span><br><span class="line">    AASTORE</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_1</span><br><span class="line">    GETSTATIC com/hardydou/lang/EType.B : Lcom/hardydou/lang/EType;</span><br><span class="line">    AASTORE</span><br><span class="line">    DUP</span><br><span class="line">    ICONST_2</span><br><span class="line">    GETSTATIC com/hardydou/lang/EType.C : Lcom/hardydou/lang/EType;</span><br><span class="line">    AASTORE</span><br><span class="line">    PUTSTATIC com/hardydou/lang/EType.$VALUES : [Lcom/hardydou/lang/EType;</span><br><span class="line">    RETURN</span><br><span class="line">    MAXSTACK = 4</span><br><span class="line">    MAXLOCALS = 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="断言语句"><a href="#断言语句" class="headerlink" title="断言语句"></a>断言语句</h3><p>在Java中，assert关键字是从JAVA SE 1.4 引入的，为了避免和老版本的Java代码中使用了assert关键字导致错误，Java在执行的时候默认是不启动断言检查的（这个时候，所有的断言语句都将忽略！）。如果要开启断言检查，则需要用开关-enableassertions或-ea来开启。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 测试断言语法糖</span><br><span class="line">    */</span><br><span class="line">   @Test</span><br><span class="line">   public void assertTest() &#123;</span><br><span class="line">       int c = 2;</span><br><span class="line">       assert c != 1 + 1;</span><br><span class="line">       System.out.println(&quot;1111&quot;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>编译后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// access flags 0x1</span><br><span class="line">  public assertTest()V</span><br><span class="line">  @Lorg/junit/Test;()</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 140 L0</span><br><span class="line">    ICONST_2</span><br><span class="line">    ISTORE 1</span><br><span class="line">   L1</span><br><span class="line">    LINENUMBER 141 L1</span><br><span class="line">    GETSTATIC com/hardydou/lang/GrammarSugarTest.$assertionsDisabled : Z</span><br><span class="line">    IFNE L2</span><br><span class="line">    ILOAD 1</span><br><span class="line">    ICONST_2</span><br><span class="line">    IF_ICMPNE L2</span><br><span class="line">    NEW java/lang/AssertionError</span><br><span class="line">    DUP</span><br><span class="line">    INVOKESPECIAL java/lang/AssertionError.&lt;init&gt; ()V</span><br><span class="line">    ATHROW</span><br><span class="line">   L2</span><br><span class="line">    LINENUMBER 142 L2</span><br><span class="line">   FRAME APPEND [I]</span><br><span class="line">    GETSTATIC java/lang/System.out : Ljava/io/PrintStream;</span><br><span class="line">    LDC &quot;1111&quot;</span><br><span class="line">    INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/String;)V</span><br><span class="line">   L3</span><br><span class="line">    LINENUMBER 144 L3</span><br><span class="line">    RETURN</span><br></pre></td></tr></table></figure></p><h3 id="switch对字符串的支持"><a href="#switch对字符串的支持" class="headerlink" title="switch对字符串的支持"></a>switch对字符串的支持</h3><p>jdk1.7 switch开始支持String类型，其实switch并未修改。只是在String编译的时候通过hashcode转换为long类型而已。<br>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void switchAndStr() &#123;</span><br><span class="line">       switch (&quot;abc&quot;) &#123;</span><br><span class="line">           case &quot;abc&quot;:</span><br><span class="line">               System.out.println(&quot;abc&quot;);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>反编译后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void switchAndStr() &#123;</span><br><span class="line">        String var1 = &quot;abc&quot;;</span><br><span class="line">        byte var2 = -1;</span><br><span class="line">        switch(var1.hashCode()) &#123;</span><br><span class="line">        case 96354:</span><br><span class="line">            if (var1.equals(&quot;abc&quot;)) &#123;</span><br><span class="line">                var2 = 0;</span><br><span class="line">            &#125;</span><br><span class="line">        default:</span><br><span class="line">            switch(var2) &#123;</span><br><span class="line">            case 0:</span><br><span class="line">                System.out.println(&quot;abc&quot;);</span><br><span class="line">            default:</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="try语句中定义和关闭资源"><a href="#try语句中定义和关闭资源" class="headerlink" title="try语句中定义和关闭资源"></a>try语句中定义和关闭资源</h3><p>Java 7开始，jdk提供了一种更好的方式关闭资源，使用try-with-resources语句<br>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 资源关闭语法糖</span><br><span class="line">    */</span><br><span class="line">   @Test</span><br><span class="line">   public void try_with_resource() &#123;</span><br><span class="line"></span><br><span class="line">       try (BufferedReader br = new BufferedReader(new FileReader(&quot;&quot;))) &#123;</span><br><span class="line"></span><br><span class="line">           br.readLine();</span><br><span class="line"></span><br><span class="line">       &#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>反编译后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void try_with_resource() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            BufferedReader br = new BufferedReader(new FileReader(&quot;&quot;));</span><br><span class="line">            Throwable var2 = null;</span><br><span class="line">            try &#123;</span><br><span class="line">                br.readLine();</span><br><span class="line">            &#125; catch (Throwable var12) &#123;</span><br><span class="line">                var2 = var12;</span><br><span class="line">                throw var12;</span><br><span class="line">            &#125; finally &#123;</span><br><span class="line">                if (br != null) &#123;</span><br><span class="line">                    if (var2 != null) &#123;</span><br><span class="line">                        try &#123;</span><br><span class="line">                            br.close();</span><br><span class="line">                        &#125; catch (Throwable var11) &#123;</span><br><span class="line">                            var2.addSuppressed(var11);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        br.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception var14) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="for-each"><a href="#for-each" class="headerlink" title="for-each"></a>for-each</h3><p>示例代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * for-each语法糖</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void forEach() &#123;</span><br><span class="line">        String[] ss = new String[]&#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;;</span><br><span class="line">        for (String s : ss) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        for (String s : Arrays.asList(ss)) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>反编译后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void forEach() &#123;</span><br><span class="line">        String[] ss = new String[]&#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;&#125;;</span><br><span class="line">        String[] var2 = ss;</span><br><span class="line">        int var3 = ss.length;</span><br><span class="line"></span><br><span class="line">        for(int var4 = 0; var4 &lt; var3; ++var4) &#123;</span><br><span class="line">            String s = var2[var4];</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Iterator var6 = Arrays.asList(ss).iterator();</span><br><span class="line"></span><br><span class="line">        while(var6.hasNext()) &#123;</span><br><span class="line">            String s = (String)var6.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>示例代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * 字面量</span><br><span class="line">  */</span><br><span class="line"> @Test</span><br><span class="line"> public void zimianliang() &#123;</span><br><span class="line">     int a = 10_00;</span><br><span class="line">     int b = 1000;</span><br><span class="line">     System.out.println(a == b);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>反编译后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void zimianliang() &#123;</span><br><span class="line">       int a = 1000;</span><br><span class="line">       int b = 1000;</span><br><span class="line">       System.out.println(a == b);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="方法变长参数"><a href="#方法变长参数" class="headerlink" title="方法变长参数"></a>方法变长参数</h3><p>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void classTest() &#123;</span><br><span class="line">        build(&quot;a&quot;, &quot;c&quot;, &quot;b&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String build(String... strs) &#123;</span><br><span class="line">        String r = &quot;&quot;;</span><br><span class="line">        for (String s : strs) &#123;</span><br><span class="line">            r += s;</span><br><span class="line">        &#125;</span><br><span class="line">        return r;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>反编译后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">   public void classTest() &#123;</span><br><span class="line">       build(&quot;a&quot;, &quot;c&quot;, &quot;b&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public static String build(String... strs) &#123;</span><br><span class="line">       String r = &quot;&quot;;</span><br><span class="line">       String[] var2 = strs;</span><br><span class="line">       int var3 = strs.length;</span><br><span class="line"></span><br><span class="line">       for(int var4 = 0; var4 &lt; var3; ++var4) &#123;</span><br><span class="line">           String s = var2[var4];</span><br><span class="line">           r = r + s;</span><br><span class="line">       &#125;</span><br><span class="line">       return r;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="语法糖坑"><a href="#语法糖坑" class="headerlink" title="语法糖坑"></a>语法糖坑</h2><ul><li>泛型重载</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//无法通过编译</span><br><span class="line">public static void m1(List&lt;String&gt; list) &#123; </span><br><span class="line">   &#125;</span><br><span class="line">   public static void m1(List&lt;Integer&gt; list) &#123;  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li>泛型不可用于exception</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//以下代码是错误示例</span><br><span class="line">//被擦除后 两个都是MyException 无法分开。</span><br><span class="line">try&#123;</span><br><span class="line">...</span><br><span class="line">&#125;catch(MyException&lt;Integer&gt; e)&#123;</span><br><span class="line">...</span><br><span class="line">&#125;catch(MyException&lt;String&gt; f)&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>泛型的静态变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class O&lt;T&gt;&#123;</span><br><span class="line">public static var=0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">O&lt;String&gt; o1=new O();</span><br><span class="line">o1.var=1;</span><br><span class="line">O&lt;Intger&gt; o2=new O();</span><br><span class="line">o2.var=2;</span><br><span class="line"></span><br><span class="line">//此时，o1.var 跟 o2.var 是同一个。</span><br></pre></td></tr></table></figure><ul><li>自动拆箱-对象相等容易混淆  </li></ul><p>适用于整数值区间-128 至 +127。<br>只适用于自动装箱。使用构造函数创建对象不适用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer a2 = 1000;</span><br><span class="line">Integer b2 = 1000;</span><br><span class="line">System.out.println(&quot;a2==b2 is &quot; + (a2 == b2));//false</span><br><span class="line">Integer a3 = 127;</span><br><span class="line">Integer b3 = 127;</span><br><span class="line">System.out.println(&quot;a3==b3 is &quot; + (a3 == b3));//true</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 语法糖 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java虚拟机性能监控工具</title>
      <link href="/2019/05/24/JavaTools/"/>
      <url>/2019/05/24/JavaTools/</url>
      
        <content type="html"><![CDATA[<h2 id="依赖数据"><a href="#依赖数据" class="headerlink" title="依赖数据"></a>依赖数据</h2><ul><li>运行日志</li><li>异常堆栈</li><li>GC日志</li><li>线程快照</li><li>堆转储快照</li></ul><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><h3 id="工具概述"><a href="#工具概述" class="headerlink" title="工具概述"></a>工具概述</h3><p>工具存放位置</p><pre><code>${JavaHome}/bin/</code></pre><p>工具代码逻辑在</p><pre><code>jdk/lib/tools.jar</code></pre><p>Jdk1.5虚拟机时</p><pre><code>启动时增加 -Dcom.sun.management.jmxremote 启动jmx功能，否则部分工具无法使用</code></pre><h3 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h3><p><img src="/images/pasted-105.png" alt="upload successful"></p><h4 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h4><p>虚拟机进程状况恐惧，类似linux ps指令。用于获取当前运行的 java进程情况</p><p>jps命令格式：</p><pre><code>jps [options] [hostid]</code></pre><p>jps执行样例：</p><pre><code>$ ~ jps -l43629 sun.tools.jps.Jps431</code></pre><p>jps主要选项<br><img src="/images/pasted-106.png" alt="upload successful"></p><h4 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h4><p>虚拟机统计信息监控工具jstat(Jvm Statistics Monitoring Tool)，可以获取虚拟机进程中：</p><ul><li>类装载</li><li>内存</li><li>垃圾回收</li><li>JIT编译</li></ul><p>jstat命令格式：</p><pre><code>jstat [option vmid [interval[s|ms] [count] ]</code></pre><p>远程vmid格式</p><pre><code>[protocol:][//]lvmid[@hostname[:port]/servername]</code></pre><p>其中</p><ul><li>interval 间隔时间，默认 无</li><li>count 执行次数，默认1次</li></ul><p>示例：</p><pre><code>jstat -gc 2764 100 10</code></pre><p>查询进程为2764的虚拟机 垃圾收集信息，每个100ms查询一次，一共查询10次。</p><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">~ jstat -gc 431  100 10</span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT</span><br><span class="line">14144.0 14144.0  0.0    0.0   113536.0  2372.7   283440.0   156408.7  378640.0 349994.2 48716.0 42774.9    411    5.382  28     80.143   85.525</span><br><span class="line">14144.0 14144.0  0.0    0.0   113536.0  2372.7   283440.0   156408.7  378640.0 349994.2 48716.0 42774.9    411    5.382  28     80.143   85.525</span><br><span class="line">14144.0 14144.0  0.0    0.0   113536.0  2372.7   283440.0   156408.7  378640.0 349994.2 48716.0 42774.9    411    5.382  28     80.143   85.525</span><br><span class="line">14144.0 14144.0  0.0    0.0   113536.0  2372.7   283440.0   156408.7  378640.0 349994.2 48716.0 42774.9    411    5.382  28     80.143   85.525</span><br><span class="line">14144.0 14144.0  0.0    0.0   113536.0  2372.7   283440.0   156408.7  378640.0 349994.2 48716.0 42774.9    411    5.382  28     80.143   85.525</span><br><span class="line">14144.0 14144.0  0.0    0.0   113536.0  2372.7   283440.0   156408.7  378640.0 349994.2 48716.0 42774.9    411    5.382  28     80.143   85.525</span><br><span class="line">14144.0 14144.0  0.0    0.0   113536.0  2372.7   283440.0   156408.7  378640.0 349994.2 48716.0 42774.9    411    5.382  28     80.143   85.525</span><br><span class="line">14144.0 14144.0  0.0    0.0   113536.0  2372.7   283440.0   156408.7  378640.0 349994.2 48716.0 42774.9    411    5.382  28     80.143   85.525</span><br><span class="line">14144.0 14144.0  0.0    0.0   113536.0  2372.7   283440.0   156408.7  378640.0 349994.2 48716.0 42774.9    411    5.382  28     80.143   85.525</span><br><span class="line">14144.0 14144.0  0.0    0.0   113536.0  2372.7   283440.0   156408.7  378640.0 349994.2 48716.0 42774.9    411    5.382  28     80.143   85.525</span><br></pre></td></tr></table></figure><p>其中</p><pre><code>YGC      YGCT          FGC    FGCT     GCTYGC次数   YGC总消耗时间  FGc次数 Fgc总时间 所有GC总时间</code></pre><h4 id="jinfo"><a href="#jinfo" class="headerlink" title="jinfo"></a>jinfo</h4><p>Java配置信息工具jinfo(Configuration Info for java)作用：</p><ul><li>实时查看、调整 虚拟机各项参数</li></ul><p>jinfo命令格式：</p><pre><code>jinfo [option] pid</code></pre><p>jinfo命令选项：<br><img src="/images/pasted-107.png" alt="upload successful"></p><p>Mac + Jdk1.8 无法使用测试jinfo命令。</p><h4 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h4><p>jmap(Memory Map for Java)用于生成堆转储快照（一般为heapdump或dump文件)。不用jmap还可以通过以下方式获取dump文件：</p><ul><li>-XX:+HeapDumpOnOutOfMemoryError<br>  当虚拟机遇到oom异常时就会自动生成dump文件。</li><li>-XX:+HeapDumpOnCtrlBreak<br>  可以使用ctrl+break键让虚拟机生成dump文件</li><li>linux 下通过kill -3 pid<br>  吓唬虚拟机生成dump文件。</li></ul><p>jmap工具主要选项</p><p><img src="/images/pasted-108.png" alt="upload successful"></p><p>dump文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.161-b12 mixed mode):</span><br><span class="line"></span><br><span class="line">&quot;Attach Listener&quot; #13 daemon prio=9 os_prio=31 tid=0x00007f837d042800 nid=0x3f03 runnable [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;DestroyJavaVM&quot; #12 prio=5 os_prio=31 tid=0x00007f837c005800 nid=0x2603 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;T2&quot; #11 prio=5 os_prio=31 tid=0x00007f837c8ed000 nid=0x3e03 waiting for monitor entry [0x0000700003f70000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">at com.hardydou.jmm.DeadLock.doSomeThing(DeadLock.java:29)</span><br><span class="line">- waiting to lock &lt;0x000000079570f7d0&gt; (a java.lang.String)</span><br><span class="line">- locked &lt;0x000000079570f800&gt; (a java.lang.String)</span><br><span class="line">at com.hardydou.jmm.DeadLock.run(DeadLock.java:37)</span><br><span class="line"></span><br><span class="line">&quot;T1&quot; #10 prio=5 os_prio=31 tid=0x00007f837c858000 nid=0x3c03 waiting for monitor entry [0x0000700003e6d000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">at com.hardydou.jmm.DeadLock.doSomeThing(DeadLock.java:29)</span><br><span class="line">- waiting to lock &lt;0x000000079570f800&gt; (a java.lang.String)</span><br><span class="line">- locked &lt;0x000000079570f7d0&gt; (a java.lang.String)</span><br><span class="line">at com.hardydou.jmm.DeadLock.run(DeadLock.java:37)</span><br><span class="line"></span><br><span class="line">&quot;Service Thread&quot; #9 daemon prio=9 os_prio=31 tid=0x00007f837c828000 nid=0x3903 runnable [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;C1 CompilerThread2&quot; #8 daemon prio=9 os_prio=31 tid=0x00007f837c076800 nid=0x3803 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;C2 CompilerThread1&quot; #7 daemon prio=9 os_prio=31 tid=0x00007f837b815000 nid=0x4603 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;C2 CompilerThread0&quot; #6 daemon prio=9 os_prio=31 tid=0x00007f837d03e800 nid=0x4703 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;Monitor Ctrl-Break&quot; #5 daemon prio=5 os_prio=31 tid=0x00007f837d01e800 nid=0x4903 runnable [0x000070000385b000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">at java.net.SocketInputStream.socketRead0(Native Method)</span><br><span class="line">at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)</span><br><span class="line">at java.net.SocketInputStream.read(SocketInputStream.java:171)</span><br><span class="line">at java.net.SocketInputStream.read(SocketInputStream.java:141)</span><br><span class="line">at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)</span><br><span class="line">at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)</span><br><span class="line">at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)</span><br><span class="line">- locked &lt;0x00000007957af218&gt; (a java.io.InputStreamReader)</span><br><span class="line">at java.io.InputStreamReader.read(InputStreamReader.java:184)</span><br><span class="line">at java.io.BufferedReader.fill(BufferedReader.java:161)</span><br><span class="line">at java.io.BufferedReader.readLine(BufferedReader.java:324)</span><br><span class="line">- locked &lt;0x00000007957af218&gt; (a java.io.InputStreamReader)</span><br><span class="line">at java.io.BufferedReader.readLine(BufferedReader.java:389)</span><br><span class="line">at com.intellij.rt.execution.application.AppMainV2$1.run(AppMainV2.java:64)</span><br><span class="line"></span><br><span class="line">&quot;Signal Dispatcher&quot; #4 daemon prio=9 os_prio=31 tid=0x00007f837c827000 nid=0x360b waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;Finalizer&quot; #3 daemon prio=8 os_prio=31 tid=0x00007f837c842800 nid=0x2f03 in Object.wait() [0x0000700003655000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">at java.lang.Object.wait(Native Method)</span><br><span class="line">- waiting on &lt;0x0000000795588ec0&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class="line">at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143)</span><br><span class="line">- locked &lt;0x0000000795588ec0&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class="line">at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:164)</span><br><span class="line">at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)</span><br><span class="line"></span><br><span class="line">&quot;Reference Handler&quot; #2 daemon prio=10 os_prio=31 tid=0x00007f837c016000 nid=0x5203 in Object.wait() [0x0000700003552000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">at java.lang.Object.wait(Native Method)</span><br><span class="line">- waiting on &lt;0x0000000795586b68&gt; (a java.lang.ref.Reference$Lock)</span><br><span class="line">at java.lang.Object.wait(Object.java:502)</span><br><span class="line">at java.lang.ref.Reference.tryHandlePending(Reference.java:191)</span><br><span class="line">- locked &lt;0x0000000795586b68&gt; (a java.lang.ref.Reference$Lock)</span><br><span class="line">at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)</span><br><span class="line"></span><br><span class="line">&quot;VM Thread&quot; os_prio=31 tid=0x00007f837d00a000 nid=0x2e03 runnable </span><br><span class="line"></span><br><span class="line">&quot;GC task thread#0 (ParallelGC)&quot; os_prio=31 tid=0x00007f837d004800 nid=0x1f07 runnable </span><br><span class="line"></span><br><span class="line">&quot;GC task thread#1 (ParallelGC)&quot; os_prio=31 tid=0x00007f837d005800 nid=0x1e03 runnable </span><br><span class="line"></span><br><span class="line">&quot;GC task thread#2 (ParallelGC)&quot; os_prio=31 tid=0x00007f837d006000 nid=0x2b03 runnable </span><br><span class="line"></span><br><span class="line">&quot;GC task thread#3 (ParallelGC)&quot; os_prio=31 tid=0x00007f837d006800 nid=0x2d03 runnable </span><br><span class="line"></span><br><span class="line">&quot;VM Periodic Task Thread&quot; os_prio=31 tid=0x00007f837d042000 nid=0x4303 waiting on condition </span><br><span class="line"></span><br><span class="line">JNI global references: 33</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Found one Java-level deadlock:</span><br><span class="line">=============================</span><br><span class="line">&quot;T2&quot;:</span><br><span class="line">  waiting to lock monitor 0x00007f837c01c0a8 (object 0x000000079570f7d0, a java.lang.String),</span><br><span class="line">  which is held by &quot;T1&quot;</span><br><span class="line">&quot;T1&quot;:</span><br><span class="line">  waiting to lock monitor 0x00007f837c0196b8 (object 0x000000079570f800, a java.lang.String),</span><br><span class="line">  which is held by &quot;T2&quot;</span><br><span class="line"></span><br><span class="line">Java stack information for the threads listed above:</span><br><span class="line">===================================================</span><br><span class="line">&quot;T2&quot;:</span><br><span class="line">at com.hardydou.jmm.DeadLock.doSomeThing(DeadLock.java:29)</span><br><span class="line">- waiting to lock &lt;0x000000079570f7d0&gt; (a java.lang.String)</span><br><span class="line">- locked &lt;0x000000079570f800&gt; (a java.lang.String)</span><br><span class="line">at com.hardydou.jmm.DeadLock.run(DeadLock.java:37)</span><br><span class="line">&quot;T1&quot;:</span><br><span class="line">at com.hardydou.jmm.DeadLock.doSomeThing(DeadLock.java:29)</span><br><span class="line">- waiting to lock &lt;0x000000079570f800&gt; (a java.lang.String)</span><br><span class="line">- locked &lt;0x000000079570f7d0&gt; (a java.lang.String)</span><br><span class="line">at com.hardydou.jmm.DeadLock.run(DeadLock.java:37)</span><br><span class="line"></span><br><span class="line">Found 1 deadlock.</span><br><span class="line"></span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 38400K, used 7323K [0x0000000795580000, 0x0000000798000000, 0x00000007c0000000)</span><br><span class="line">  eden space 33280K, 22% used [0x0000000795580000,0x0000000795ca6e80,0x0000000797600000)</span><br><span class="line">  from space 5120K, 0% used [0x0000000797b00000,0x0000000797b00000,0x0000000798000000)</span><br><span class="line">  to   space 5120K, 0% used [0x0000000797600000,0x0000000797600000,0x0000000797b00000)</span><br><span class="line"> ParOldGen       total 87552K, used 0K [0x0000000740000000, 0x0000000745580000, 0x0000000795580000)</span><br><span class="line">  object space 87552K, 0% used [0x0000000740000000,0x0000000740000000,0x0000000745580000)</span><br><span class="line"> Metaspace       used 3818K, capacity 4540K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 423K, capacity 428K, committed 512K, reserved 1048576K</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code 137 (interrupted by signal 9: SIGKILL)</span><br></pre></td></tr></table></figure><h4 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h4><p>jhat(JVM Heap Analysis Tool)虚拟机堆转储快照分析工具(分析dump文件)，内嵌html服务器，可以通过浏览器查看分析结果。不建议使用。<br>结果以包为集合分组显示。主要看里面的 Heap Histogram 项目（与jmap -histo 功能一样）与OQL页签功能。</p><h4 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h4><p>Java堆栈跟踪工具jstack(Stack Trace for Java)，用于获取虚拟机当前时刻的线程快照（每一条线程正在执行的方法栈的集合）。目的是定位线程出现长时间停顿的原因，如线程间死锁、死循环、请求外部资源导致长时间等待。</p><p>JDK1.5中，java.lang.Thread 新增一个getAllStackTraces()方法用于获取虚拟机中所有线程的StackTraceElement对象，有同样的效果。</p><p>jstack命令格式：</p><pre><code>jstack [option] vmid</code></pre><p>jstack命令主要选项：<br><img src="/images/pasted-109.png" alt="upload successful"></p><p>demo样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">2019-05-27 13:46:49</span><br><span class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.161-b12 mixed mode):</span><br><span class="line"></span><br><span class="line">&quot;Attach Listener&quot; #13 daemon prio=9 os_prio=31 tid=0x00007fed89037800 nid=0x3f03 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">        - None</span><br><span class="line"></span><br><span class="line">&quot;DestroyJavaVM&quot; #12 prio=5 os_prio=31 tid=0x00007fed8985f000 nid=0x2703 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">        - None</span><br><span class="line"></span><br><span class="line">&quot;T2&quot; #11 prio=5 os_prio=31 tid=0x00007fed8a0ed800 nid=0x3d03 waiting for monitor entry [0x000070000acde000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">        at com.hardydou.jmm.DeadLock.doSomeThing(DeadLock.java:29)</span><br><span class="line">        - waiting to lock &lt;0x000000079570f8d8&gt; (a java.lang.String)</span><br><span class="line">        - locked &lt;0x000000079570f908&gt; (a java.lang.String)</span><br><span class="line">        at com.hardydou.jmm.DeadLock.run(DeadLock.java:37)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">        - None</span><br><span class="line"></span><br><span class="line">&quot;T1&quot; #10 prio=5 os_prio=31 tid=0x00007fed8a0ed000 nid=0x4303 waiting for monitor entry [0x000070000abdb000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">        at com.hardydou.jmm.DeadLock.doSomeThing(DeadLock.java:29)</span><br><span class="line">        - waiting to lock &lt;0x000000079570f908&gt; (a java.lang.String)</span><br><span class="line">        - locked &lt;0x000000079570f8d8&gt; (a java.lang.String)</span><br><span class="line">        at com.hardydou.jmm.DeadLock.run(DeadLock.java:37)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">        - None</span><br><span class="line"></span><br><span class="line">&quot;Service Thread&quot; #9 daemon prio=9 os_prio=31 tid=0x00007fed8a0e1800 nid=0x3a03 runnable [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">        - None</span><br><span class="line"></span><br><span class="line">&quot;C1 CompilerThread2&quot; #8 daemon prio=9 os_prio=31 tid=0x00007fed8a0a7000 nid=0x4603 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">        - None</span><br><span class="line"></span><br><span class="line">&quot;C2 CompilerThread1&quot; #7 daemon prio=9 os_prio=31 tid=0x00007fed8a0a6000 nid=0x3803 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">        - None</span><br><span class="line"></span><br><span class="line">&quot;C2 CompilerThread0&quot; #6 daemon prio=9 os_prio=31 tid=0x00007fed8985e800 nid=0x3603 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">        - None</span><br><span class="line"></span><br><span class="line">&quot;Monitor Ctrl-Break&quot; #5 daemon prio=5 os_prio=31 tid=0x00007fed8981c800 nid=0x4903 runnable [0x000070000a5c9000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">        at java.net.SocketInputStream.socketRead0(Native Method)</span><br><span class="line">        at java.net.SocketInputStream.socketRead(SocketInputStream.java:116)</span><br><span class="line">        at java.net.SocketInputStream.read(SocketInputStream.java:171)</span><br><span class="line">        at java.net.SocketInputStream.read(SocketInputStream.java:141)</span><br><span class="line">        at sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)</span><br><span class="line">        at sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)</span><br><span class="line">        at sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)</span><br><span class="line">        - locked &lt;0x00000007957af110&gt; (a java.io.InputStreamReader)</span><br><span class="line">        at java.io.InputStreamReader.read(InputStreamReader.java:184)</span><br><span class="line">        at java.io.BufferedReader.fill(BufferedReader.java:161)</span><br><span class="line">        at java.io.BufferedReader.readLine(BufferedReader.java:324)</span><br><span class="line">        - locked &lt;0x00000007957af110&gt; (a java.io.InputStreamReader)</span><br><span class="line">        at java.io.BufferedReader.readLine(BufferedReader.java:389)</span><br><span class="line">        at com.intellij.rt.execution.application.AppMainV2$1.run(AppMainV2.java:64)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">        - None</span><br><span class="line"></span><br><span class="line">&quot;Signal Dispatcher&quot; #4 daemon prio=9 os_prio=31 tid=0x00007fed8a053800 nid=0x4a0b runnable [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">        - None</span><br><span class="line"></span><br><span class="line">&quot;Finalizer&quot; #3 daemon prio=8 os_prio=31 tid=0x00007fed89807800 nid=0x5003 in Object.wait() [0x000070000a3c3000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(Native Method)</span><br><span class="line">        - waiting on &lt;0x0000000795588ec0&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class="line">        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143)</span><br><span class="line">        - locked &lt;0x0000000795588ec0&gt; (a java.lang.ref.ReferenceQueue$Lock)</span><br><span class="line">        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:164)</span><br><span class="line">        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">        - None</span><br><span class="line"></span><br><span class="line">&quot;Reference Handler&quot; #2 daemon prio=10 os_prio=31 tid=0x00007fed8900c800 nid=0x2d03 in Object.wait() [0x000070000a2c0000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(Native Method)</span><br><span class="line">        - waiting on &lt;0x0000000795586b68&gt; (a java.lang.ref.Reference$Lock)</span><br><span class="line">        at java.lang.Object.wait(Object.java:502)</span><br><span class="line">        at java.lang.ref.Reference.tryHandlePending(Reference.java:191)</span><br><span class="line">        - locked &lt;0x0000000795586b68&gt; (a java.lang.ref.Reference$Lock)</span><br><span class="line">        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">        - None</span><br><span class="line"></span><br><span class="line">&quot;VM Thread&quot; os_prio=31 tid=0x00007fed89807000 nid=0x2c03 runnable </span><br><span class="line"></span><br><span class="line">&quot;GC task thread#0 (ParallelGC)&quot; os_prio=31 tid=0x00007fed8a80d800 nid=0x2007 runnable </span><br><span class="line"></span><br><span class="line">&quot;GC task thread#1 (ParallelGC)&quot; os_prio=31 tid=0x00007fed8a80e000 nid=0x2303 runnable </span><br><span class="line"></span><br><span class="line">&quot;GC task thread#2 (ParallelGC)&quot; os_prio=31 tid=0x00007fed8a80e800 nid=0x2a03 runnable </span><br><span class="line"></span><br><span class="line">&quot;GC task thread#3 (ParallelGC)&quot; os_prio=31 tid=0x00007fed8a80f800 nid=0x5303 runnable </span><br><span class="line"></span><br><span class="line">&quot;VM Periodic Task Thread&quot; os_prio=31 tid=0x00007fed8a026800 nid=0x4403 waiting on condition </span><br><span class="line"></span><br><span class="line">JNI global references: 33</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Found one Java-level deadlock:</span><br></pre></td></tr></table></figure><h4 id="JConsole"><a href="#JConsole" class="headerlink" title="JConsole"></a>JConsole</h4><p>可视化工具，包含：概述、内存、线程、类、vm摘要、MBean 等6个标签。</p><p><img src="/images/pasted-110.png" alt="upload successful"></p><p><img src="/images/pasted-111.png" alt="upload successful"></p><p><img src="/images/pasted-112.png" alt="upload successful"></p><p><img src="/images/pasted-113.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaGC日志格式</title>
      <link href="/2019/05/23/JavaGCLog/"/>
      <url>/2019/05/23/JavaGCLog/</url>
      
        <content type="html"><![CDATA[<ul><li>不同收集器日志格式不同</li><li>不同收集器日志有一些共性</li><li>gc日志需要相对应开关控制</li></ul><h2 id="GC参数汇总"><a href="#GC参数汇总" class="headerlink" title="GC参数汇总"></a>GC参数汇总</h2><p><img src="/images/pasted-103.png" alt="gc参数总结"></p><h2 id="GC日志参数"><a href="#GC日志参数" class="headerlink" title="GC日志参数"></a>GC日志参数</h2><h3 id="verbose-gc"><a href="#verbose-gc" class="headerlink" title="-verbose:gc"></a>-verbose:gc</h3><p>输出gc详细情况，效果等同于：-XX:+PrintGC </p><pre><code>-verbose:gc  稳定版本  参见：[官方文档](http://docs.oracle.com/javase/7/docs/technotes/tools/windows/java.html) </code></pre><hr><pre><code>-XX:+PrintGC  非稳定版本，可能在未通知的情况下删除，在下面官方文档中是-XX:-PrintGC。  因为被标记为manageable，所以可以通过如下三种方式修改：1. com.sun.management.HotSpotDiagnosticMXBean API2. JConsole3. jinfo -flag参见：[官方文档](http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html)</code></pre><p>输出格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[GC类型（gc原因）gc前占用空间-&gt;gc后占用空间(堆总空间)，gc消耗时间(秒)]</span><br><span class="line">[GC (System.gc())  7891K-&gt;1320K(62976K), 0.0018702 secs]</span><br><span class="line">[Full GC (System.gc())  1320K-&gt;1202K(62976K), 0.0112032 secs]</span><br></pre></td></tr></table></figure><h3 id="XX-PrintGCDetails"><a href="#XX-PrintGCDetails" class="headerlink" title="-XX:+PrintGCDetails"></a>-XX:+PrintGCDetails</h3><p>打印gc详细信息、添加后 -verbose:gc（-XX:+PrintGC）自动失效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    GC类型 (GC原因) </span><br><span class="line">    [代区域标识：gc前占用空间-&gt;gc后占用空间（代总空间） ]</span><br><span class="line">    …… </span><br><span class="line">    总gc前占用空间-&gt;总gc后占用空间（堆空间），</span><br><span class="line">    [元数据空间：gc前占用空间-&gt;gc后占用空间（元数据总空间）],gc总消耗时间(秒)]</span><br><span class="line">    [时间分布：用户时间 系统时间 真实消耗时间]</span><br><span class="line">由于多cpu的原因，用户时间+系统时间≥真实消耗时间</span><br><span class="line"></span><br><span class="line">[GC (System.gc()) [PSYoungGen: 9974K-&gt;2320K(18944K)] 9974K-&gt;3352K(62976K), 0.0075374 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] </span><br><span class="line">[Full GC (System.gc()) [PSYoungGen: 2320K-&gt;0K(18944K)] [ParOldGen: 1032K-&gt;3244K(44032K)] 3352K-&gt;3244K(62976K), [Metaspace: 5059K-&gt;5059K(1056768K)], 0.0083919 secs] [Times: user=0.01 sys=0.01, real=0.01 secs] </span><br><span class="line"></span><br><span class="line">内存空间明细：</span><br><span class="line"></span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 18944K, used 1524K [0x00000007beb00000, 0x00000007c0000000, 0x00000007c0000000)</span><br><span class="line">  eden space 16384K, 9% used [0x00000007beb00000,0x00000007bec7d110,0x00000007bfb00000)</span><br><span class="line">  from space 2560K, 0% used [0x00000007bfb00000,0x00000007bfb00000,0x00000007bfd80000)</span><br><span class="line">  to   space 2560K, 0% used [0x00000007bfd80000,0x00000007bfd80000,0x00000007c0000000)</span><br><span class="line"> ParOldGen       total 44032K, used 795K [0x00000007bc000000, 0x00000007beb00000, 0x00000007beb00000)</span><br><span class="line">  object space 44032K, 1% used [0x00000007bc000000,0x00000007bc0c6e20,0x00000007beb00000)</span><br><span class="line"> Metaspace       used 5370K, capacity 5488K, committed 5632K, reserved 1056768K</span><br><span class="line">  class space    used 619K, capacity 656K, committed 768K, reserved 1048576K</span><br></pre></td></tr></table></figure><h3 id="XX-PrintGCTimeStamps"><a href="#XX-PrintGCTimeStamps" class="headerlink" title="-XX:+PrintGCTimeStamps"></a>-XX:+PrintGCTimeStamps</h3><p>最前面增加gc发生时间（jvm启动到gc发生时刻的秒数），其余格式无变化。<br>同上面两个参数配合使用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.484: [GC (System.gc())  4960K-&gt;3982K(62976K), 0.0014751 secs]</span><br><span class="line">0.485: [Full GC (System.gc())  3982K-&gt;1829K(62976K), 0.0105126 secs]</span><br></pre></td></tr></table></figure></p><h2 id="GC触发原因"><a href="#GC触发原因" class="headerlink" title="GC触发原因"></a>GC触发原因</h2><ul><li>“System.gc()”;</li><li>“FullGCAlot”;</li><li>“ScavengeAlot”;</li><li>“Allocation Profiler”;</li><li>“JvmtiEnv ForceGarbageCollection”;</li><li>“GCLocker Initiated GC”;</li><li>“Heap Inspection Initiated GC”;</li><li>“Heap Dump Initiated GC”;</li><li>“WhiteBox Initiated Young GC”;</li><li>“WhiteBox Initiated Concurrent Mark”;</li><li>“WhiteBox Initiated Full GC”;</li><li>“Update Allocation Context Stats”;</li><li>“No GC”;</li><li>“Allocation Failure”;</li><li>“Tenured Generation Full”;</li><li>“Metadata GC Threshold”;</li><li>“Metadata GC Clear Soft References”;</li><li>“CMS Generation Full”;</li><li>“CMS Initial Mark”;</li><li>“CMS Final Remark”;</li><li>“CMS Concurrent Mark”;</li><li>“Old Generation Expanded On Last Scavenge”;</li><li>“Old Generation Too Full To Scavenge”;</li><li>“Ergonomics”;</li><li>“G1 Evacuation Pause”;</li><li>“G1 Humongous Allocation”;</li><li>“Diagnostic Command”;</li><li>“unknown GCCause”;</li></ul><h2 id="常见GC触发原因"><a href="#常见GC触发原因" class="headerlink" title="常见GC触发原因"></a>常见GC触发原因</h2><h3 id="System-gc"><a href="#System-gc" class="headerlink" title="System.gc()"></a>System.gc()</h3><p>系统主动调用<br>示例代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 系统主动调用GC</span><br><span class="line"> * -XX:+PrintGC -XX:PrintGCTimeStamps</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void sence4() &#123;</span><br><span class="line">    System.gc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>GC日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.323: [GC (System.gc())  8665K-&gt;1288K(125952K), 0.0040810 secs]</span><br><span class="line">0.327: [Full GC (System.gc())  1288K-&gt;1202K(125952K), 0.0120565 secs]</span><br></pre></td></tr></table></figure></p><p>GC发生原因：System.gc()</p><h3 id="Allocation-Failure"><a href="#Allocation-Failure" class="headerlink" title="Allocation Failure"></a>Allocation Failure</h3><ul><li>Java heap space </li><li>PermGen space </li><li>MetaData Space</li></ul><h4 id="Java-Heap-Space"><a href="#Java-Heap-Space" class="headerlink" title="Java Heap Space"></a>Java Heap Space</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * GC 触发原因：</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * Allocation Failure</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * Java heap space（堆内存不够）</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * -Xmx100m -Xmn100m -XX:+PrintGC -XX:+PrintGCTimeStamps</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void sence5() &#123;</span><br><span class="line">        int _1MB = 1024 * 1024;</span><br><span class="line">        byte[] bigSize = new byte[_1MB * 80];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">0.364: [GC (Allocation Failure)  10853K-&gt;1384K(90112K), 0.0050521 secs]</span><br><span class="line">0.370: [GC (Allocation Failure)  1384K-&gt;1280K(90112K), 0.0028788 secs]</span><br><span class="line">0.372: [Full GC (Allocation Failure)  1280K-&gt;1203K(90112K), 0.0110979 secs]</span><br><span class="line">0.384: [Full GC (Allocation Failure)  1203K-&gt;1141K(90112K), 0.0052807 secs]</span><br><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
            <tag> log </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java几种常量池</title>
      <link href="/2019/05/14/Java%E5%87%A0%E7%A7%8D%E5%B8%B8%E9%87%8F%E6%B1%A0/"/>
      <url>/2019/05/14/Java%E5%87%A0%E7%A7%8D%E5%B8%B8%E9%87%8F%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>在java的内存分配中，经常听到很多关于常量池的描述，我开始看的时候也是看的很模糊，网上五花八门的说法简直太多了，最后查阅各种资料，终于算是差不多理清了，很多网上说法都有问题，笔者尝试着来区分一下这几个概念。</p><h2 id="1-全局字符串池（string-pool也有叫做string-literal-pool）"><a href="#1-全局字符串池（string-pool也有叫做string-literal-pool）" class="headerlink" title="1.全局字符串池（string pool也有叫做string literal pool）"></a>1.全局字符串池（string pool也有叫做string literal pool）</h2><p>全局字符串池里的内容是在类加载完成，经过验证，准备阶段之后在堆中生成字符串对象实例，然后将该字符串对象实例的引用值存到string pool中（记住：string pool中存的是引用值而不是具体的实例对象，具体的实例对象是在堆中开辟的一块空间存放的。）。<br>在HotSpot VM里实现的string pool功能的是一个StringTable类，它是一个哈希表，里面存的是驻留字符串(也就是我们常说的用双引号括起来的)的引用（而不是驻留字符串实例本身），也就是说在堆中的某些字符串实例被这个StringTable引用之后就等同被赋予了”驻留字符串”的身份。这个StringTable在每个HotSpot VM的实例只有一份，被所有的类共享。</p><h2 id="2-class文件常量池（class-constant-pool）"><a href="#2-class文件常量池（class-constant-pool）" class="headerlink" title="2.class文件常量池（class constant pool）"></a>2.class文件常量池（class constant pool）</h2><p>我们都知道，class文件中除了包含类的版本、字段、方法、接口等描述信息外，还有一项信息就是常量池(constant pool table)，用于存放编译器生成的各种字面量(Literal)和符号引用(Symbolic References)。<br>字面量就是我们所说的常量概念，如文本字符串、被声明为final的常量值等。<br>符号引用是一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可（它与直接引用区分一下，直接引用一般是指向方法区的本地指针，相对偏移量或是一个能间接定位到目标的句柄）。一般包括下面三类常量：</p><ul><li>类和接口的全限定名</li><li>字段的名称和描述符</li><li>方法的名称和描述符</li></ul><p>常量池的每一项常量都是一个表，一共有如下表所示的11种各不相同的表结构数据，这每个表开始的第一位都是一个字节的标志位（取值1-12），代表当前这个常量属于哪种常量类型。<br>常量池的项目类型<br><img src="/images/pasted-92.png" alt="upload successful"><br>每种不同类型的常量类型具有不同的结构，具体的结构本文就先不叙述了，本文着重区分这三个常量池的概念（读者若想深入了解每种常量类型的数据结构可以查看《深入理解java虚拟机》第六章的内容）。</p><h2 id="3-运行时常量池（runtime-constant-pool）"><a href="#3-运行时常量池（runtime-constant-pool）" class="headerlink" title="3.运行时常量池（runtime constant pool）"></a>3.运行时常量池（runtime constant pool）</h2><p>当java文件被编译成class文件之后，也就是会生成我上面所说的class常量池，那么运行时常量池又是什么时候产生的呢？</p><p>jvm在执行某个类的时候，必须经过加载、连接、初始化，而连接又包括验证、准备、解析三个阶段。而当类加载到内存中后，jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，运行时常量池也是每个类都有一个。在上面我也说了，class常量池中存的是字面量和符号引用，也就是说他们存的并不是对象的实例，而是对象的符号引用值。而经过解析（resolve）之后，也就是把符号引用替换为直接引用，解析的过程会去查询全局字符串池，也就是我们上面所说的StringTable，以保证运行时常量池所引用的字符串与全局字符串池中所引用的是一致的。</p><p>举个实例来说明一下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String str1 = &quot;abc&quot;;</span><br><span class="line">String str2 = new String(&quot;def&quot;);</span><br><span class="line">String str3 = &quot;abc&quot;;</span><br><span class="line">String str4 = str2.intern();</span><br><span class="line">String str5 = &quot;def&quot;;</span><br><span class="line">System.out.println(str1 == str3);//true</span><br><span class="line">System.out.println(str2 == str4);//false</span><br><span class="line">System.out.println(str4 == str5);//true</span><br></pre></td></tr></table></figure></p><p>上面程序的首先经过编译之后，在该类的class常量池中存放一些符号引用，然后类加载之后，将class常量池中存放的符号引用转存到运行时常量池中，然后经过验证，准备阶段之后，在堆中生成驻留字符串的实例对象（也就是上例中str1所指向的”abc”实例对象），然后将这个对象的引用存到全局String Pool中，也就是StringTable中，最后在解析阶段，要把运行时常量池中的符号引用替换成直接引用，那么就直接查询StringTable，保证StringTable里的引用值与运行时常量池中的引用值一致，大概整个过程就是这样了。</p><p>回到上面的那个程序，现在就很容易解释整个程序的内存分配过程了，首先，在堆中会有一个”abc”实例，全局StringTable中存放着”abc”的一个引用值，然后在运行第二句的时候会生成两个实例，一个是”def”的实例对象，并且StringTable中存储一个”def”的引用值，还有一个是new出来的一个”def”的实例对象，与上面那个是不同的实例，当在解析str3的时候查找StringTable，里面有”abc”的全局驻留字符串引用，所以str3的引用地址与之前的那个已存在的相同，str4是在运行的时候调用intern()函数，返回StringTable中”def”的引用值，如果没有就将str2的引用值添加进去，在这里，StringTable中已经有了”def”的引用值了，所以返回上面在new str2的时候添加到StringTable中的 “def”引用值，最后str5在解析的时候就也是指向存在于StringTable中的”def”的引用值，那么这样一分析之后，下面三个打印的值就容易理解了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>全局常量池在每个VM中只有一份，存放的是字符串常量的引用值。  </li><li>class常量池是在编译的时候每个class都有的，在编译阶段，存放的是常量的符号引用。  </li><li>运行时常量池是在类加载完成之后，将每个class常量池中的符号引用值转存到运行时常量池中，也就是说，每个class都有一个运行时常量池，类在解析之后，将符号引用替换成直接引用，与全局常量池中的引用值保持一致。</li></ol><p>转载：<a href="http://tangxman.github.io/2015/07/27/the-difference-of-java-string-pool/" target="_blank" rel="noopener">http://tangxman.github.io/2015/07/27/the-difference-of-java-string-pool/</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java垃圾收集与内存分配</title>
      <link href="/2019/05/13/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/"/>
      <url>/2019/05/13/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>GC(Garbage Collection),1960年在MIT的Lisp语言。在java中被发扬光大。GC主要控制内存区域是：堆、方法区（元数据空间）。GC主要完成的3件事情：</p><ul><li>哪些内存需要回收？（Who）</li><li>什么时候回收？（When）</li><li>如何回收？（How）   </li></ul><p>学习目的，对GC的监控和调节。</p><h2 id="确定需要回收对象"><a href="#确定需要回收对象" class="headerlink" title="确定需要回收对象"></a>确定需要回收对象</h2><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><p>每个对象都有一个引用计数器，为0时回收。</p><ul><li>逻辑简单清晰</li><li>循环引用无法回收</li></ul><p>循环引用示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class ReferenceObj &#123;</span><br><span class="line">    public Object ref = null;</span><br><span class="line">    static final int _1MB = 1024 * 1024;</span><br><span class="line">    private byte[] bigSize = new byte[10 * _1MB];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line">public void sence1() &#123;</span><br><span class="line">        ReferenceObj one = new ReferenceObj();</span><br><span class="line">        ReferenceObj two = new ReferenceObj();</span><br><span class="line">        one.ref = two;</span><br><span class="line">        two.ref = one;</span><br><span class="line">        one = null;</span><br><span class="line">        two = null;</span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">//[GC (System.gc())  28413K-&gt;21768K(62976K), 0.0033033 secs]</span><br><span class="line">//[Full GC (System.gc())  21768K-&gt;1192K(62976K), 0.0085810 secs]</span><br></pre></td></tr></table></figure></p><p>循环引用对象也被回收了。这说明当前虚拟机并不是通过 引用计数算法来判断对象是否可回收的。</p><h3 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h3><p>猪油语言Java，C#,Lisp 都是通过可达性分析（Reachability Analysis）来判断对象是否存货的。算法基本思路是通过一系列的成为GC Roots的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots 没有任何引用链相连时，则证明此对象是不可用的。<br><img src="/images/pasted-90.png" alt="upload successful"></p><p>可以作为GC Roots的对象包含如下：</p><ul><li>虚拟机栈 （栈帧中的本地变量表）中引用对象。</li><li>方法区中静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI（即Native方法）引用对象</li></ul><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>JDK1.2之前引用有两种状态：被引用 or 没有被引用。JDK1.2之后引入了：</p><ul><li>强引用（Strong Reference）</li><li>软引用（Soft Reference）</li><li>弱引用（Weak Reference）</li><li>虚引用（Phantom Reference）</li></ul><p>这四种引用强度依次减弱。</p><h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h4><pre><code>Object obj=new Object();</code></pre><p>obj 就是强引用，只要强引用存在 就不会回收。</p><h4 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h4><pre><code>SoftReference&lt;ReferenceObj&gt; softRef = new SoftReference(new ReferenceObj(&quot;softRef&quot;));</code></pre><p>抛出异常前回收</p><h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h4><pre><code>WeakReference&lt;ReferenceObj&gt; weakRef = new WeakReference(new ReferenceObj(&quot;weakRef&quot;));</code></pre><p>下次垃圾回收执行时回收</p><h4 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h4><pre><code>PhantomReference&lt;ReferenceObj&gt; phantomRef = new PhantomReference(new ReferenceObj(&quot;phantomRef&quot;), new ReferenceQueue());</code></pre><p>下次垃圾回收执行时回收，永远无法获取到被引用对象。理论上可以通过虚引用+ finalize 获取gc执行情况。</p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 强引用、软引用、弱引用、虚引用 测试</span><br><span class="line">    * &lt;p&gt;</span><br><span class="line">    * 强引用：引用存在，永远不会回收。</span><br><span class="line">    * &lt;p&gt;</span><br><span class="line">    * 软引用：抛出异常前回收。</span><br><span class="line">    * &lt;p&gt;</span><br><span class="line">    * 弱引用：下次垃圾回收时回收。</span><br><span class="line">    * &lt;p&gt;</span><br><span class="line">    * 虚引用：下次垃圾回收时回收，永远无法获取被引用对象。</span><br><span class="line">    */</span><br><span class="line">   @Test</span><br><span class="line">   public void sence2() &#123;</span><br><span class="line"></span><br><span class="line">       ReferenceObj strongRef = new ReferenceObj(&quot;strongRef&quot;);</span><br><span class="line">       SoftReference&lt;ReferenceObj&gt; softRef = new SoftReference(new ReferenceObj(&quot;softRef&quot;));</span><br><span class="line">       WeakReference&lt;ReferenceObj&gt; weakRef = new WeakReference(new ReferenceObj(&quot;weakRef&quot;));</span><br><span class="line">       PhantomReference&lt;ReferenceObj&gt; phantomRef = new PhantomReference(new ReferenceObj(&quot;phantomRef&quot;), new ReferenceQueue());</span><br><span class="line">       System.out.println(&quot;strongRef : &quot; + strongRef);</span><br><span class="line">       System.out.println(&quot;softRef : &quot; + softRef.get());</span><br><span class="line">       System.out.println(&quot;weakRef : &quot; + weakRef.get());</span><br><span class="line">       System.out.println(&quot;phantomRef : &quot; + phantomRef.get());</span><br><span class="line">       System.out.println(&quot;=====================GC======================&quot;);</span><br><span class="line">       System.gc();</span><br><span class="line">       System.out.println(&quot;strongRef : &quot; + strongRef);</span><br><span class="line">       System.out.println(&quot;softRef : &quot; + softRef.get());</span><br><span class="line">       System.out.println(&quot;weakRef : &quot; + weakRef.get());</span><br><span class="line">       System.out.println(&quot;phantomRef : &quot; + phantomRef.get());</span><br><span class="line">       System.out.println(&quot;=====================Alloc(40M)======================&quot;);</span><br><span class="line">       byte[] bs = new byte[1024 * 1024 * 40];</span><br><span class="line">       System.out.println(&quot;strongRef : &quot; + strongRef);</span><br><span class="line">       System.out.println(&quot;softRef : &quot; + softRef.get());</span><br><span class="line">       System.out.println(&quot;weakRef : &quot; + weakRef.get());</span><br><span class="line">       System.out.println(&quot;phantomRef : &quot; + phantomRef.get());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">strongRef : com.hardydou.jmm.ReferenceObj@694f9431</span><br><span class="line">softRef : com.hardydou.jmm.ReferenceObj@f2a0b8e</span><br><span class="line">weakRef : com.hardydou.jmm.ReferenceObj@593634ad</span><br><span class="line">phantomRef : null</span><br><span class="line">=====================GC======================</span><br><span class="line">0.337: [GC (System.gc()) [PSYoungGen: 11990K-&gt;2368K(18944K)] 11990K-&gt;5448K(62976K), 0.0045934 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] </span><br><span class="line">0.342: [Full GC (System.gc()) [PSYoungGen: 2368K-&gt;0K(18944K)] [ParOldGen: 3080K-&gt;5298K(44032K)] 5448K-&gt;5298K(62976K), [Metaspace: 5049K-&gt;5049K(1056768K)], 0.0075451 secs] [Times: user=0.02 sys=0.00, real=0.00 secs] </span><br><span class="line">strongRef : com.hardydou.jmm.ReferenceObj@694f9431</span><br><span class="line">[ com.hardydou.jmm.ReferenceObj@593634ad ] weakRef run  finalize </span><br><span class="line">[ com.hardydou.jmm.ReferenceObj@11adfb87 ] phantomRef run  finalize </span><br><span class="line">softRef : com.hardydou.jmm.ReferenceObj@f2a0b8e</span><br><span class="line">weakRef : null</span><br><span class="line">phantomRef : null</span><br><span class="line">=====================Alloc(40M)======================</span><br><span class="line">0.351: [GC (Allocation Failure) [PSYoungGen: 641K-&gt;32K(18944K)] 5940K-&gt;5330K(62976K), 0.0010440 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] </span><br><span class="line">0.352: [GC (Allocation Failure) [PSYoungGen: 32K-&gt;32K(18944K)] 5330K-&gt;5330K(62976K), 0.0009079 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">0.353: [Full GC (Allocation Failure) [PSYoungGen: 32K-&gt;0K(18944K)] [ParOldGen: 5298K-&gt;3907K(32256K)] 5330K-&gt;3907K(51200K), [Metaspace: 5052K-&gt;5052K(1056768K)], 0.0064555 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] </span><br><span class="line">0.360: [GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(18944K)] 3907K-&gt;3907K(62976K), 0.0003754 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">0.360: [Full GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(18944K)] [ParOldGen: 3907K-&gt;3845K(44032K)] 3907K-&gt;3845K(62976K), [Metaspace: 5052K-&gt;5049K(1056768K)], 0.0078142 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] </span><br><span class="line">[ com.hardydou.jmm.ReferenceObj@f2a0b8e ] softRef run  finalize </span><br><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 18944K, used 1127K [0x00000007beb00000, 0x00000007c0000000, 0x00000007c0000000)</span><br><span class="line">  eden space 16384K, 6% used [0x00000007beb00000,0x00000007bec19cb0,0x00000007bfb00000)</span><br><span class="line">  from space 2560K, 0% used [0x00000007bfd80000,0x00000007bfd80000,0x00000007c0000000)</span><br><span class="line">  to   space 2560K, 0% used [0x00000007bfb00000,0x00000007bfb00000,0x00000007bfd80000)</span><br><span class="line"> ParOldGen       total 44032K, used 3845K [0x00000007bc000000, 0x00000007beb00000, 0x00000007beb00000)</span><br><span class="line">  object space 44032K, 8% used [0x00000007bc000000,0x00000007bc3c14d8,0x00000007beb00000)</span><br><span class="line"> Metaspace       used 5130K, capacity 5184K, committed 5248K, reserved 1056768K</span><br><span class="line">  class space    used 601K, capacity 624K, committed 640K, reserved 1048576K</span><br><span class="line"></span><br><span class="line">Process finished with exit code 255</span><br></pre></td></tr></table></figure></p><h3 id="非生即死吗？"><a href="#非生即死吗？" class="headerlink" title="非生即死吗？"></a>非生即死吗？</h3><p>在可达性分析算法中不可达的对象并非是”非生即死“，还有“缓刑”阶段。一个对象至少要经过两次标记过程.<br><img src="/images/pasted-91.png" alt="upload successful"><br>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">class FinalizeEscapeGC &#123;</span><br><span class="line">    public void isAlive() &#123;</span><br><span class="line">        System.out.println(&quot;yes i am still alive !&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void finalize() throws Throwable &#123;</span><br><span class="line">        GCTest.HOOK = this;</span><br><span class="line">        System.out.println(&quot;FinalizeEscapeGC.finalize&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  public static FinalizeEscapeGC HOOK = null;</span><br><span class="line">/**</span><br><span class="line">     * 1、对象可以再被GC市进行自我拯救</span><br><span class="line">     * 2、自我拯救机会只有1次，因为一个对象finalize()方法最多只会被执行1次。</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void sence3() throws Exception &#123;</span><br><span class="line">        HOOK = new FinalizeEscapeGC();</span><br><span class="line">        HOOK = null;</span><br><span class="line">        System.gc();</span><br><span class="line">        Thread.sleep(500L);</span><br><span class="line">        if (HOOK != null) &#123;</span><br><span class="line">            HOOK.isAlive();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;no, i am dead !&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;=======second========&quot;);</span><br><span class="line">        HOOK = null;</span><br><span class="line">        System.gc();</span><br><span class="line">        Thread.sleep(500L);</span><br><span class="line">        if (HOOK != null) &#123;</span><br><span class="line">            HOOK.isAlive();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            System.out.println(&quot;no, i am dead !&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0.344: [GC (System.gc()) [PSYoungGen: 7891K-&gt;1312K(18944K)] 7891K-&gt;1320K(62976K), 0.0020721 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">0.346: [Full GC (System.gc()) [PSYoungGen: 1312K-&gt;0K(18944K)] [ParOldGen: 8K-&gt;1201K(44032K)] 1320K-&gt;1201K(62976K), [Metaspace: 5060K-&gt;5060K(1056768K)], 0.0106312 secs] [Times: user=0.02 sys=0.01, real=0.01 secs] </span><br><span class="line">FinalizeEscapeGC.finalize</span><br><span class="line">yes i am still alive !</span><br><span class="line">=======second========</span><br><span class="line">0.866: [GC (System.gc()) [PSYoungGen: 655K-&gt;32K(18944K)] 1857K-&gt;1233K(62976K), 0.0011709 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] </span><br><span class="line">0.867: [Full GC (System.gc()) [PSYoungGen: 32K-&gt;0K(18944K)] [ParOldGen: 1201K-&gt;834K(44032K)] 1233K-&gt;834K(62976K), [Metaspace: 5063K-&gt;5063K(1056768K)], 0.0195988 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] </span><br><span class="line">no, i am dead !</span><br></pre></td></tr></table></figure></p><h3 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h3><p>主要回收：废弃常量，无用的类。</p><h4 id="方法区有哪些数据"><a href="#方法区有哪些数据" class="headerlink" title="方法区有哪些数据"></a>方法区有哪些数据</h4><ul><li>已加载类信息</li><li>类型常量池</li><li>域(Field)信息 </li><li>方法(Method)信息</li><li>所有静态(static)变量（不包含常量）</li></ul><p>详情可以看   <a href="/2019/05/14/Java几种常量池/">Java几种常量池</a></p><h4 id="找到废弃变量"><a href="#找到废弃变量" class="headerlink" title="找到废弃变量"></a>找到废弃变量</h4><p>这个比较简单，变量不存在引用就可以直接回收。(待细细挖掘)</p><h4 id="找到无用类"><a href="#找到无用类" class="headerlink" title="找到无用类"></a>找到无用类</h4><p>这个比较复杂，需要满足三个条件：</p><ul><li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例。</li><li>加载该类的ClassLoader已经被回收</li><li>该类对应的java.lang.Class 对象没有任何地方引用，无法再任何地方通过反射访问该类的方法。</li></ul><p>虚拟机可以对满足以上3个条件的无用类进行回收，并不是一定会回收。HotSpot虚拟机可以通过 -Xnoclassgc 参数控制，通过-verbose:class 以及 -XX:TraceClassLoading、-XX:TraceClassUnLoading（需要FasetDebug版本的虚拟机支持） 查看类加载卸载信息。</p><h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><p>不同虚拟机平台操作内存方法不同，GC算法也不相同。以下是几种典型的思想。</p><h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>标记-清除（Mark-Sweep）这是最基本的算法，先标记需要清理的垃圾，再对已经标记的垃圾进行回收。此方法不足：</p><ul><li>效率低</li><li>大量内存碎片</li></ul><p>其它算法都是基于对此算法缺点优化所诞生的。<br><img src="/images/pasted-93.png" alt="upload successful"></p><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><p>将空间分成A、B两等分。同一时间只启用一块空间，当A空间满了，就将存活对象复制到B空间，同时A空间全部销毁。B空间满的时候再将存活对象复制到A空间….如此循环。次算法解决了 内存碎片问题、同时效率也得到了提升。但带来新的缺点：</p><ul><li>内存使用率低</li><li>对象存活率高时，大量复制导致效率变低；</li></ul><p>复制算法-图示：<br><img src="/images/pasted-94.png" alt="upload successful"></p><p>实际使用情况：</p><ul><li>基点：98%对象都是朝生夕死。下面所提到使用都是基点成立时最佳。</li><li>所有商业虚拟机都在新生代采用复制算法作为垃圾回收算法。</li><li>非1：1分配，一块较大的Eden、两块较小Survivor空间。每次使用Eden+一块Survivor，回收时将Eden、Survivor中存活对象复制到另一块 Survivor，然后清理掉Eden与Survivor。当 Survivor内存不够时需要借用老年代内存进行分配担保（Handle Promotion）。</li><li>默认情况下 HotSpot虚拟机，Eden：Survivor(8:1)，也就是说默认情况浪费10%的内存</li></ul><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>根据老年代特点所提出 标记-整理（Mark-Compact)算法，标记阶段与 标记-清除一样，只不过清除阶段不是直接回收，而是向一端移动，然后清理掉边界以外内存。</p><p><img src="/images/pasted-95.png" alt="upload successful"></p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>当前商业虚拟机的垃圾收集都有采用”分代收集”（Generational Collection）算法，这种算法并非新思路。而是根据对象存活周期的不同将内存划分为几块。一般是把Java堆划分为新生代，老年代。然后根据各个年代的特点采用最适合的收集算法。</p><h2 id="HotSpot-算法实现"><a href="#HotSpot-算法实现" class="headerlink" title="HotSpot 算法实现"></a>HotSpot 算法实现</h2><h3 id="枚举根节点"><a href="#枚举根节点" class="headerlink" title="枚举根节点"></a>枚举根节点</h3><p>可作为GC Roots的节点主要在全局性的引用（常量、类静态属性）与上下文（栈帧中的本地变量）中。GC停顿：gc执行时所有Java执行线程必须停顿（Stop The World）。即时在号称（几乎）不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的。<br>准确式GC：Jvm知道内存中某个位置数据是什么类型，不用扫描就可以快速找到对象引用的位置。</p><h3 id="安全点"><a href="#安全点" class="headerlink" title="安全点"></a>安全点</h3><p>在OopMap协助下可以快速枚举出根节点。但如果每条指令都操作OopMap 将会占用大量空间，因此 jvm只在一些特定的位置操作OopMap，这些位置就是安全点（SafePoint）。如何确保所有线程都是在安全点停顿呢？</p><ul><li>抢先式中断(Preemptive Suspension)<br>GC发生时，所有线程先中断。再检查中断线程是否在安全点，不在再激活让他跑到安全点上。所有虚拟机不再使用这个方法。</li><li>主动式中断（Voluntary Suspension)<br>当GC要中断线程时，不直接对线程进行操作，设置一个标识，所有线程去轮询标识，发现中断标识就自行挂起。轮询标志的地方和安全点是重合的。</li></ul><h3 id="安全区域"><a href="#安全区域" class="headerlink" title="安全区域"></a>安全区域</h3><p>使用SafePoint 解决了如何进入GC的问题，但实际情况并不一定。假如某些程序一直处于sleep或者Blocked状态，这样就无法进入安全点挂起，该如何处理。这就需要安全区（Safe Region）来解决。<br>安全区是指一段代码片段中，引用关系不会发生变化。在这个区域中的任意地方开始GC都是安全的。也可以吧Safe Region 看做是被扩展的Safepoint。<br>在线程执行到Safe Region中的代码时，首先标识自己进入Safe Region，那样当这段时间JVM发起GC时，就不用管标识自己Safe Region状态的线程了。在线程要离开Safe Region时，要检查系统是否已经完成了根节点枚举（或者GC过程），如果完成了那线程就继续执行，否则就必须等待直到可以安全离开SafeRegion的信号为止。</p><p>还有一种情况是，既不在SafeRegion 又处于 sleep 或者Blocked 的线程 存在时 怎么处理呢？放弃GC？</p><h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><p>垃圾回收算法是方法论，垃圾收集器是具体实现。<br>HotSpot虚拟机垃圾收集器图示：<br><img src="/images/pasted-96.png" alt="upload successful"><br>上图涵盖7中作用于不同分代的收集器，连线的收集器可以搭配使用。重点在CMS、G1这两个收集器。</p><h3 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h3><p>最基本、最悠久收集器，曾经（dk1.3.1之前）是新生代唯一选择。单线程的收集器（Stop The World），执行它必须停止所有线程。<br>图示：<br><img src="/images/pasted-97.png" alt="upload successful"><br>Stop The World 体验非常差劲，从JDK1.3开始，一直到现在的Jdk1.8 ,HotSpot虚拟机团队为消除或者减少工作线程因为内存回收而导致停顿的努力一直在进行着。从Serial收集器——&gt;Paraller收集器——&gt;Concurrent Mark Sweep（CMS）——&gt;最前沿的G1收集器，越来越复杂，停顿不断再缩短，但还没有办法完全消除。</p><p>Serial收集器特点以及应用：</p><ul><li>简单高效</li><li>Client模式下很好选择</li></ul><h3 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h3><p>Serial收集器多线程版本，除了多线程外其余（例如：-XX:SurvivorRation-XX:pretenureSizeThread-XX:HandlePromotionFailure 等）、收集算法、Stop The World 、对象分配规则、回收策略都与Serial完全一样。<br><img src="/images/pasted-98.png" alt="upload successful"></p><p>ParNew收集器特点及应用：</p><ul><li>Server模式下新生代首选</li><li>唯一一个可以与CMS（Jdk1.5推出、划时代意义）收集器配合使用的。</li><li>单Cpu中 ParNew收集器 ≤ Serial收集器，</li><li>通过-XX:ParallelGCThreads 参数限制垃圾收集线程数</li></ul><h3 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h3><p>不同于其他收集器（CMS关注停顿时间）ParallelScavenge 关注吞吐量，吞吐量=运行用户代码时间/（运行用户代码时间+垃圾收集时间），例如虚拟机总运行100分钟，其中垃圾回收划掉1分钟，那么吞吐量=99%</p><h3 id="Serial-Old-收集器"><a href="#Serial-Old-收集器" class="headerlink" title="Serial Old 收集器"></a>Serial Old 收集器</h3><p>SerialOld是Serial收集器的老年代版本，单线程、标记整理算法。client模式下使用、jdk1.5及以前版本与ParallelScavenge 搭配使用、作为CMS后备预案（在并发收集发生Concurrent Mode Failure时使用）<br><img src="/images/pasted-99.png" alt="upload successful"></p><h3 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a>Parallel Old 收集器</h3><p>Parallel Old 是Parallel Scavenge收集器的老年代版本，多线程、标记整理算法。Jdk1.6中开始使用，在此之前ParallelScanvenge比较尴尬（只可以与SerialOld【性能很差】搭配使用）。<br><img src="/images/pasted-100.png" alt="Parallel Old 收集器"></p><h3 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h3><p>Concurrent Mark Sweep 收集器是一种以获取最短回收停顿时间为目的的收集器。标记-清除 算法，过程分为4步：</p><ul><li>初始标记（CMS initial mark）、stop the word</li><li>并发标记（CMS concurrent mark）</li><li>重新标记（CMS remark）、stop the word</li><li>并发清除（CMS concurrent sweep）</li></ul><p><img src="/images/pasted-101.png" alt="CMS收集器"></p><ul><li>CMS默认启动回收线程数（CPU数量+3)/4,</li><li>CMS无法处理浮动垃圾（Floating Garbage），CMS并发清理时，用户线程会产生新的垃圾，这些垃圾被称为浮动垃圾。</li><li>CMS可能出现Concurrent Mode Failure 而导致另一次Full GC</li><li>CMS运行期间预留内存无法满足程序需求，就会出现“Concurrent Mode Failure”，此时虚拟机会启动后备预案（SerialOld收集器）<br>-XX:CMSInitiatingOccupancyFraction（老年代使用比例，触发老年代GC，太低会GC频繁，太高会引起CMF问题）</li><li>使用标记-清除算法会导致空间碎片。CMS提供一个-XX:+UseCMSCompactAtFullCollection 开关参数（默认开启）用于FullGC时开启内存碎片合并整理，-XX:CMSFullGCsBeforeCompaction,这个参数用于设置执行多少次不压缩FullGC后跟着执行一次压缩（默认为0）。</li></ul><h3 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h3><p>G1(Garbage-First)收集器，先进、Jdk6u4开始试用，Jdk7u4 转正。</p><ul><li>并行与并发：充分利用多cpu、多核，缩短STW停顿时间、与java线程并发执行。</li><li>分代收集：根据对象年龄（新创建、存活一段时间、熬过多次gc）进行区分管理。</li><li>空间整合：整体来看是 标记-整理算法，局部两个Region之间是复制算法。</li><li>可预测的停顿：建立可以预测的停顿时间模型。</li></ul><p>G1堆内存划分为大小相等的region，保留新生、老年代概念，将region与新、老代关联。每个region 里面设置一个RememberedSet记录Ref信息。<br>不计算维护RememberedSet的步骤，G1操作步骤分为：</p><ul><li>初始标记（Initial Marking）</li><li>并发标记（Concurrent Marking）</li><li>最终标记（Final Marking）</li><li>筛选回收（Live Data Counting And Evacauation）</li></ul><p><img src="/images/pasted-102.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java泛型</title>
      <link href="/2019/05/11/java%E6%B3%9B%E5%9E%8B/"/>
      <url>/2019/05/11/java%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><ul><li>伪泛型</li><li>针对引用的检查</li><li>类型擦除</li><li>协变</li><li>多态的冲突</li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>java泛型是伪泛型，java文件编译时会进行类型擦除这样生成的class文件不再包含任何泛型信息。<br>泛型价值：增加约束，让代码优雅（无需显式的类型转化）。</p><h2 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">abstract class Math&lt;T&gt; &#123;</span><br><span class="line">    abstract T max(T t1, T t2);</span><br><span class="line">&#125;</span><br><span class="line">-----字节码------</span><br><span class="line">abstract max(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class="line"></span><br><span class="line">abstract class Math2&lt;T extends Number&gt; &#123;</span><br><span class="line">    abstract T max(T t1, T t2);</span><br><span class="line">&#125;</span><br><span class="line">------字节码-----</span><br><span class="line">abstract max(Ljava/lang/Number;Ljava/lang/Number;)Ljava/lang/Number;</span><br></pre></td></tr></table></figure><p> Object 或者 Number 就是T 的原始类型。这是类型擦除的基础思路，也由此产生了多态冲突问题。</p><h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h2><p>文字描述比较枯燥难懂，以下通过3个示例来介绍，类型擦除、针对引用有效、为什么叫做 伪泛型。</p><p>示例1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 携带泛型的对象对应字节码完全一致。</span><br><span class="line">   List&lt;String&gt; strList = new ArrayList&lt;String&gt;();</span><br><span class="line">   List intList = new ArrayList();</span><br><span class="line">---------字节码------------</span><br><span class="line">   NEW java/util/ArrayList</span><br><span class="line">   DUP</span><br><span class="line">   INVOKESPECIAL java/util/ArrayList.&lt;init&gt; ()V</span><br><span class="line">   ASTORE 1</span><br><span class="line">   NEW java/util/ArrayList</span><br><span class="line">   DUP</span><br><span class="line">   INVOKESPECIAL java/util/ArrayList.&lt;init&gt; ()V</span><br><span class="line">   ASTORE 2</span><br></pre></td></tr></table></figure></p><p>示例2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> /**</span><br><span class="line"> * 约定泛型的list，可以通过反射成功添加 int类型数据进去，通过反射可以正常读取，直接读取时会提示类型转化异常。</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void typeErasure() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        List&lt;String&gt; strList = new ArrayList();</span><br><span class="line">        strList.getClass().getMethod(&quot;add&quot;, Object.class).invoke(strList, 123);</span><br><span class="line">        System.out.println(&quot;strList&apos;size :&quot; + strList.size());</span><br><span class="line">        System.out.println(strList.getClass().getMethod(&quot;get&quot;, int.class).invoke(strList, 0));</span><br><span class="line">        System.out.println(strList.get(Integer.valueOf(0)));</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">泛型针对引用有效。</span><br><span class="line">List&lt;String&gt; strList1 = new ArrayList();//有效果（阿里巴巴规范也提倡这么写）</span><br><span class="line">List&lt;String&gt; strList2 = new ArrayList&lt;String&gt;();//效果同上面</span><br><span class="line">List strList3 = new ArrayList&lt;String&gt;();//无效果</span><br></pre></td></tr></table></figure></p><p>由于 泛型仅仅生存到编译时期，所以称之为 伪泛型。</p><h2 id="多态的冲突"><a href="#多态的冲突" class="headerlink" title="多态的冲突"></a>多态的冲突</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">abstract class Math&lt;T&gt; &#123;</span><br><span class="line">    abstract T max(T t1, T t2);</span><br><span class="line">&#125;</span><br><span class="line">-------二进制码---------</span><br><span class="line">abstract max(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class="line"></span><br><span class="line">class IntMath extends Math&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    Integer max(Integer t1, Integer t2) &#123;</span><br><span class="line">        return java.lang.Math.max(t1, t2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------二进制码--------</span><br><span class="line">max(Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Integer;</span><br><span class="line">synthetic bridge max(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;</span><br><span class="line">   L0</span><br><span class="line">    LINENUMBER 28 L0</span><br><span class="line">    ALOAD 0</span><br><span class="line">    ALOAD 1</span><br><span class="line">    CHECKCAST java/lang/Integer</span><br><span class="line">    ALOAD 2</span><br><span class="line">    CHECKCAST java/lang/Integer</span><br><span class="line">    INVOKEVIRTUAL com/hardydou/jmm/IntMath.max (Ljava/lang/Integer;Ljava/lang/Integer;)Ljava/lang/Integer;</span><br><span class="line">    ARETURN</span><br></pre></td></tr></table></figure><p>泛型子类重写不是简单的重写，而是重载+重写</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="基本类型不可以作为泛型"><a href="#基本类型不可以作为泛型" class="headerlink" title="基本类型不可以作为泛型"></a>基本类型不可以作为泛型</h3><pre><code>List&lt;int&gt; list;//编译不通过</code></pre><h3 id="泛型不可以被实例化"><a href="#泛型不可以被实例化" class="headerlink" title="泛型不可以被实例化"></a>泛型不可以被实例化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class A&lt;T&gt; &#123;</span><br><span class="line">    T t=new T();//不可以被直接实例化</span><br><span class="line">    .......</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="泛型使用instanceOf"><a href="#泛型使用instanceOf" class="headerlink" title="泛型使用instanceOf"></a>泛型使用instanceOf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list1 = new ArrayList&lt;&gt;();</span><br><span class="line">//可以</span><br><span class="line">boolean s1 = (list1 instanceof ArrayList&lt;?&gt;);</span><br><span class="line">boolean s3 = (list1 instanceof ArrayList);</span><br><span class="line">//编译报错</span><br><span class="line">boolean s2 = (list1 instanceof ArrayList&lt;String&gt;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java内存结构</title>
      <link href="/2019/05/09/Java%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/"/>
      <url>/2019/05/09/Java%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="Java内存结构图"><a href="#Java内存结构图" class="headerlink" title="Java内存结构图"></a>Java内存结构图</h2><p><img src="/images/pasted-80.png" alt="upload successful"></p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>程序计数器（Program Counter Register）是一块很小的内存空间，它可以看做是当前线程所执行的字节码的行号指示器（仅是在概念模型，各种虚拟机有可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器。</p><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul><li>线程隔离，线程间互不影响。</li><li>唯一没有规定OutOfMemoryError内存区域。</li></ul><h2 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p>与程序计数器一样，Java虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，生命周期与线程相同。虚拟机栈描述的是Java方法执行的 <a href="/2019/03/05/Java内存模型（JMM）/">内存模型</a>:每个方法在执行的同时都会创建一个栈帧（Stack Frame) 用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中的入栈到出栈的过程。  </p><p><em>编译程序代码的时候，就已经确定了局部变量表和操作数栈的大小，而且在方法表的Code属性中写好了。不会受到运行期数据的影响。</em></p><p><img src="/images/pasted-83.png" alt="upload successful"></p><h3 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h3><p>是一片逻辑连续的内存空间，最小单位是Slot，用来存放方法参数和方法内部定义的局部变量。    </p><h4 id="Slot"><a href="#Slot" class="headerlink" title="Slot"></a>Slot</h4><p>虚拟机没有明确指明一个Slot的内存空间大小。但是boolean、byte、char、short、int、float、reference、returnAddress类型的数据都可以用32位空间或更小的内存来存放。这些类型占用一个Slot。Java中的long和double类型是64位，占用两个Slot。（只有double和long是jvms里明确规定的64位数据类型）</p><h4 id="虚拟机如何调用"><a href="#虚拟机如何调用" class="headerlink" title="虚拟机如何调用"></a>虚拟机如何调用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">table = Solat[];</span><br><span class="line">table[0] = this;</span><br><span class="line">table[1……n-1];//对应参数1，参数2…… 参数n</span><br></pre></td></tr></table></figure><h4 id="Solt复用对GC的影响"><a href="#Solt复用对GC的影响" class="headerlink" title="Solt复用对GC的影响"></a>Solt复用对GC的影响</h4><p>idea 启动gc调试<br><img src="/images/pasted-84.png" alt="upload successful"><br>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">package com.hardydou.jmm;</span><br><span class="line"></span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">public class SoltGcTest &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 内存不会回收</span><br><span class="line">     * [Full GC (System.gc())  66856K-&gt;66732K(98304K), 0.0117163 secs]</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void scenes1() &#123;</span><br><span class="line">        byte[] bs = placeHolder(64);</span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * bs 作用域结束，内存还不回收</span><br><span class="line">     * [Full GC (System.gc())  66373K-&gt;66371K(98304K), 0.0135849 secs]</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void scenes2() &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            byte[] bs = placeHolder(64);</span><br><span class="line">        &#125;</span><br><span class="line">        System.gc();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * Solt 重用，内存回收</span><br><span class="line">     * [Full GC (System.gc())  66560K-&gt;835K(98304K), 0.0067793 secs]</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void scenes3() &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            byte[] bs = placeHolder(64);</span><br><span class="line">        &#125;</span><br><span class="line">        int a = 0;</span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * 及时回收</span><br><span class="line">     * &lt;p&gt;</span><br><span class="line">     * [Full GC (System.gc())  66435K-&gt;835K(98304K), 0.0108251 secs]</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void scenes4() &#123;</span><br><span class="line">        &#123;</span><br><span class="line">            byte[] bs = placeHolder(64);</span><br><span class="line">            bs = null;</span><br><span class="line">        &#125;</span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">    public static byte[] placeHolder(int n) &#123;</span><br><span class="line">        System.out.println(&quot;SoltGcTest.placeHolder allocation mem : &quot; + n + &quot;m&quot;);</span><br><span class="line">        byte[] placeholder = new byte[n * 1024 * 1024];</span><br><span class="line">        System.out.println(&quot;SoltGcTest.placeHolder allocation Success &quot;);</span><br><span class="line">        return placeholder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="操作栈"><a href="#操作栈" class="headerlink" title="操作栈"></a>操作栈</h3><p>操作栈又称为操作数栈，是后进先出栈。编译时确定</p><pre><code>MAXSTACK = 2</code></pre><h4 id="字节码指令"><a href="#字节码指令" class="headerlink" title="字节码指令"></a>字节码指令</h4><h4 id="局部变量必须赋值"><a href="#局部变量必须赋值" class="headerlink" title="局部变量必须赋值"></a>局部变量必须赋值</h4><p>不同于类变量存在准备阶段。类变量有两次赋初始值的过程：</p><ol><li>准备阶段，赋予系统初始值；</li><li>初始化阶段，赋予程序员定义的初始值；   </li></ol><p>因此类变量及时在初始化阶段程序员未赋值，也不会影响使用。但是局部变量没有赋值是不可以使用的。<br><img src="/images/pasted-85.png" alt="upload successful"></p><h4 id="栈帧重叠"><a href="#栈帧重叠" class="headerlink" title="栈帧重叠"></a>栈帧重叠</h4><p>在概念模型中，两个栈帧作为虚拟机的元素，是完全相互独立的。但是大多虚拟机的实现里都会做一些优化处理，另两个栈帧出现重叠区域。方便共享数据避免额外数据复制传递。<br><img src="/images/pasted-87.png" alt="upload successful"></p><h3 id="动态链接"><a href="#动态链接" class="headerlink" title="动态链接"></a>动态链接</h3><p>每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用。持有这个引用是为了支持方法调用过程中的动态链接(Dynamic Linking)。  </p><p>静态解析：类加载阶段或者第一次使用的时候就转化为直接引用。<br>动态链接：每一次运行期间转化为直接引用。</p><h4 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h4><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><p>编译期间就完全确定，在类装载解析阶段就会把涉及到的符号引用转换为可以确定的直接引用。</p><h6 id="字节码指令-1"><a href="#字节码指令-1" class="headerlink" title="字节码指令"></a>字节码指令</h6><ul><li>invokestatic 调用的方法</li><li>invokespecial 调用的方法</li><li>invokevirtual 调用 被 final 修饰的 方法</li></ul><h6 id="静态解析示例"><a href="#静态解析示例" class="headerlink" title="静态解析示例"></a>静态解析示例</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void say() &#123;</span><br><span class="line">    System.out.println(&quot; Hello word !&quot;);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 方法调用-解析-静态解析</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * INVOKESTATIC com/hardydou/jmm/DynamicLink.say ()V</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void scene3() &#123;</span><br><span class="line">    DynamicLink.say();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分派"><a href="#分派" class="headerlink" title="分派"></a>分派</h5><p>面向对象基本特征：继承、封装、多态。分派会解释多态特征，如”重载“、”重写“在虚拟机中是如何实现的。<br>虚拟机是如何找到正确的目标方法的。</p><h6 id="字节码指令-2"><a href="#字节码指令-2" class="headerlink" title="字节码指令"></a>字节码指令</h6><ul><li>invokevirtual </li></ul><h6 id="静态分派示例-重载"><a href="#静态分派示例-重载" class="headerlink" title="静态分派示例-重载"></a>静态分派示例-重载</h6><p>编译期间就完全确定，在类装载解析阶段就会把涉及到的符号引用转换为可以确定的直接引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">static abstract class Human &#123;&#125;</span><br><span class="line">   static class Man extends Human &#123;&#125;</span><br><span class="line">   static class Woman extends Human &#123;&#125;</span><br><span class="line"></span><br><span class="line">   public void say(Human human) &#123;</span><br><span class="line">       System.out.println(&quot;Hello guy !&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void say(Man man) &#123;</span><br><span class="line">       System.out.println(&quot;Hello man !&quot;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   public void say(Woman woman) &#123;</span><br><span class="line">       System.out.println(&quot;Hello woman !&quot;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">    * 方法调用-分派-静态分派示例1</span><br><span class="line">    * 代码编译期间就完全确定，</span><br><span class="line">    * 在类装载的解析阶段就会把设计的符号引用全部转变为可确定的直接引用</span><br><span class="line">    * 父类型引用子类型</span><br><span class="line">    * INVOKEVIRTUAL com/hardydou/jmm/DynamicLink.say (Lcom/hardydou/jmm/DynamicLink$Human;)V</span><br><span class="line">    * INVOKEVIRTUAL com/hardydou/jmm/DynamicLink.say (Lcom/hardydou/jmm/DynamicLink$Human;)V</span><br><span class="line">    */</span><br><span class="line">   @Test</span><br><span class="line">   public void scene1() &#123;</span><br><span class="line">       DynamicLink dc = new DynamicLink();</span><br><span class="line">       DynamicLink.Human man = new DynamicLink.Man();</span><br><span class="line">       dc.say(man);</span><br><span class="line">       man = new DynamicLink.Woman();</span><br><span class="line">       dc.say(man);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   /**</span><br><span class="line">    * 方法调用-分派-静态分派示例2</span><br><span class="line">    * 子类型引用</span><br><span class="line">    * INVOKEVIRTUAL com/hardydou/jmm/DynamicLink.say (Lcom/hardydou/jmm/DynamicLink$Man;)V</span><br><span class="line">    * INVOKEVIRTUAL com/hardydou/jmm/DynamicLink.say (Lcom/hardydou/jmm/DynamicLink$Woman;)V</span><br><span class="line">    */</span><br><span class="line">   @Test</span><br><span class="line">   public void scene2() &#123;</span><br><span class="line">       DynamicLink dc = new DynamicLink();</span><br><span class="line">       DynamicLink.Man man = new DynamicLink.Man();</span><br><span class="line">       dc.say(man);</span><br><span class="line">       DynamicLink.Woman woman = new DynamicLink.Woman();</span><br><span class="line">       dc.say(woman);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h6 id="动态分派示例-重写"><a href="#动态分派示例-重写" class="headerlink" title="动态分派示例-重写"></a>动态分派示例-重写</h6><p>运行结果与字节码不一定相同。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">static abstract class Human &#123;</span><br><span class="line">       abstract void say();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   static class Man extends Human &#123;</span><br><span class="line"></span><br><span class="line">       @Override</span><br><span class="line">       void say() &#123;</span><br><span class="line">           System.out.println(&quot;Hello man&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   static class Woman extends Human &#123;</span><br><span class="line">       @Override</span><br><span class="line">       void say() &#123;</span><br><span class="line">           System.out.println(&quot;Hello woman&quot;);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    /**</span><br><span class="line">    * 方法调用-分派-动态分派</span><br><span class="line">    * &lt;p&gt;</span><br><span class="line">    * 实际执行结果与 字节码 不相同</span><br><span class="line">    * &lt;p&gt;</span><br><span class="line">    * INVOKEVIRTUAL com/hardydou/jmm/DynamicLink$Human.say ()V</span><br><span class="line">    * INVOKEVIRTUAL com/hardydou/jmm/DynamicLink$Human.say ()V</span><br><span class="line">    */</span><br><span class="line">   @Test</span><br><span class="line">   public void scene5() &#123;</span><br><span class="line">       DynamicLink.Human human = new DynamicLink.Man();</span><br><span class="line">       DynamicLink.Human woman = new DynamicLink.Woman();</span><br><span class="line">       Object obj = new Object();</span><br><span class="line">       human.say();</span><br><span class="line">       human = new DynamicLink.Woman();</span><br><span class="line">       human.say();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h6 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h6><p>截止java1.8，java是静态多分派，动态单分派语言。</p><h3 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h3><p>当一个方法开始执行后，有两中方式退出：正常完成出口、异常完成出口。无论哪种方法退出，退出后都要返回到方法被调用到的位置，程序才能继续执行，方法返回时需要栈帧中保持一些信息，用来帮助恢复它的上层方法执行状态。</p><h4 id="正常完成出口（Normal-Method-Invocation-Completion）"><a href="#正常完成出口（Normal-Method-Invocation-Completion）" class="headerlink" title="正常完成出口（Normal Method Invocation Completion）"></a>正常完成出口（Normal Method Invocation Completion）</h4><p>执行引擎遇到任意一个方法返回指令码</p><pre><code>return </code></pre><h4 id="异常完成出口（Abrupt-Method-Invocation-Completion）"><a href="#异常完成出口（Abrupt-Method-Invocation-Completion）" class="headerlink" title="异常完成出口（Abrupt Method Invocation Completion）"></a>异常完成出口（Abrupt Method Invocation Completion）</h4><p>方法执行过程中遇到异常，并且这个异常没有在方法体内得到处理。<br>无返回值</p><h2 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>所有线程共享最大内存空间，虚拟机启动时创建。虚拟机规范描述：所有对象实例、数组都要在堆上分配，但随着JIT编译器的发展与逃逸分析技术的逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化。是垃圾收集器管理的主要区域。不同的垃圾回收算法也决定了堆内存细分方式。</p><ul><li>逻辑连续即可，不需要物理连续；</li><li>-Xmx 最大内存</li><li>-Xms 最小内存<h3 id="特征-1"><a href="#特征-1" class="headerlink" title="特征"></a>特征</h3></li><li>允许抛出 OutOfMemoryError</li><li>线程共享</li><li>最大一块内存，对象实例、数组 都在这分配空间。</li><li>GC算法直接决定细分空间；</li></ul><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>所有线程共享内存区域，用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。java虚拟机规范把方法区描述为堆的一个逻辑部分，但它却有一个别名：Non-Heap（非堆）目的是与Java堆分开来。</p><h3 id="特征-2"><a href="#特征-2" class="headerlink" title="特征"></a>特征</h3><ul><li>会抛出OutOfMemoryError</li><li>线程共享</li></ul><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>运行时常量池（Run Constant Pool）是方法区的一部分，Class文件中除了有类的版本、字段、方法、接口描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><p>直接内存并不是虚拟机运行时数据区的一部分，也不是java虚拟机规范中定义的内存区域，而且也可能会导致OutOfMemoryError异常出现。</p><h3 id="存在方式"><a href="#存在方式" class="headerlink" title="存在方式"></a>存在方式</h3><p>JDK1.4引入的NIO，Channel、Buffer可以通过Native直接分配堆外内存，然后通过Java堆中的DirectByteBuffer引用。避免Java堆与Native堆中来回复制数据，提升效能明显。</p><h3 id="特征-3"><a href="#特征-3" class="headerlink" title="特征"></a>特征</h3><ul><li>非Java虚拟机内存区域</li><li>允许抛出 OutOfMemoryError（物理内存不够用时）</li><li>Jdk1.4 Nio 引入</li><li>不受 -Xmx 影响</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gradle构建项目</title>
      <link href="/2019/05/05/Gradle%E6%9E%84%E5%BB%BA/"/>
      <url>/2019/05/05/Gradle%E6%9E%84%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>自动化构建、分发工具</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>安装java 的Jdk 或者Jre<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ java -version</span><br><span class="line">java version &quot;1.8.0_121&quot;</span><br></pre></td></tr></table></figure></p><h3 id="安装Gradle"><a href="#安装Gradle" class="headerlink" title="安装Gradle"></a>安装Gradle</h3><h4 id="MacOs"><a href="#MacOs" class="headerlink" title="MacOs"></a>MacOs</h4><p>通过<a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">HomeBrew</a>进行安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install gradle</span><br></pre></td></tr></table></figure></p><h4 id="WinOs"><a href="#WinOs" class="headerlink" title="WinOs"></a>WinOs</h4><p>待完善</p><h4 id="验证安装结果"><a href="#验证安装结果" class="headerlink" title="验证安装结果"></a>验证安装结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gradle -v</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">Gradle 5.4</span><br><span class="line">------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="设置中央仓库"><a href="#设置中央仓库" class="headerlink" title="设置中央仓库"></a>设置中央仓库</h4><p>将中央仓库设置为阿里代理库，否则总会卡死。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.gradle/init.d/ </span><br><span class="line">touch ~/.gradle/init.d/init.gradle</span><br></pre></td></tr></table></figure></p><p>init.gradle 内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        maven &#123; url &apos;https://maven.aliyun.com/repository/public‘&#125;</span><br><span class="line">        maven &#123; url &quot;https://maven.aliyun.com/repository/spring&quot; &#125;</span><br><span class="line">        maven &#123; url &quot;https://maven.aliyun.com/repository/google&quot; &#125;</span><br><span class="line">        maven &#123; url &quot;https://maven.aliyun.com/repository/gradle-plugin&quot; &#125;</span><br><span class="line">        maven &#123; url &quot;https://maven.aliyun.com/repository/spring&quot; &#125;</span><br><span class="line">        maven &#123; url &quot;https://maven.aliyun.com/repository/spring-plugin&quot; &#125;</span><br><span class="line">        mavenLocal()</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="构建JavaApplication项目"><a href="#构建JavaApplication项目" class="headerlink" title="构建JavaApplication项目"></a>构建JavaApplication项目</h2><h4 id="gradle-构建引导"><a href="#gradle-构建引导" class="headerlink" title="gradle 构建引导"></a>gradle 构建引导</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">mkdir learn-gradle</span><br><span class="line">cd learn-gradle </span><br><span class="line">gradle init</span><br><span class="line">Select type of project to generate:</span><br><span class="line">  1: basic</span><br><span class="line">  2: cpp-application</span><br><span class="line">  3: cpp-library</span><br><span class="line">  4: groovy-application</span><br><span class="line">  5: groovy-library</span><br><span class="line">  6: java-application</span><br><span class="line">  7: java-library</span><br><span class="line">  8: kotlin-application</span><br><span class="line">  9: kotlin-library</span><br><span class="line">  10: scala-library</span><br><span class="line">Enter selection (default: basic) [1..10] 6</span><br><span class="line"></span><br><span class="line">Select build script DSL:</span><br><span class="line">  1: groovy</span><br><span class="line">  2: kotlin</span><br><span class="line">Enter selection (default: groovy) [1..2] 1</span><br><span class="line"></span><br><span class="line">Select test framework:</span><br><span class="line">  1: junit</span><br><span class="line">  2: testng</span><br><span class="line">  3: spock</span><br><span class="line">Enter selection (default: junit) [1..3] 1</span><br><span class="line"></span><br><span class="line">Project name (default: learn-gradle):</span><br><span class="line">Source package (default: learn.gradle):</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 1m 22s</span><br><span class="line">2 actionable tasks: 2 executed</span><br></pre></td></tr></table></figure><h4 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">learn-gradle </span><br><span class="line">├── build.gradle</span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── gradle-wrapper.jar</span><br><span class="line">│       └── gradle-wrapper.properties</span><br><span class="line">├── gradlew</span><br><span class="line">├── gradlew.bat</span><br><span class="line">├── settings.gradle</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   │   └── learn</span><br><span class="line">    │   │       └── gradle</span><br><span class="line">    │   │           └── App.java</span><br><span class="line">    │   └── resources</span><br><span class="line">    └── test</span><br><span class="line">        ├── java</span><br><span class="line">        │   └── learn</span><br><span class="line">        │       └── gradle</span><br><span class="line">        │           └── AppTest.java</span><br><span class="line">        └── resources</span><br></pre></td></tr></table></figure><h4 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gradle run</span><br><span class="line"></span><br><span class="line">&gt; Task :run</span><br><span class="line">Hello world.</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 2s</span><br><span class="line">2 actionable tasks: 2 executed</span><br></pre></td></tr></table></figure><h3 id="Maven迁移到Gradle"><a href="#Maven迁移到Gradle" class="headerlink" title="Maven迁移到Gradle"></a>Maven迁移到Gradle</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd projectRoot</span><br><span class="line">gradle init --type pom</span><br></pre></td></tr></table></figure><p>基于 生成的 build.gradle 自行调整即可</p><h3 id="Idea使用Gradle"><a href="#Idea使用Gradle" class="headerlink" title="Idea使用Gradle"></a>Idea使用Gradle</h3><h4 id="安装Gradle插件"><a href="#安装Gradle插件" class="headerlink" title="安装Gradle插件"></a>安装Gradle插件</h4><p><a href="https://www.jetbrains.com/help/idea/gradle.html" target="_blank" rel="noopener">更多信息看这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java注解</title>
      <link href="/2019/05/04/Java%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/05/04/Java%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今天用idea学习lombok时遇到一个问题，注解@Getter @Setter 编译通过通过struct视图也可以看到动态添加的 方法，但是运行时就会提示方法不存在。开始以为是依赖引入时机不对，调整后还是没有效果。百度一下需要这么操作：<br><img src="/images/pasted-58.png" alt="idea设置AnnotationProcessors"><br>此图为gradle依赖<br><img src="/images/pasted-59.png" alt="lombok依赖"><br>作为常年使用eclipse的我觉得有必要搞搞清楚idea的这个AnnotionProcessor是个什么鬼东西了。</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p><img src="/images/pasted-57.png" alt="注解脑图"><br>(此图来自互联网)</p><h2 id="AnnotionProcessor"><a href="#AnnotionProcessor" class="headerlink" title="AnnotionProcessor"></a>AnnotionProcessor</h2><p>首先并不是idea创造的东西，而是java提供的编译时注解处理机制。两种编译时解析方案</p><pre><code>1. APT（Annotation Processing Tool）2. Pluggable Annotation Processing API</code></pre><h3 id="APT"><a href="#APT" class="headerlink" title="APT"></a>APT</h3><p>apt自JDK5产生，JDK7已标记为过期、不推荐使用，JDK8中已彻底删除，自JDK6开始，可以使用Pluggable Annotation Processing API来替换它，apt被替换主要有2点原因： </p><ol><li>api都在com.sun.mirror非标准包下</li><li>没有集成到javac中，需要额外运行<br><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/apt/GettingStarted.html" target="_blank" rel="noopener">apt的更多介绍可以参见这里</a></li></ol><h3 id="Pluggable-Annotation-Processing-API"><a href="#Pluggable-Annotation-Processing-API" class="headerlink" title="Pluggable Annotation Processing API"></a>Pluggable Annotation Processing API</h3><p><a href="https://jcp.org/en/jsr/detail?id=269" target="_blank" rel="noopener">JSR 269</a>，自JDK6加入，作为apt的替代方案，它解决了apt的两个问题，javac在执行的时候会调用实现了该API的程序，这样我们就可以对编译器做一些增强，这时javac执行的过程如下：<br><img src="/images/pasted-60.png" alt="upload successful"></p><h2 id="做一个AnnotationProcessor"><a href="#做一个AnnotationProcessor" class="headerlink" title="做一个AnnotationProcessor"></a>做一个AnnotationProcessor</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><pre><code>* Mac(gradle)* IntelliJ IDEA* Java1.8* 构建工具Gradle 语言 Groovy</code></pre><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><img src="/images/pasted-61.png" alt="upload successful"><br><img src="/images/pasted-63.png" alt="upload successful"><br><img src="/images/pasted-64.png" alt="upload successful"><br><img src="/images/pasted-65.png" alt="upload successful"><br><img src="/images/pasted-66.png" alt="upload successful"></p><h3 id="模块author-processorx"><a href="#模块author-processorx" class="headerlink" title="模块author-processorx"></a>模块author-processorx</h3><p><img src="/images/pasted-67.png" alt="upload successful"><br><img src="/images/pasted-68.png" alt="upload successful"><br><img src="/images/pasted-69.png" alt="upload successful"><br><img src="/images/pasted-70.png" alt="upload successful"></p><h4 id="创建Annotation"><a href="#创建Annotation" class="headerlink" title="创建Annotation"></a>创建Annotation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.hardydou.learn.annotation.processor;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.ElementType;</span><br><span class="line">import java.lang.annotation.Retention;</span><br><span class="line">import java.lang.annotation.RetentionPolicy;</span><br><span class="line">import java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.CLASS)</span><br><span class="line">public @interface EnableAuthor &#123;</span><br><span class="line">    String name() default &quot;authorXXX&quot;;</span><br><span class="line">    String email() default &quot;author@XX.com&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建Processor"><a href="#创建Processor" class="headerlink" title="创建Processor"></a>创建Processor</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.hardydou.learn.annotation.processor;</span><br><span class="line"></span><br><span class="line">import javax.annotation.processing.AbstractProcessor;</span><br><span class="line">import javax.annotation.processing.RoundEnvironment;</span><br><span class="line">import javax.annotation.processing.SupportedAnnotationTypes;</span><br><span class="line">import javax.lang.model.SourceVersion;</span><br><span class="line">import javax.lang.model.element.Element;</span><br><span class="line">import javax.lang.model.element.ElementKind;</span><br><span class="line">import javax.lang.model.element.TypeElement;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">@SupportedAnnotationTypes(&#123;&quot;com.hardydou.learn.annotation.processor.EnableAuthor&quot;&#125;)</span><br><span class="line">public class AuthorProcessor extends AbstractProcessor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public SourceVersion getSupportedSourceVersion() &#123;</span><br><span class="line">        return SourceVersion.latestSupported();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean process(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv) &#123;</span><br><span class="line">        Set&lt;? extends Element&gt; elements = roundEnv.getElementsAnnotatedWith(EnableAuthor.class);</span><br><span class="line"></span><br><span class="line">        for (Element ele : elements) &#123;</span><br><span class="line">            if (ele.getKind() == ElementKind.CLASS) &#123;</span><br><span class="line">                EnableAuthor author = ele.getAnnotation(EnableAuthor.class);</span><br><span class="line">                System.out.println(ele + &quot;[&#123;author:&quot; + author.name() + &quot;email:&quot; + author.email() + &quot;&#125;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注册Processor服务"><a href="#注册Processor服务" class="headerlink" title="注册Processor服务"></a>注册Processor服务</h4><p><img src="/images/pasted-72.png" alt="upload successful"></p><h3 id="模块test"><a href="#模块test" class="headerlink" title="模块test"></a>模块test</h3><p><img src="/images/pasted-73.png" alt="upload successful"><br><img src="/images/pasted-74.png" alt="upload successful"></p><h4 id="修改build-gradle文件"><a href="#修改build-gradle文件" class="headerlink" title="修改build.gradle文件"></a>修改build.gradle文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id &apos;java&apos;</span><br><span class="line">    id &apos;application&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group &apos;com.hardydou.learn&apos;</span><br><span class="line">version &apos;1.0-SNAPSHOT&apos;</span><br><span class="line">mainClassName = &quot;com.hardydou.learn.annotation.TestProcessor&quot;</span><br><span class="line">sourceCompatibility = 1.8</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile project(&quot;:author-processor&quot;)</span><br><span class="line">    annotationProcessor project(&quot;:author-processor&quot;)</span><br><span class="line">    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.hardydou.learn.annotation;</span><br><span class="line"></span><br><span class="line">import com.hardydou.learn.annotation.processor.EnableAuthor;</span><br><span class="line"></span><br><span class="line">@EnableAuthor(name = &quot;hardy&quot;, email = &quot;hardydou@163.com&quot;)</span><br><span class="line">public class TestProcessor &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;TestProcessor.main&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="执行测试"><a href="#执行测试" class="headerlink" title="执行测试"></a>执行测试</h4><p>由于事件发生在编译时，所以每次要执行clean 才可以看到效果<br><img src="/images/pasted-77.png" alt="upload successful"><br><img src="/images/pasted-78.png" alt="upload successful"><br>执行结果<br><img src="/images/pasted-79.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 刻意练习 </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>架构图</title>
      <link href="/2019/04/03/%E7%94%BB%E6%9E%B6%E6%9E%84%E5%9B%BE/"/>
      <url>/2019/04/03/%E7%94%BB%E6%9E%B6%E6%9E%84%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>架构图是展示软件系统的<font size="6"> 整体全貌、组件关系、部署情况、演进方向</font>  视图语言。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>传递架构师要表达的信息，快速评估架构的可行性、安全性、以及问题所在。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>分类较多，目前以 4+1视图（场景视图、逻辑视图、物理视图、处理流程图、开发视图）、4C（上下文、容器图、组件图、代码图）为主流。</p><h2 id="4-1视图"><a href="#4-1视图" class="headerlink" title="4+1视图"></a>4+1视图</h2><h3 id="场景视图"><a href="#场景视图" class="headerlink" title="场景视图"></a>场景视图</h3><p>描述 参与者与功能用力的关系，通常以用例图表示。<br><img src="/images/pasted-50.png" alt="upload successful"></p><h3 id="逻辑视图"><a href="#逻辑视图" class="headerlink" title="逻辑视图"></a>逻辑视图</h3><p>描述软件功能拆解后的组件关系，组件约束和边界，通常用 组件图来表示<br>//TODO 添加组件图图片</p><h3 id="物理视图"><a href="#物理视图" class="headerlink" title="物理视图"></a>物理视图</h3><p>描述软件到硬件的映射关系，反映出系统的组件是如何部署到一组计算器节点上的，通常以 部署图表示</p><h3 id="处理流程图"><a href="#处理流程图" class="headerlink" title="处理流程图"></a>处理流程图</h3><p>描述系统之间、组件之间通信时序，数据的输入输出，反应系统的功能流程与数据流程，通常由时序图和流程图表示。</p><h3 id="开发视图"><a href="#开发视图" class="headerlink" title="开发视图"></a>开发视图</h3><p>描述系统的模块划分和组成，以及细化到内部包的组成设计，服务于开发人员，反映系统开发实施过程。</p><h2 id="4C图"><a href="#4C图" class="headerlink" title="4C图"></a>4C图</h2><h3 id="上下文（语境图Context）"><a href="#上下文（语境图Context）" class="headerlink" title="上下文（语境图Context）"></a>上下文（语境图Context）</h3><p><img src="/images/pasted-52.png" alt="语境图"></p><p>参与者、系统之间的关系，系统状态进度。</p><font color="red">抽象说：<br>  人、ofo 是2个独立存在的事物，可以称作context。<br></font><h3 id="容器图"><a href="#容器图" class="headerlink" title="容器图"></a>容器图</h3><p><img src="/images/pasted-54.png" alt="容器图"><br>互相独立存在的应用（占用独立的pid 就可以看做一个容器）例如：</p><ul><li>终端应用：<br>APP、API接口、WEB</li><li>Web服务器：<br>apache、 nginx </li><li>Web应用:<br>部署在 Tomcat、jetty、resion、jboss、Weblogic、Websphere 一个应用</li><li>数据库应用：<br>Mysql、Oracle、Mongodb</li><li>其它<br>ELK、文件系统、dns服务  <font color="red"><br>抽象说：<br>ofo 可以分解为 车子、APP、其它 这些可以被称为容器。<br></font>  </li></ul><h3 id="组件图"><a href="#组件图" class="headerlink" title="组件图"></a>组件图</h3><p>这张组件图不是很严格，没有表示清楚组件提供的能力名称。<br><img src="/images/pasted-55.png" alt="组件图"><br>容器是由多个组件构成，所有组件应当运行在同一个进程中。   </p><font color="red"><br>  抽象说：<br>  车子 可以分解为 车胎、车把、车蹬子、车座子、链条、车架、其它 这些可以被称为组件。<br></font><h3 id="代码图"><a href="#代码图" class="headerlink" title="代码图"></a>代码图</h3><p><img src="/images/pasted-56.png" alt="类图"></p><font color="red"><br>  抽象说：<br>  外胎、内胎、辐条、轮圈、轴承 生产方式，轮胎 组装方式 。<br></font>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java类加载机制</title>
      <link href="/2019/03/20/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/03/20/JVM-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-48.png" alt="upload successful"><br><img src="/images/pasted-49.png" alt="upload successful"></p><h2 id="加载器类型"><a href="#加载器类型" class="headerlink" title="加载器类型"></a>加载器类型</h2><h3 id="启动加载器"><a href="#启动加载器" class="headerlink" title="启动加载器"></a>启动加载器</h3><ul><li>BootstrapClassLoader  </li><li>C++语言实现</li><li>负责加载&lt;JAVA_HOME&gt;\lib (或者 -Xbootclasspath 参数指定路径)目录中的类库加载到内存</li></ul><h3 id="扩展加载类"><a href="#扩展加载类" class="headerlink" title="扩展加载类"></a>扩展加载类</h3><ul><li>ExtensionClassLoader</li><li>Java实现</li><li>负责加载&lt;JAVA_HOME&gt;\lib\ext目录（或者java.ext.dirs系统变量指定的路径）所有类库</li></ul><h3 id="应用程序类加载器"><a href="#应用程序类加载器" class="headerlink" title="应用程序类加载器"></a>应用程序类加载器</h3><ul><li>ApplicationClassLoader</li><li>负责加载 classpath 上的指定类库，我们可以直接使用这个类加载器</li></ul><h2 id="双亲委派模式"><a href="#双亲委派模式" class="headerlink" title="双亲委派模式"></a>双亲委派模式</h2><p>类架加载器在加载一个类时先咨询自己发父亲是否已经加载如果已经加载就直接返回，没有加载子加载器就进行加载。<br><img src="/images/pasted-47.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java内存模型（JMM）</title>
      <link href="/2019/03/05/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%EF%BC%88JMM%EF%BC%89/"/>
      <url>/2019/03/05/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%EF%BC%88JMM%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h2><p>在写单例模式的时候涉及到了线程安全，继而又涉及到了volatile、无序写入、synchronized等内容到此为止有必要了解下JMM了。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在<font color="red" size="5" face="黑体">Java虚拟机</font>中通过<font color="blue" size="5" face="黑体">java内存模型</font>来 <em>屏蔽</em> 各种硬件和操作系统的内存访问差异，以实现让java程序在各种平台下都能够达到<em>一致的内存访问效果</em> 。</p><h3 id="性能一致性方案"><a href="#性能一致性方案" class="headerlink" title="性能一致性方案"></a>性能一致性方案</h3><p>性能一致性方案（下图）<br><img src="/images/pasted-40.png" alt="upload successful"><br>java也有有采用类似方案（下图）<br><img src="/images/pasted-42.png" alt="upload successful"></p><h4 id="方案带来的挑战："><a href="#方案带来的挑战：" class="headerlink" title="方案带来的挑战："></a>方案带来的挑战：</h4><h5 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h5><p>一个线程写入的数据是否能立刻马上被其它线程看到。是否存在不能被看到的可能性？</p><h5 id="应对-可见性"><a href="#应对-可见性" class="headerlink" title="应对-可见性"></a>应对-可见性</h5><ul><li>volatile 关键字，被它修饰后表示：线程本地缓存失效，每次从主存里面拉去数据。</li><li>同步锁有序执行</li></ul><h5 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h5><p>一个操作是否可以被一个线程一个计算机写指令完成？如果存在多个写指令完成的操作就会破坏掉原子性。（高级语言的一个指令往往被分割成1个或者多个计算机指令）</p><h5 id="应对-原子性"><a href="#应对-原子性" class="headerlink" title="应对=原子性"></a>应对=原子性</h5><ul><li>atomicXX解决方案</li><li>基本变量（除 long,double外）的赋值操作。64位系统也被拆分位2个指令集合</li><li>同步锁有序执行</li></ul><h3 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h3><p>编译器和处理器为了优化执行效率可能会调整指令执行顺序。<br><img src="/images/pasted-43.png" alt="upload successful"></p><h4 id="方案带来的挑战"><a href="#方案带来的挑战" class="headerlink" title="方案带来的挑战"></a>方案带来的挑战</h4><h5 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h5><p>一个指令集合是否被按照一定的顺序执行？重新排序后是否与原有执行顺序一致？</p><h5 id="应对-有序性（happens-before）"><a href="#应对-有序性（happens-before）" class="headerlink" title="应对-有序性（happens-before）"></a>应对-有序性（happens-before）</h5><p> 1、程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作。<br> 2、锁定规则：一个unLock操作先行发生于后面对同一个锁的Lock()操作。<br> 3、volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作。<br> 4、传递规则：如果操作A先行发生与操作B,而操作B先行发生于操作C，则操作A先行发生于操作C。<br> 5、线程启动规则：Thread对象的start()方法先行发生于此线程的每一个动作。<br> 6、线程终端规则：对线程interrupt()方法的调用先行发生与被中断线程的代码检测到中断事件的发生（只有执行了interrupt()方法才可以检测到中断事件的发生）。<br> 7、线程终结规则：线程中所有操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束，Thread.isAlive()的返回值手段检测到线程已经终止执行。<br> 8、对象终结规则：一个对象的初始化完成先行发生于它的finallze方法的开始。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>上面提到的原子性、可见性、有序性等解决方案是有关系的，其中happens-before 是其它的基础。</p><p><img src="/images/pasted-46.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式-单例模式</title>
      <link href="/2019/03/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/03/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>程序运行周期内这个对象最多被创建一次，这类对象我们称之为单例，这个设计模式称作单例模式。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>私有化构造；</li><li>通过调用静态方法获取对象；  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private Singleton() &#123;</span><br><span class="line">//do something</span><br><span class="line">&#125;</span><br><span class="line">public static Singleton getInstance() &#123;</span><br><span class="line">  return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static Singleton instance = new Singleton();</span><br></pre></td></tr></table></figure><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li>简单</li><li>线程安全</li></ul><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ul><li>资源效率不高，当执行其它静态方法 或者 class.forName 时就会被初始化。</li></ul><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public synchronized static Singleton getInstance() &#123;</span><br><span class="line">        if (instance == null) &#123;</span><br><span class="line">            instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优势-1"><a href="#优势-1" class="headerlink" title="优势"></a>优势</h4><ul><li>线程安全</li></ul><h4 id="劣势-1"><a href="#劣势-1" class="headerlink" title="劣势"></a>劣势</h4><ul><li>synchronized 的使用造成资源消耗较大</li></ul><h3 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h3><h4 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static Singleton getInstance() &#123;</span><br><span class="line">if (instance == null) &#123;</span><br><span class="line">synchronized (Singleton.class) &#123;</span><br><span class="line">if (instance == null) &#123;</span><br><span class="line">instance = new Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优势-2"><a href="#优势-2" class="headerlink" title="优势"></a>优势</h4><ul><li>线程安全</li><li>第一次以后调用 不再受到 synchronize 影响；</li></ul><h4 id="劣势-2"><a href="#劣势-2" class="headerlink" title="劣势"></a>劣势</h4><ul><li>java内存模型（jmm）无序写入可能会引发，对象创建失败问题；</li></ul><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><h4 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private static class NoThing &#123;</span><br><span class="line">   private static Singleton instance = new Singleton();</span><br><span class="line">   &#125;</span><br><span class="line">public static Singleton getInstance() &#123;</span><br><span class="line">        return NoThing.instance;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="优势-3"><a href="#优势-3" class="headerlink" title="优势"></a>优势</h4><ul><li>线程安全</li><li>延迟加载</li><li>资源消耗低</li></ul><h4 id="劣势-3"><a href="#劣势-3" class="headerlink" title="劣势"></a>劣势</h4><ul><li>较饿汉模式代码较复杂</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="关系图谱"><a href="#关系图谱" class="headerlink" title="关系图谱"></a>关系图谱</h3><p><img src="/images/pasted-38.png" alt="upload successful"></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p><img src="/images/pasted-39.png" alt="upload successful"></p><h3 id="个人观点"><a href="#个人观点" class="headerlink" title="个人观点"></a>个人观点</h3><p>你会写一个 消耗资源且可能不被调用的单例吗？所以 就用饿汉模式吧。</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>种植业财务报表</title>
      <link href="/2019/02/20/%E7%A7%8D%E6%A4%8D%E4%B8%9A%E5%88%A9%E6%B6%A6%E8%A1%A8/"/>
      <url>/2019/02/20/%E7%A7%8D%E6%A4%8D%E4%B8%9A%E5%88%A9%E6%B6%A6%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>前两天学习到利润表，就利用分析了梨农的利润情况。整体感觉梨农太不容易了，干了赔钱不干还得外出务工，但整体对财务知识用到的不多，今天想构建一个梨农的故事来学以致用 财务知识。</p><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>资产负债表是什么、作用</li><li>利润表是什么、作用</li><li>现金流量表是什么、作用</li><li>财务科目是什么、作用</li></ul><h2 id="故事开始"><a href="#故事开始" class="headerlink" title="故事开始"></a>故事开始</h2><h3 id="第一章、开始"><a href="#第一章、开始" class="headerlink" title="第一章、开始"></a>第一章、开始</h3><p>小鱼、小李跟小花三个人准备创业。在经过慎重考虑后决定成立一个果园，果园位置就定在了石家庄赵县。  </p><h4 id="注册公司"><a href="#注册公司" class="headerlink" title="注册公司"></a>注册公司</h4><p>经过讨论三人各自出资10万，注册《梨花雨果园有限公司》。以下是公司概要信息：  </p><table><thead><tr><th>名称</th><th>值</th><th>备注</th></tr></thead><tbody><tr><td>公司名称</td><td>梨花雨果园有限责任公司</td><td></td></tr><tr><td>注册资本</td><td>30万</td><td></td></tr><tr><td>法人</td><td>小鱼</td><td></td></tr><tr><td>监事</td><td>小花</td></tr></tbody></table><h3 id="第二章、财务报表"><a href="#第二章、财务报表" class="headerlink" title="第二章、财务报表"></a>第二章、财务报表</h3><h4 id="台账（流水账）"><a href="#台账（流水账）" class="headerlink" title="台账（流水账）"></a>台账（流水账）</h4><p>台账规划的好会有事半功倍的效果。<br><img src="/images/pasted-30.png" alt="upload successful"></p><h4 id="期初"><a href="#期初" class="headerlink" title="期初"></a>期初</h4><p>三个人都是农民出身，说起怎么种树大家都很在行，但在聊到 资产负债表 应该包含哪些科目的时候，都傻眼了。最后通过网上查阅下资料确定了具体科目。<br><img src="/images/pasted-23.png" alt="upload successful"></p><h4 id="租地-amp-置办机器后"><a href="#租地-amp-置办机器后" class="headerlink" title="租地&amp;置办机器后"></a>租地&amp;置办机器后</h4><p><img src="/images/pasted-25.png" alt="upload successful"><br><em>思考问题</em> </p><ul><li>已支付租赁费用、已支付工资该如何表示？</li></ul><h4 id="贷款后"><a href="#贷款后" class="headerlink" title="贷款后"></a>贷款后</h4><p><img src="/images/pasted-32.png" alt="upload successful"><br><em>思考问题</em> </p><ul><li>日常经营支出：灌溉费用、农药费用、人工费用该如何表达<h4 id="收获后"><a href="#收获后" class="headerlink" title="收获后"></a>收获后</h4><img src="/images/pasted-33.png" alt="upload successful"><br><em>思考问题</em> </li><li>存货如何货币化？依据生产产本记录？还是依据 预计销售价记录</li></ul><h4 id="销售后"><a href="#销售后" class="headerlink" title="销售后"></a>销售后</h4><p><img src="/images/pasted-34.png" alt="upload successful"><br><em>思考问题</em> </p><ul><li>营业收入如何记录<h4 id="还清欠款后"><a href="#还清欠款后" class="headerlink" title="还清欠款后"></a>还清欠款后</h4><img src="/images/pasted-35.png" alt="upload successful"></li></ul><h3 id="第三章、利润分析"><a href="#第三章、利润分析" class="headerlink" title="第三章、利润分析"></a>第三章、利润分析</h3><h4 id="利润表"><a href="#利润表" class="headerlink" title="利润表"></a>利润表</h4><p><img src="/images/pasted-31.png" alt="upload successful"></p><h3 id="第四章、总结"><a href="#第四章、总结" class="headerlink" title="第四章、总结"></a>第四章、总结</h3><p>暂无</p>]]></content>
      
      
      <categories>
          
          <category> 财务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刻意练习 </tag>
            
            <tag> 财务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>果农利润表</title>
      <link href="/2019/02/19/%E6%9E%9C%E5%86%9C%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/"/>
      <url>/2019/02/19/%E6%9E%9C%E5%86%9C%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-14.png" width="400" div="" align="/"></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>从小在梨树下长大，与梨树相关的工作没有没干过的：  </p><ul><li>10+次浇地  （2月-11月）</li><li>10次打药 （2月-9月）</li><li>疏花疏果     （4月）</li><li>套袋    （5月）</li><li>卸梨、包梨、装箱、入库（8月-10月）</li><li>卖梨（8月-次年5月）</li></ul><p>2010年以后人均收入快速上升，非农产品物价上涨飞速，最重要的房价坐上火箭一般窜。老乡们能出国，能进城的绝对不会留下来种地。财务里面讲的是利润率、投资回报率，我们来为果农算一笔账。</p><h2 id="抽离-成本项"><a href="#抽离-成本项" class="headerlink" title="抽离 成本项"></a>抽离 成本项</h2><h3 id="调研问题："><a href="#调研问题：" class="headerlink" title="调研问题："></a>调研问题：</h3><ul><li>雪梨有几亩地：4亩</li><li>多少棵雪梨树：80</li><li>一年收多少件雪梨：750</li><li>15-19年价格：25、35、35、</li><li>一年浇几次地：5 次  2次肥料1000/次</li><li>一年打几次药：6次    </li><li>几次药 分别多少钱：300/次</li><li>一件梨包装费：11</li><li>一件梨制冷费：5</li></ul><h3 id="成本项以及条件假设"><a href="#成本项以及条件假设" class="headerlink" title="成本项以及条件假设"></a>成本项以及条件假设</h3><p><img src="/images/pasted-19.png" alt="upload successful"></p><h2 id="利润表"><a href="#利润表" class="headerlink" title="利润表"></a>利润表</h2><p><img src="/images/pasted-20.png" alt="upload successful"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>分析利润表，关键因素有 售价、包装、冷藏、人工上面。其中 包装、冷藏成本上涨较小，人工成本上涨十分剧烈 但售价基本无变化。导致 2010年以后种地 远远不如 外出务工收入高。</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>物价上涨是趋势所以 包装、冷藏、人工成本无法降低，只能想法提升售价。提升售价方式：</p><ul><li>更换品种例如 皇冠 近些年售价在40-100元/件。</li><li>减少中间环节 直接铺货到零售商。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 财务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刻意练习 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>人工智能</title>
      <link href="/2019/02/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
      <url>/2019/02/18/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/pasted-8.png" alt="upload successful"><center> 大家对“人工智能” </center></p><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><h3 id="个人观点"><a href="#个人观点" class="headerlink" title="个人观点"></a>个人观点</h3><ul><li>这次讲的人工智能本质就是神经网络+数据。</li><li>人工智能 不会威胁到人的生存 ，的确会解放一些劳动力。</li><li>人工智能 就像计算器、计算机、汽车 是人类的工具（如同 汽车让人日行千里、计算机让人计算简化，人工智能可以多方面增幅人类）</li></ul><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>   人工智能 让机器具备人类的视觉、听觉、嗅觉、逻辑推理等能力。目前有两大类方案一类是基于规则，一类是神经网络。此次人工智能浪潮之前一直是规则占据上风。得益于 全球数据电子化，计算能力提升才导致了神经网络卷土从来。<br>   现在再给人工智能做个理解就是，让计算机利用神经网络（深度学习）通过大量数据的训练后而具备的一些人类具备的特殊能力（图形识别，语音识别等能力）。<br><img src="/images/pasted-10.png" alt="upload successful"></p><h3 id="神经网络发展史"><a href="#神经网络发展史" class="headerlink" title="神经网络发展史"></a>神经网络发展史</h3><p><img src="/images/pasted-9.png" alt="upload successful"></p><h3 id="人工智能进展"><a href="#人工智能进展" class="headerlink" title="人工智能进展"></a>人工智能进展</h3><p><img src="/images/pasted-11.png" alt="upload successful"><br>目前来看 语音、图像识别、逻辑推理、自然语言交流处于技术成熟期（可以以此开发应用重构一些行业），可以考虑以下行业：<br><img src="/images/pasted-12.png" alt="upload successful"></p><h3 id="对人工智能的误解"><a href="#对人工智能的误解" class="headerlink" title="对人工智能的误解"></a>对人工智能的误解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">误解1：人工智能等于机器人。</span><br><span class="line">事实：人工智能是包含大量子领域的全部术语，涉及广泛的应用范围。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">误解2：人工智能对标的是O2O，电商和消费升级这样的具体赛道。</span><br><span class="line">事实：人工智能提供的是为全产业升级的技术工具。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">误解3：人工智能的产品离普通人很遥远。</span><br><span class="line">事实：现实生活中，我们已经在使用AI技术，而且无处不在。例如：邮件过滤、个性化推荐、微信语音转文字、苹果Siri、谷歌搜索引擎、机器翻译、自动驾驶等等。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">误解4：人工智能是一项技术。</span><br><span class="line">事实：人工智能包含许多技术。在具体的语境中，如果一个系统拥有语音识别、图像识别、检索、自然语言处理、机器翻译、机器学习中的一个或几个能力，那么我们就认为它拥有一定的人工智能。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">误解5：通用型人工智能将在短期内到来。</span><br><span class="line">事实：短期内，通用型人工智能不是产业界主流的研究方向。我们更有可能看到深度学习技术在各个领域深耕。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">误解6：人工智能可以独立、自主地产生意识。</span><br><span class="line">事实：目前的人工智能离通用型人工智能还有一段距离。工具型人工智能无法产生意识。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">误解7：人工智能会在短期内取代人类的工作。</span><br><span class="line">事实：人工智能在不同领域的应用成熟度差别很大，虽然现在人工智能已经能在围棋领域战胜世界上最强的职业棋手，但可能还需要50年才能自主创作出畅销作品。工具型人工智能和人类的能力在许多情境下是互补的，短期内更有可能出现的是人机协作的状态。</span><br></pre></td></tr></table></figure><h3 id="资本思路"><a href="#资本思路" class="headerlink" title="资本思路"></a>资本思路</h3><p><img src="/images/pasted-13.png" alt="upload successful"></p><h3 id="入场思路"><a href="#入场思路" class="headerlink" title="入场思路"></a>入场思路</h3><ul><li>选择成熟技术 结合 已有行业特点 重构新的商业模式。</li><li>选择未成熟技术 深耕技术。</li></ul><h3 id="参考书目"><a href="#参考书目" class="headerlink" title="参考书目"></a>参考书目</h3><ul><li>人工智能 腾讯研究院</li><li>AI.未来 李开复</li><li>人工智能 李开复</li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>财务报表</title>
      <link href="/2019/02/13/%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/"/>
      <url>/2019/02/13/%E8%B4%A2%E5%8A%A1%E6%8A%A5%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="三张表"><a href="#三张表" class="headerlink" title="三张表"></a>三张表</h2><p><img src="/images/pasted-3.png" alt="upload successful"></p><h3 id="第一步、利润表"><a href="#第一步、利润表" class="headerlink" title="第一步、利润表"></a>第一步、利润表</h3><p>利润表更多的是给现金流量表和资产负债表提供输入，所以利润表比较容易建立。为了建立利润表，必须对影响利润表的一系列因素进行假设。一些最基本的假设如下：</p><p><img src="/images/pasted-4.png" alt="upload successful"></p><h4 id="指标关系"><a href="#指标关系" class="headerlink" title="指标关系"></a>指标关系</h4><ul><li>销售额增长 ：模型中最底层的预测指标。</li><li>边际贡献（Tcm）： 销售收入 - 变动成本</li><li>运营杠杆 ：又称营业杠杆或营运杠杆，反映销售和息税前盈利的杠杆关系。指在企业生产经营中由于存在固定成本而使利润变动率大于产销量变动率的规律；计算公式 息税前利润变动率/产销业务量变动率；<br>  DOL=（EBIT+F）/EBIT 或者 DOL=Tcm/（Tcm-F）<br>  F 即固定成本<br>  EBIT 为息税前收益  </li><li>净利润增长率 ：(当期净利润-上期净利润)/上期净利润*100%</li><li>净资产收益率（ROE）：净资产收益率又称股东权益报酬率/净值报酬率/权益报酬率/权益利润率/净资产利润率，是净利润与平均股东权益的百分比</li></ul><h4 id="质量监控指标"><a href="#质量监控指标" class="headerlink" title="质量监控指标"></a>质量监控指标</h4><h5 id="运营杠杆"><a href="#运营杠杆" class="headerlink" title="运营杠杆"></a>运营杠杆</h5><p>一般来讲，一个公司的运营杠杆相对固定。如果预测未来公司的各项数字，发现运营杠杆与历史相比有重大变化，这时候就要重新检查各种假设，看是不是有不合理的地方。一般模型假设都没有深入的固定成本与费用和可变成本与费用的分析，很容易把运营杠杆的效果就忽视了</p><h5 id="净利润增长率与ROE"><a href="#净利润增长率与ROE" class="headerlink" title="净利润增长率与ROE"></a>净利润增长率与ROE</h5><p>在盈利能力与资本结构不变的情况下，ROE就是净利增长的极限。如果净利润增长远远超过历史平均ROE水平，那么这个公司一定有重大的改变，比如增发或借贷这样的资本结构变化，或者盈利能力的大幅度提高。如果没有这些重大改变，肯定有一些假设是错误的。 </p><h3 id="第二步、资产负债表"><a href="#第二步、资产负债表" class="headerlink" title="第二步、资产负债表"></a>第二步、资产负债表</h3><p><img src="/images/pasted-5.png" alt="upload successful"></p><h4 id="指标关系-1"><a href="#指标关系-1" class="headerlink" title="指标关系"></a>指标关系</h4><ul><li>现金部分（<strong>现金流量表</strong>）</li><li>借款 ：现金流量表的筹资部分</li><li>固定资产及无形资产 ：现金流量表的经营现金流和投资现金流</li><li>股东权益：现金流量表的筹资部分</li><li>存留收益：利润表中的净利润（<strong>利润表</strong>）  </li></ul><h4 id="质量监控指标-1"><a href="#质量监控指标-1" class="headerlink" title="质量监控指标"></a>质量监控指标</h4><h5 id="现金转换周期"><a href="#现金转换周期" class="headerlink" title="现金转换周期"></a>现金转换周期</h5><p>现金转换周期=存货转换期间+应收账款转换期间－应付账款递延期间=生产经营周期－应付账款平均付款期</p><h3 id="第三步、现金流量表"><a href="#第三步、现金流量表" class="headerlink" title="第三步、现金流量表"></a>第三步、现金流量表</h3><p><img src="/images/pasted-6.png" alt="upload successful"></p><h4 id="指标关系-2"><a href="#指标关系-2" class="headerlink" title="指标关系"></a>指标关系</h4><h4 id="质量监控指标-2"><a href="#质量监控指标-2" class="headerlink" title="质量监控指标"></a>质量监控指标</h4><ul><li>资产周转率 </li><li>财务杠杆</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/images/pasted-7.png" alt="upload successful"></p>]]></content>
      
      
      <categories>
          
          <category> 财务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 财务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>熟悉 IntelliJ IDEA</title>
      <link href="/2019/02/13/%E6%B8%90%E8%BF%9B%E6%AD%A5%E9%AA%A4/"/>
      <url>/2019/02/13/%E6%B8%90%E8%BF%9B%E6%AD%A5%E9%AA%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="安装IntelliJ"><a href="#安装IntelliJ" class="headerlink" title="安装IntelliJ"></a>安装IntelliJ</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><pre><code>http://www.jetbrains.com/idea/download/</code></pre><h3 id="激活教程"><a href="#激活教程" class="headerlink" title="激活教程"></a>激活教程</h3><pre><code>http://idea.lanyus.com/</code></pre><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><pre><code>Grep ConsoleFindBugsCheckStyleGsonFormatJrebelAceJumpmarkdownKey promoter.ignoreMavenAlibaba Java Coding CamelCaseGradle Dependencies FormatterGradle Dependencies HelperLiveEditTranslation</code></pre><h2 id="熟悉快捷键"><a href="#熟悉快捷键" class="headerlink" title="熟悉快捷键"></a>熟悉快捷键</h2><h3 id="ctrl"><a href="#ctrl" class="headerlink" title="ctrl+?"></a>ctrl+?</h3><ul><li>ctrl+E,打开最近文件</li><li>ctrl+J,快速打开帮助文档</li><li>ctrl+enter ,生成代码</li><li>ctrl+O ,覆盖方法</li><li>ctrl+I,实现接口方法</li><li>ctrl+R,运行程序</li><li>ctrl+D,调试程序 </li></ul><h3 id="ctrl-alt"><a href="#ctrl-alt" class="headerlink" title="ctrl+alt+?"></a>ctrl+alt+?</h3><ul><li>ctrl+alt+o，移除未使用 imports</li><li>ctrl+alt+I, 调整光标所在行缩进</li><li>ctrl+alt+R ,列出可执行菜单</li><li>ctrl+alt+H, 方法调用记录</li></ul><h2 id="调试Java"><a href="#调试Java" class="headerlink" title="调试Java"></a>调试Java</h2><h3 id="打印gc信息"><a href="#打印gc信息" class="headerlink" title="打印gc信息"></a>打印gc信息</h3><p>添加Vm参数：</p><ul><li>-verbose:gc    设置垃圾回收日志打印的文件，文件名称可以自定义） </li><li>-XX:+PrintGCTimeStamps （打印垃圾回收时间信息时的时间格式）</li><li>-XX:+PrintGCDetails（打印垃圾回收详情） </li><li>-Xmx64m （限制内存大小，模拟内存溢出时用）<br>示例：<br><img src="/images/pasted-88.png" alt="upload successful"></li></ul><h3 id="JVM的GC日志的主要参数包括如下几个："><a href="#JVM的GC日志的主要参数包括如下几个：" class="headerlink" title="JVM的GC日志的主要参数包括如下几个："></a>JVM的GC日志的主要参数包括如下几个：</h3><ul><li>-XX:+PrintGC 输出GC日志</li><li>-XX:+PrintGCDetails 输出GC的详细日志</li><li>-XX:+PrintGCTimeStamps 输出GC的时间戳（以基准时间的形式）</li><li>-XX:+PrintGCDateStamps 输出GC的时间戳（以日期的形式，如 2013-05-04T21:53:59.234+0800）</li><li>-XX:+PrintHeapAtGC 在进行GC的前后打印出堆的信息</li><li>-Xloggc:../logs/gc.log 日志文件的输出路径</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java基本数据类型</title>
      <link href="/2018/12/02/java%E7%9A%84%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/12/02/java%E7%9A%84%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>原码、反码和补码是计算机存储数字的编码方式（表示方法）。 </li><li>ASCII码、utf-8和utf-16是计算机存储字符的编码方式。</li></ol><h2 id="你需要了解的存储单位"><a href="#你需要了解的存储单位" class="headerlink" title="你需要了解的存储单位"></a>你需要了解的存储单位</h2><table><thead><tr><th>符号</th><th>中文</th><th>解释</th></tr></thead><tbody><tr><td>b (bit)</td><td>比特，位</td><td>存放一位二进制数，即 0 或 1，最小的存储单位</td></tr><tr><td>B (Byte)</td><td>字节</td><td>1B = 8b</td></tr><tr><td>KB</td><td>KB</td><td>1KB = 2^10B = 1024B</td></tr><tr><td>MB</td><td>兆</td><td>1MB = 2^20B = 1024 * 1KB</td></tr><tr><td>GB</td><td>G</td><td>1GB = 2^30B = 1024 * 1MB</td></tr><tr><td>TB</td><td>T</td><td>1TB = 2^40B = 1024 * 1GB</td></tr></tbody></table><ul><li>存储设备一般以B为常用单位；</li><li>宽带传输速度是以Kb为单位，与实际存储单位KB有所不同。（我办理了一个100M带宽，实际速度不会超过100/8=12.5M）</li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><table><thead><tr><th>类型</th><th>字节数</th><th>位数</th><th>最小</th><th>最大</th></tr></thead><tbody><tr><td>byte</td><td>1Byte</td><td>8Bit</td><td>-2^7(-128)</td><td>2^8-1(127)</td></tr><tr><td>short</td><td>2Byte</td><td>2 * 8Bit</td><td>-2^15(-32768)</td><td>2^15-1(32768)</td></tr><tr><td>int</td><td>4Byte</td><td>4* 8Bit</td><td>-2^31</td><td>2^31-1</td></tr><tr><td>long</td><td>8Byte</td><td>8 * 8Bit</td><td>-2^63</td><td>2^63-1</td></tr><tr><td>float</td><td>4Byte</td><td>4 * 8Bit</td><td>-2^</td><td></td></tr><tr><td>double</td><td>8Byte</td><td>8* 8Bit</td><td></td><td></td></tr><tr><td>char</td><td>2Byte</td><td>2* 8Bit</td><td>\u0000</td><td>\uffff</td></tr><tr><td>boolean</td><td>0</td><td>1bit</td><td>0</td><td>1</td></tr></tbody></table><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ol><li>float</li><li>double</li></ol><blockquote><p>在数学中，特别是在计算机相关的数字（浮点数）问题的表述中，有一个基本表达法：<br>value of floating-point = significand x base ^ exponent , with sign<br>译为中文表达即为：<br>（浮点）数值 =      尾数    ×    底数 ^ 指数，（附加正负号）<br>于是，float的指数范围为-127~128，而double的指数范围  为-1023~1024，并且指数位是按补码的形式来划分的。其中负指数决定了浮点数所能表达的绝对值最小的数；而正指数决定了浮点数所能表达的绝对值最大的数，也即决定了浮点数的取值范围。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[高位] ------------------------&gt; [低位]                      </span><br><span class="line">[*][********][***********************]                   </span><br><span class="line"> ↑                                                       </span><br><span class="line">1符号位  ↑                                                  </span><br><span class="line">       8位指数              ↑                                 </span><br><span class="line">                 23位尾数(基数是【1.&lt;尾数&gt;】)                        </span><br><span class="line"> 比如：                                                       </span><br><span class="line"> Float Value:0.75                                          </span><br><span class="line"> IEEE Memory:0-01111110-10000000000000000000000            </span><br><span class="line"> 符号位是：正数，                                                  </span><br><span class="line"> 指数部分是：01111110，即126，根据指数的规则-127~128，0在中间.与char不同。         </span><br><span class="line">          也就是01111111代表数字0。 01111110就是-1(126-127=-1)       </span><br><span class="line"> 基数就是1.100000000                                           </span><br><span class="line"> 二进制值就是：1.1 * 2^-1 = 0.11                                  </span><br><span class="line"> 十进制表示就是:2^-1 + 2^-2 = 0.5 + 0.25 = 0.75</span><br></pre></td></tr></table></figure><hr><ol><li>原码：符号位+数值的绝对值。<br>（1）以8位为例，1的原码为 0000 0001，-1的原码为 1000 0001。<br>（2）取值范围：11111111 ~ 01111111，即：-127 ~ 127。</li><li>反码：正数的反码是原码，负数的反码是在原码的基础上符号位不变，其他位取反的结果。<br>以8位为例：1的反码为 0000 0001，-1的反码为 1111 1110。</li><li>补码：正数的补码是原码，负数的补码是在原码的基础上符号位不变，其他位取反再加一，即：反码+1。<br>以8位为例：1的补码为 0000 0001，-1的补码为 1111 1111。</li><li>补码存在的意义<br>（1）1 - 1 = 1 + (-1) = (0000 0001)(原) + (1000 0001)(原) = (1000 0010)(原) = -2。错误<br>（2）3 + 5 = (0000 0011)(原) + (0000 0101)(原) = (0000 1000)(原) = 8。正确<br>（3）反码相减：3 - 4 = (0000 0011)(原) + (1000 0100)(原) = (0000 0011)(反) + (1111 1011)(反) = (1111 1110)(反) = (1000 0001)(原) = -1。正确<br>（4）反码相减：5 - 3 = (0000 0101)(原) + (1000 0011)(原) = (0000 0101)(反) + (1111 1100)(反) + 1（循环进位）= (0000 0010)(反) = (0000 0010)(原) = 2。正确<br>（5）1 - 1 = 1 + (-1) = (0000 0001)(反) + (1111 1110)(反) = (1111 1111)(反) = (1000 0000) = -0。<br>（6）1 - 1 = (0000 0001)(原) + (1000 0001)(原) = (0000 0001)(补) + (1111 1111)(补)= (0000 0000) (补) = (0000 0000) (原) = 0。<br>（7）-1-127 = (1000 0001)(原) + (1111 1111)(原) = (1111 1111)(补) + (1000 0001)(补) = (1000 0000)(补) = -128。<br>A、由（1）和（2）可知，原码相加是正确的，但是相减是错误的。<br>B、由（3）和（4）可知，反码相加减都是正确的。<br>C、但是由（5）可知，1-1的反码结果为-0，这个结果在数学上是没有意义的，为了解决这个问题，引入了补码。因为补码是在反码的基础上加1，故补码的加减是没有问题的，关键是1-1了。由（6）可知，补码完美的解决了1-1等于-0的尴尬局面，直接得到0。<br>D、由（7）可知，计算机底层算法规定了补码1000 0000 = -128。这也就导致了补码的取值范围由-127~127变为-128~127。</li></ol><p>总结：<br>（1）由于原码相减结果不对，故使用了反码。但是反码1-1得到的结果是-0，这个在数学上是无意义的，为了导出1-1=0的正确结果，故使用了补码，同时规定补码1000 0000 = -128，从而可以将-0表示为-128，拓展了一个表示位，故8位二进制取值范围为-128~127。<br>（2）这里再次强调，在计算机中，数据都是以正数的补码的形式存在的。正数的补码是其本身，负数则是以其本身的正数的补码的形式存在的。<br>栗子：-123在计算机中的存储的值是1111 1011 -&gt; 1000 0100 -&gt; 1000 0101。</p><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><p>占用4个字节，即：32b，有符号位：从左数第一位。<br>取值范围：-2^31 ~ 2^31-1。<br>原因：0 代表 +0，-0 代表 -2^31，故负数比整数多一个。<br>数据以补码的形式存放在内存中。<br>对于+0和-0在内存中的存储方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int _tmain(int argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    int i = +0;</span><br><span class="line">    int k = -0;</span><br><span class="line">    int *pi = &amp;i;</span><br><span class="line">    int *pk = &amp;k;</span><br><span class="line">    char c = &apos;1&apos;;</span><br><span class="line">    char *pc = &amp;c;</span><br><span class="line">    cout&lt;&lt;&quot;int: &quot;&lt;&lt;sizeof(int)&lt;&lt;&quot; byte&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;unsigned int: &quot;&lt;&lt;sizeof(unsigned int)&lt;&lt;&quot; byte&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;float: &quot;&lt;&lt;sizeof(float)&lt;&lt;&quot; byte&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;double: &quot;&lt;&lt;sizeof(double)&lt;&lt;&quot; byte&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;char: &quot;&lt;&lt;sizeof(char)&lt;&lt;&quot; byte&quot;&lt;&lt;endl;</span><br><span class="line">    cin.get();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="unsigned-int"><a href="#unsigned-int" class="headerlink" title="unsigned int"></a>unsigned int</h3><p>占用4个字节，即：32b，无符号位。<br>取值范围：0 ~ 2^32。<br>数据以补码的形式存放在内存中。</p><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><ol><li>浮点数在计算机中用科学计数法表示，栗：1.0100011*2^7。 </li><li>符号位：“+”或者“-”。 </li><li>指数部分：2的幂指数，栗子中的“7”。 </li><li>尾数部分：最高位为“1”的底数，栗子中的“10100011”。 </li><li>栗子：15.987在计算机中存储方式。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（1）15.987的整数部分原码：1111。</span><br><span class="line">（2）15.987的小数部分原码：11111100……此处省略11位。</span><br><span class="line">（3）经过上述计算，15.987的二进制为1111.11111100……，用科学计数法表示为1.11111111100……*2^3。 </span><br><span class="line">（4）指数部分采用移位存储的方式，即3+（2^7-1） = 130。其二进制：10000010。 </span><br><span class="line">（5）尾数部分省略科学计数法的整数部分！！（因为肯定是1）（隐藏位） </span><br><span class="line">（6）15.987在内存中的存放的内容为： </span><br><span class="line">符号位：0（共1位）。 </span><br><span class="line">指数部分：10000010（共8位）。 </span><br><span class="line">尾数部分：111111111000……（共23位）。 </span><br><span class="line">（7）写成完整的二进制：0100 0001 0111 1111 1100 0…… </span><br><span class="line">（8）写成16进制：41 7F C……。 </span><br><span class="line">（9）因为Intel的架构的字节序是小端序，则真正的存放内容为……C 7F 41。</span><br></pre></td></tr></table></figure></li></ol><h3 id="double"><a href="#double" class="headerlink" title="double"></a>double</h3><p>原理同上！</p><h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><p>在内存中以ASCII码的形式存储。<br>栗子：<br><img src="/images/pasted-2.png" alt="img"><br>代码中字符是“1”，ASCII码为49，转换为16进制为31。</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>移位存储：<br>在存储浮点数时，若指数部分若不使用移位存储技术，则会导致0有两种表示方式：1000 000 0和0000 000 0。所以，为了最大化利用价值，同时保留正负性，在原数据的基础上加127，其结果如下：<br>0000 000 0~0111 111 1代表着-127~0。<br>1000 000 0~1111 111 1代表着1~127。<br>这样正负指数均可表示的数量保持一致。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> java数据类型 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>人生处世</title>
      <link href="/2018/11/30/%E4%BA%BA%E7%94%9F%E5%A4%84%E4%B8%96/"/>
      <url>/2018/11/30/%E4%BA%BA%E7%94%9F%E5%A4%84%E4%B8%96/</url>
      
        <content type="html"><![CDATA[<ol><li>凡事顺其自然。遇事之时泰然，成功之时淡然，失败之时坦然</li><li>岁月本长，而亡者自促；天地本宽，而鄙者自隘；风花雪月本闲，而扰攘者自冗。</li><li>风来疏竹，风过而竹不留声；雁渡寒潭，雁去而谭不留影。故君子事来而心始现，事去而心随空。</li><li>鱼得水逝，而相忘乎水，鸟乘风飞，而不知有风。</li><li>交友须带三分侠气，做人要存一点素心。</li><li>邀千百人之欢，不如释一人之怨；希千百事之荣，不如免一事之丑。</li><li>世态有炎凉，而我无嗔喜；世味有浓淡，而我无欣厌；</li><li>觉人之诈，不形于言；受人之侮，不动于色。</li><li>遍阅人情，始识疏狂之足贵；备尝世味，方知淡泊之为真。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java简介</title>
      <link href="/2018/11/29/java%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/11/29/java%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>java是开发语言，你需要掌握它的语法规则。</p><p>jdk(Java Development Kit)是用java语言写的sdk，你需要了解它提供的能力。</p><p>JVM java虚拟机</p><h2 id="有什么特点"><a href="#有什么特点" class="headerlink" title="有什么特点"></a>有什么特点</h2><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象出现之前的编程方式被称作：结构化编程（面向过程编程）。在我看来本质是方法组合方式的变化，面向对象编程更接近现实生活。</p><p>结构化编程：针对问题设计解决问题的步骤，第一步、第二步、第三步…..等，将这些步骤以方法（function）为载体组合成为一个结构。</p><p>面向对象编程：针对问题设计解决问题步骤，第一步 由谁做什么，第二步由谁做什么…..等，最后将 “谁” 定义出来 且将他们做什么以function的形式声明到它的结构体上面。</p><p>对比：行为关联给对象，可以更好地管理行为。</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>以对象为主体，对象内的东西（属性、方法）与其它对象互相独立。</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>就像你可以集成你父亲的财产，手艺一样。但是你跟你父亲真的是两个独立主体。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>你跟你兄弟姐妹都继承了你父亲的手艺但多少有些不同就产生了多样性。</p><p>高级语言之所以高级是因为：他的理念越来越接近你与人交往沟通方式。面向对象是很重要的里程碑，它是定义了对象并且给予对象拥有万物一样的一些特性：个体独立，可繁衍等。</p><p><img src="/images/pasted-1.png" alt="高级语言的位置"></p><h3 id="与平台无关"><a href="#与平台无关" class="headerlink" title="与平台无关"></a>与平台无关</h3><p>先编译后执行，编写的程序统一由javac 编译成字节码class文件，然后在jvm中解释执行。<br><img src="/images/pasted-0.png" alt="java执行过程"></p><h3 id="其它同级别高级语言特点"><a href="#其它同级别高级语言特点" class="headerlink" title="其它同级别高级语言特点"></a>其它同级别高级语言特点</h3><h4 id="数据结构更直观简单"><a href="#数据结构更直观简单" class="headerlink" title="数据结构更直观简单"></a>数据结构更直观简单</h4><h4 id="自动垃圾回收"><a href="#自动垃圾回收" class="headerlink" title="自动垃圾回收"></a>自动垃圾回收</h4><h4 id="安全、可靠、多线程-等"><a href="#安全、可靠、多线程-等" class="headerlink" title="安全、可靠、多线程 等"></a>安全、可靠、多线程 等</h4><h2 id="你该做什么"><a href="#你该做什么" class="headerlink" title="你该做什么"></a>你该做什么</h2><ul><li>掌握java基础语法</li><li>熟悉SDK提供的能力</li><li>熟悉Jre提供的能力</li><li>深入JVM的原理<ul><li>内存管理</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>选定&amp;搭建博客</title>
      <link href="/2018/11/28/%E9%80%89%E5%AE%9A-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/11/28/%E9%80%89%E5%AE%9A-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="常见博客系统"><a href="#常见博客系统" class="headerlink" title="常见博客系统"></a>常见博客系统</h3><ol><li>wordpress</li><li>Zblog</li><li>Typecho</li><li>hexo</li></ol><h3 id="应该选择哪个"><a href="#应该选择哪个" class="headerlink" title="应该选择哪个"></a>应该选择哪个</h3><p>选择是恐惧的，所以我总在尝试进行降维选择。这里不会对几个主流博客进行一一对比了，问自己两个问题即可：</p><ol><li>工具：你喜欢用word写？还是用md语法写？</li><li>成本：你准备投入多少钱？</li></ol><p>结论：</p><ol><li>工具选择md语法，别犹豫直接选择 hexo  因为可以是0成本</li><li>工具选择word，别犹豫直接选择wordpress 成本为100+/年</li><li>你想用word 又想降低成本，选择云平台：简书 等</li></ol><h3 id="搭建hexo平台"><a href="#搭建hexo平台" class="headerlink" title="搭建hexo平台"></a>搭建hexo平台</h3><h4 id="步骤概览"><a href="#步骤概览" class="headerlink" title="步骤概览"></a>步骤概览</h4><ol><li>安装node</li><li>安装git</li><li>安装hexo</li><li>注册 coding 账号</li><li>注册 github 账号（非必须）</li><li>买域名（非必须）</li><li>开通云主机（非必须）</li></ol><h4 id="步骤拆解"><a href="#步骤拆解" class="headerlink" title="步骤拆解"></a>步骤拆解</h4><h5 id="安装node-已经安装的忽略"><a href="#安装node-已经安装的忽略" class="headerlink" title="安装node(已经安装的忽略)"></a>安装node(已经安装的忽略)</h5><ul><li><p>MAC环境</p><p>  <a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">安装homebrew</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://nodejs.org/zh-cn/download/package-manager" target="_blank" rel="noopener">安装node</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure></p><ul><li><p>WIN环境</p><p>  <a href="https://nodejs.org/zh-cn/download/package-manager" target="_blank" rel="noopener">安装node</a></p></li></ul><h5 id="安装GIT"><a href="#安装GIT" class="headerlink" title="安装GIT"></a>安装GIT</h5><ul><li><p>MAC环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure></li><li><p>WIN环境</p><p>  <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000" target="_blank" rel="noopener">参考安装教程</a></p></li></ul><h5 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h5><pre><code>npm install hexo-cli -ghexo init blogcd blognpm installhexo server</code></pre><p>浏览器打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以访问你刚才安装的hexo了</p><h5 id="搞定Coding环境"><a href="#搞定Coding环境" class="headerlink" title="搞定Coding环境"></a>搞定Coding环境</h5><ul><li><a href="https://coding.net/" target="_blank" rel="noopener">注册</a></li><li><a href="https://coding.net/user/projects" target="_blank" rel="noopener">创建一个项目</a></li><li>配置Page属性，项目—&gt;代码—&gt;Page服务<br>到此，你会得到一个xxx.coding.me/项目名称 网络地址。</li></ul><h5 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h5><ul><li>生成静态文件<pre><code>hexo generate</code></pre></li><li>配置发布地址<pre><code>_config.yml deploy:    type: git    repo:      coding: git@git.coding.net:xxx/xxx.git,master    name:your name     email: doouxiaoyu@163.com</code></pre></li><li>配置GIT账号<pre><code>git config --global user.namegit config --global user.email</code></pre></li><li><p>配置GIT证书</p><pre><code>#生成证书#配置coding 部署公钥</code></pre></li><li><p>发布文件</p><pre><code>hexo deploy</code></pre></li></ul><p>到此，你访问你的coding 地址就会看到你的hexo文章信息了。</p><p>这只是开始，你还得学习hexo的以下内容：</p><ol><li>模版 </li><li>主题</li><li>插件</li></ol><h5 id="添加github支持"><a href="#添加github支持" class="headerlink" title="添加github支持"></a>添加github支持</h5><p><strong>目的</strong><br>github功能跟coding一样一样的，增加它的目的有两个</p><ol><li>不要钱，也不增加工作量</li><li>有自己域名的可以 配置中国访问coding，外国访问 github内容。</li></ol><p><strong>开通步骤</strong> </p><ul><li>注册github账号</li><li>创建项目</li><li>开通page功能</li><li>配置公钥证书</li><li>修改hexo博客配置文件_config.yml<pre><code>deploy:    type: git    repo:      coding: git@git.coding.net:xxx/xxx.git,master      github:xxxxxxx,master    name:your name     email: xxx@163.com</code></pre></li></ul><h5 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h5><p><strong>目的</strong></p><ol><li>牛逼</li><li>方便</li></ol><h5 id="开通云主机"><a href="#开通云主机" class="headerlink" title="开通云主机"></a>开通云主机</h5><p><strong>目的</strong></p><ol><li>牛逼</li><li>hexo 部署到云主机上面可以随时写文字</li><li>可以直接部署自己的博客从而不再依赖coding，github。访问速度更快</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>作战计划</title>
      <link href="/2018/11/28/%E4%BD%9C%E6%88%98%E8%AE%A1%E5%88%92/"/>
      <url>/2018/11/28/%E4%BD%9C%E6%88%98%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><h4 id="选定-amp-搭建好博客环境"><a href="#选定-amp-搭建好博客环境" class="headerlink" title="选定&amp;搭建好博客环境"></a><strong><em>选定&amp;搭建好博客环境</em></strong></h4><h4 id="制定渐进步骤"><a href="#制定渐进步骤" class="headerlink" title="制定渐进步骤"></a><strong><em>制定渐进步骤</em></strong></h4><h3 id="二、java基础"><a href="#二、java基础" class="headerlink" title="二、java基础"></a>二、java基础</h3><h4 id="java简介"><a href="#java简介" class="headerlink" title="java简介"></a>java简介</h4><h4 id="java的基础数据类型"><a href="#java的基础数据类型" class="headerlink" title="java的基础数据类型"></a>java的基础数据类型</h4><h4 id="java数据结构"><a href="#java数据结构" class="headerlink" title="java数据结构"></a>java数据结构</h4><h4 id="待完善……"><a href="#待完善……" class="headerlink" title="待完善……"></a>待完善……</h4><h3 id="三、常见系统架构"><a href="#三、常见系统架构" class="headerlink" title="三、常见系统架构"></a>三、常见系统架构</h3><h4 id="待完善……-1"><a href="#待完善……-1" class="headerlink" title="待完善……"></a>待完善……</h4><h3 id="四、常见问题-amp-解决方案"><a href="#四、常见问题-amp-解决方案" class="headerlink" title="四、常见问题&amp;解决方案"></a>四、常见问题&amp;解决方案</h3><h4 id="等待完善"><a href="#等待完善" class="headerlink" title="等待完善"></a>等待完善</h4><h3 id="五、常见面试题"><a href="#五、常见面试题" class="headerlink" title="五、常见面试题"></a>五、常见面试题</h3><h4 id="待完善……-2"><a href="#待完善……-2" class="headerlink" title="待完善……"></a>待完善……</h4>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> plan </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/13/hello-world/"/>
      <url>/2018/11/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
