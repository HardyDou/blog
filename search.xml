<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>java的本础数据类型</title>
      <link href="/2018/12/02/java%E7%9A%84%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/12/02/java%E7%9A%84%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>原码、反码和补码是计算机存储数字的编码方式（表示方法）。 </li><li>ASCII码、utf-8和utf-16是计算机存储字符的编码方式。</li></ol><h2 id="你需要了解的存储单位"><a href="#你需要了解的存储单位" class="headerlink" title="你需要了解的存储单位"></a>你需要了解的存储单位</h2><table><thead><tr><th>符号</th><th>中文</th><th>解释</th></tr></thead><tbody><tr><td>b (bit)</td><td>比特，位</td><td>存放一位二进制数，即 0 或 1，最小的存储单位</td></tr><tr><td>B (Byte)</td><td>字节</td><td>1B = 8b</td></tr><tr><td>KB</td><td>KB</td><td>1KB = 2^10B = 1024B</td></tr><tr><td>MB</td><td>兆</td><td>1MB = 2^20B = 1024 * 1KB</td></tr><tr><td>GB</td><td>G</td><td>1GB = 2^30B = 1024 * 1MB</td></tr><tr><td>TB</td><td>T</td><td>1TB = 2^40B = 1024 * 1GB</td></tr></tbody></table><ul><li>存储设备一般以B为常用单位；</li><li>宽带传输速度是以Kb为单位，与实际存储单位KB有所不同。（我办理了一个100M带宽，实际速度不会超过100/8=12.5M）</li></ul><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><table><thead><tr><th>类型</th><th>字节数</th><th>位数</th><th>最小</th><th>最大</th></tr></thead><tbody><tr><td>byte</td><td>1Byte</td><td>8Bit</td><td>-2^7(-128)</td><td>2^8-1(127)</td></tr><tr><td>short</td><td>2Byte</td><td>2 * 8Bit</td><td>-2^15(-32768)</td><td>2^15-1(32768)</td></tr><tr><td>int</td><td>4Byte</td><td>4* 8Bit</td><td>-2^31</td><td>2^31-1</td></tr><tr><td>long</td><td>8Byte</td><td>8 * 8Bit</td><td>-2^63</td><td>2^63-1</td></tr><tr><td>float</td><td>4Byte</td><td>4 * 8Bit</td><td>-2^</td><td></td></tr><tr><td>double</td><td>8Byte</td><td>8* 8Bit</td><td></td><td></td></tr><tr><td>char</td><td>2Byte</td><td>2* 8Bit</td><td>\u0000</td><td>\uffff</td></tr><tr><td>boolean</td><td>0</td><td>1bit</td><td>0</td><td>1</td></tr></tbody></table><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ol><li>float</li><li>double</li></ol><blockquote><p>在数学中，特别是在计算机相关的数字（浮点数）问题的表述中，有一个基本表达法：<br>value of floating-point = significand x base ^ exponent , with sign<br>译为中文表达即为：<br>（浮点）数值 =      尾数    ×    底数 ^ 指数，（附加正负号）<br>于是，float的指数范围为-127~128，而double的指数范围  为-1023~1024，并且指数位是按补码的形式来划分的。其中负指数决定了浮点数所能表达的绝对值最小的数；而正指数决定了浮点数所能表达的绝对值最大的数，也即决定了浮点数的取值范围。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[高位] ------------------------&gt; [低位]                      </span><br><span class="line">[*][********][***********************]                   </span><br><span class="line"> ↑                                                       </span><br><span class="line">1符号位  ↑                                                  </span><br><span class="line">       8位指数              ↑                                 </span><br><span class="line">                 23位尾数(基数是【1.&lt;尾数&gt;】)                        </span><br><span class="line"> 比如：                                                       </span><br><span class="line"> Float Value:0.75                                          </span><br><span class="line"> IEEE Memory:0-01111110-10000000000000000000000            </span><br><span class="line"> 符号位是：正数，                                                  </span><br><span class="line"> 指数部分是：01111110，即126，根据指数的规则-127~128，0在中间.与char不同。         </span><br><span class="line">          也就是01111111代表数字0。 01111110就是-1(126-127=-1)       </span><br><span class="line"> 基数就是1.100000000                                           </span><br><span class="line"> 二进制值就是：1.1 * 2^-1 = 0.11                                  </span><br><span class="line"> 十进制表示就是:2^-1 + 2^-2 = 0.5 + 0.25 = 0.75</span><br></pre></td></tr></table></figure><hr><ol><li>原码：符号位+数值的绝对值。<br>（1）以8位为例，1的原码为 0000 0001，-1的原码为 1000 0001。<br>（2）取值范围：11111111 ~ 01111111，即：-127 ~ 127。</li><li>反码：正数的反码是原码，负数的反码是在原码的基础上符号位不变，其他位取反的结果。<br>以8位为例：1的反码为 0000 0001，-1的反码为 1111 1110。</li><li>补码：正数的补码是原码，负数的补码是在原码的基础上符号位不变，其他位取反再加一，即：反码+1。<br>以8位为例：1的补码为 0000 0001，-1的补码为 1111 1111。</li><li>补码存在的意义<br>（1）1 - 1 = 1 + (-1) = (0000 0001)(原) + (1000 0001)(原) = (1000 0010)(原) = -2。错误<br>（2）3 + 5 = (0000 0011)(原) + (0000 0101)(原) = (0000 1000)(原) = 8。正确<br>（3）反码相减：3 - 4 = (0000 0011)(原) + (1000 0100)(原) = (0000 0011)(反) + (1111 1011)(反) = (1111 1110)(反) = (1000 0001)(原) = -1。正确<br>（4）反码相减：5 - 3 = (0000 0101)(原) + (1000 0011)(原) = (0000 0101)(反) + (1111 1100)(反) + 1（循环进位）= (0000 0010)(反) = (0000 0010)(原) = 2。正确<br>（5）1 - 1 = 1 + (-1) = (0000 0001)(反) + (1111 1110)(反) = (1111 1111)(反) = (1000 0000) = -0。<br>（6）1 - 1 = (0000 0001)(原) + (1000 0001)(原) = (0000 0001)(补) + (1111 1111)(补)= (0000 0000) (补) = (0000 0000) (原) = 0。<br>（7）-1-127 = (1000 0001)(原) + (1111 1111)(原) = (1111 1111)(补) + (1000 0001)(补) = (1000 0000)(补) = -128。<br>A、由（1）和（2）可知，原码相加是正确的，但是相减是错误的。<br>B、由（3）和（4）可知，反码相加减都是正确的。<br>C、但是由（5）可知，1-1的反码结果为-0，这个结果在数学上是没有意义的，为了解决这个问题，引入了补码。因为补码是在反码的基础上加1，故补码的加减是没有问题的，关键是1-1了。由（6）可知，补码完美的解决了1-1等于-0的尴尬局面，直接得到0。<br>D、由（7）可知，计算机底层算法规定了补码1000 0000 = -128。这也就导致了补码的取值范围由-127~127变为-128~127。</li></ol><p>总结：<br>（1）由于原码相减结果不对，故使用了反码。但是反码1-1得到的结果是-0，这个在数学上是无意义的，为了导出1-1=0的正确结果，故使用了补码，同时规定补码1000 0000 = -128，从而可以将-0表示为-128，拓展了一个表示位，故8位二进制取值范围为-128~127。<br>（2）这里再次强调，在计算机中，数据都是以正数的补码的形式存在的。正数的补码是其本身，负数则是以其本身的正数的补码的形式存在的。<br>栗子：-123在计算机中的存储的值是1111 1011 -&gt; 1000 0100 -&gt; 1000 0101。</p><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><p>占用4个字节，即：32b，有符号位：从左数第一位。<br>取值范围：-2^31 ~ 2^31-1。<br>原因：0 代表 +0，-0 代表 -2^31，故负数比整数多一个。<br>数据以补码的形式存放在内存中。<br>对于+0和-0在内存中的存储方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int _tmain(int argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    int i = +0;</span><br><span class="line">    int k = -0;</span><br><span class="line">    int *pi = &amp;i;</span><br><span class="line">    int *pk = &amp;k;</span><br><span class="line">    char c = &apos;1&apos;;</span><br><span class="line">    char *pc = &amp;c;</span><br><span class="line">    cout&lt;&lt;&quot;int: &quot;&lt;&lt;sizeof(int)&lt;&lt;&quot; byte&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;unsigned int: &quot;&lt;&lt;sizeof(unsigned int)&lt;&lt;&quot; byte&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;float: &quot;&lt;&lt;sizeof(float)&lt;&lt;&quot; byte&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;double: &quot;&lt;&lt;sizeof(double)&lt;&lt;&quot; byte&quot;&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;&quot;char: &quot;&lt;&lt;sizeof(char)&lt;&lt;&quot; byte&quot;&lt;&lt;endl;</span><br><span class="line">    cin.get();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="unsigned-int"><a href="#unsigned-int" class="headerlink" title="unsigned int"></a>unsigned int</h3><p>占用4个字节，即：32b，无符号位。<br>取值范围：0 ~ 2^32。<br>数据以补码的形式存放在内存中。</p><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><ol><li>浮点数在计算机中用科学计数法表示，栗：1.0100011*2^7。 </li><li>符号位：“+”或者“-”。 </li><li>指数部分：2的幂指数，栗子中的“7”。 </li><li>尾数部分：最高位为“1”的底数，栗子中的“10100011”。 </li><li>栗子：15.987在计算机中存储方式。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">（1）15.987的整数部分原码：1111。</span><br><span class="line">（2）15.987的小数部分原码：11111100……此处省略11位。</span><br><span class="line">（3）经过上述计算，15.987的二进制为1111.11111100……，用科学计数法表示为1.11111111100……*2^3。 </span><br><span class="line">（4）指数部分采用移位存储的方式，即3+（2^7-1） = 130。其二进制：10000010。 </span><br><span class="line">（5）尾数部分省略科学计数法的整数部分！！（因为肯定是1）（隐藏位） </span><br><span class="line">（6）15.987在内存中的存放的内容为： </span><br><span class="line">符号位：0（共1位）。 </span><br><span class="line">指数部分：10000010（共8位）。 </span><br><span class="line">尾数部分：111111111000……（共23位）。 </span><br><span class="line">（7）写成完整的二进制：0100 0001 0111 1111 1100 0…… </span><br><span class="line">（8）写成16进制：41 7F C……。 </span><br><span class="line">（9）因为Intel的架构的字节序是小端序，则真正的存放内容为……C 7F 41。</span><br></pre></td></tr></table></figure></li></ol><h3 id="double"><a href="#double" class="headerlink" title="double"></a>double</h3><p>原理同上！</p><h3 id="char"><a href="#char" class="headerlink" title="char"></a>char</h3><p>在内存中以ASCII码的形式存储。<br>栗子：<br><img src="/images/pasted-2.png" alt="img"><br>代码中字符是“1”，ASCII码为49，转换为16进制为31。</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>移位存储：<br>在存储浮点数时，若指数部分若不使用移位存储技术，则会导致0有两种表示方式：1000 000 0和0000 000 0。所以，为了最大化利用价值，同时保留正负性，在原数据的基础上加127，其结果如下：<br>0000 000 0~0111 111 1代表着-127~0。<br>1000 000 0~1111 111 1代表着1~127。<br>这样正负指数均可表示的数量保持一致。</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>人生处世</title>
      <link href="/2018/11/30/%E4%BA%BA%E7%94%9F%E5%A4%84%E4%B8%96/"/>
      <url>/2018/11/30/%E4%BA%BA%E7%94%9F%E5%A4%84%E4%B8%96/</url>
      
        <content type="html"><![CDATA[<ol><li>凡事顺其自然。遇事之时泰然，成功之时淡然，失败之时坦然</li><li>岁月本长，而亡者自促；天地本宽，而鄙者自隘；风花雪月本闲，而扰攘者自冗。</li><li>风来疏竹，风过而竹不留声；雁渡寒潭，雁去而谭不留影。故君子事来而心始现，事去而心随空。</li><li>鱼得水逝，而相忘乎水，鸟乘风飞，而不知有风。</li><li>交友须带三分侠气，做人要存一点素心。</li><li>邀千百人之欢，不如释一人之怨；希千百事之荣，不如免一事之丑。</li><li>世态有炎凉，而我无嗔喜；世味有浓淡，而我无欣厌；</li><li>觉人之诈，不形于言；受人之侮，不动于色。</li><li>遍阅人情，始识疏狂之足贵；备尝世味，方知淡泊之为真。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java简介</title>
      <link href="/2018/11/29/java%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/11/29/java%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>java是开发语言，你需要掌握它的语法规则。</p><p>jdk(Java Development Kit)是用java语言写的sdk，你需要了解它提供的能力。</p><p>JVM java虚拟机</p><h2 id="有什么特点"><a href="#有什么特点" class="headerlink" title="有什么特点"></a>有什么特点</h2><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>面向对象出现之前的编程方式被称作：结构化编程（面向过程编程）。在我看来本质是方法组合方式的变化，面向对象编程更接近现实生活。</p><p>结构化编程：针对问题设计解决问题的步骤，第一步、第二步、第三步…..等，将这些步骤以方法（function）为载体组合成为一个结构。</p><p>面向对象编程：针对问题设计解决问题步骤，第一步 由谁做什么，第二步由谁做什么…..等，最后将 “谁” 定义出来 且将他们做什么以function的形式声明到它的结构体上面。</p><p>对比：行为关联给对象，可以更好地管理行为。</p><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>以对象为主体，对象内的东西（属性、方法）与其它对象互相独立。</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>就像你可以集成你父亲的财产，手艺一样。但是你跟你父亲真的是两个独立主体。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>你跟你兄弟姐妹都继承了你父亲的手艺但多少有些不同就产生了多样性。</p><p>高级语言之所以高级是因为：他的理念越来越接近你与人交往沟通方式。面向对象是很重要的里程碑，它是定义了对象并且给予对象拥有万物一样的一些特性：个体独立，可繁衍等。</p><p><img src="/images/pasted-1.png" alt="高级语言的位置"></p><h3 id="与平台无关"><a href="#与平台无关" class="headerlink" title="与平台无关"></a>与平台无关</h3><p>先编译后执行，编写的程序统一由javac 编译成字节码class文件，然后在jvm中解释执行。<br><img src="/images/pasted-0.png" alt="java执行过程"></p><h3 id="其它同级别高级语言特点"><a href="#其它同级别高级语言特点" class="headerlink" title="其它同级别高级语言特点"></a>其它同级别高级语言特点</h3><h4 id="数据结构更直观简单"><a href="#数据结构更直观简单" class="headerlink" title="数据结构更直观简单"></a>数据结构更直观简单</h4><h4 id="自动垃圾回收"><a href="#自动垃圾回收" class="headerlink" title="自动垃圾回收"></a>自动垃圾回收</h4><h4 id="安全、可靠、多线程-等"><a href="#安全、可靠、多线程-等" class="headerlink" title="安全、可靠、多线程 等"></a>安全、可靠、多线程 等</h4><h2 id="你该做什么"><a href="#你该做什么" class="headerlink" title="你该做什么"></a>你该做什么</h2><ul><li>掌握java基础语法</li><li>熟悉SDK提供的能力</li><li>熟悉Jre提供的能力</li><li>深入JVM的原理<ul><li>内存管理</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>选定&amp;搭建博客</title>
      <link href="/2018/11/28/%E9%80%89%E5%AE%9A-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2018/11/28/%E9%80%89%E5%AE%9A-%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="常见博客系统"><a href="#常见博客系统" class="headerlink" title="常见博客系统"></a>常见博客系统</h3><ol><li>wordpress</li><li>Zblog</li><li>Typecho</li><li>hexo</li></ol><h3 id="应该选择哪个"><a href="#应该选择哪个" class="headerlink" title="应该选择哪个"></a>应该选择哪个</h3><p>选择是恐惧的，所以我总在尝试进行降维选择。这里不会对几个主流博客进行一一对比了，问自己两个问题即可：</p><ol><li>工具：你喜欢用word写？还是用md语法写？</li><li>成本：你准备投入多少钱？</li></ol><p>结论：</p><ol><li>工具选择md语法，别犹豫直接选择 hexo  因为可以是0成本</li><li>工具选择word，别犹豫直接选择wordpress 成本为100+/年</li><li>你想用word 又想降低成本，选择云平台：简书 等</li></ol><h3 id="搭建hexo平台"><a href="#搭建hexo平台" class="headerlink" title="搭建hexo平台"></a>搭建hexo平台</h3><h4 id="步骤概览"><a href="#步骤概览" class="headerlink" title="步骤概览"></a>步骤概览</h4><ol><li>安装node</li><li>安装git</li><li>安装hexo</li><li>注册 coding 账号</li><li>注册 github 账号（非必须）</li><li>买域名（非必须）</li><li>开通云主机（非必须）</li></ol><h4 id="步骤拆解"><a href="#步骤拆解" class="headerlink" title="步骤拆解"></a>步骤拆解</h4><h5 id="安装node-已经安装的忽略"><a href="#安装node-已经安装的忽略" class="headerlink" title="安装node(已经安装的忽略)"></a>安装node(已经安装的忽略)</h5><ul><li><p>MAC环境</p><p>  <a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">安装homebrew</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://nodejs.org/zh-cn/download/package-manager" target="_blank" rel="noopener">安装node</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure></p><ul><li><p>WIN环境</p><p>  <a href="https://nodejs.org/zh-cn/download/package-manager" target="_blank" rel="noopener">安装node</a></p></li></ul><h5 id="安装GIT"><a href="#安装GIT" class="headerlink" title="安装GIT"></a>安装GIT</h5><ul><li><p>MAC环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure></li><li><p>WIN环境</p><p>  <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000" target="_blank" rel="noopener">参考安装教程</a></p></li></ul><h5 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h5><pre><code>npm install hexo-cli -ghexo init blogcd blognpm installhexo server</code></pre><p>浏览器打开 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 就可以访问你刚才安装的hexo了</p><h5 id="搞定Coding环境"><a href="#搞定Coding环境" class="headerlink" title="搞定Coding环境"></a>搞定Coding环境</h5><ul><li><a href="https://coding.net/" target="_blank" rel="noopener">注册</a></li><li><a href="https://coding.net/user/projects" target="_blank" rel="noopener">创建一个项目</a></li><li>配置Page属性，项目—&gt;代码—&gt;Page服务<br>到此，你会得到一个xxx.coding.me/项目名称 网络地址。</li></ul><h5 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h5><ul><li>生成静态文件<pre><code>hexo generate</code></pre></li><li>配置发布地址<pre><code>_config.yml deploy:    type: git    repo:      coding: git@git.coding.net:xxx/xxx.git,master    name:your name     email: doouxiaoyu@163.com</code></pre></li><li>配置GIT账号<pre><code>git config --global user.namegit config --global user.email</code></pre></li><li><p>配置GIT证书</p><pre><code>#生成证书#配置coding 部署公钥</code></pre></li><li><p>发布文件</p><pre><code>hexo deploy</code></pre></li></ul><p>到此，你访问你的coding 地址就会看到你的hexo文章信息了。</p><p>这只是开始，你还得学习hexo的以下内容：</p><ol><li>模版 </li><li>主题</li><li>插件</li></ol><h5 id="添加github支持"><a href="#添加github支持" class="headerlink" title="添加github支持"></a>添加github支持</h5><p><strong>目的</strong><br>github功能跟coding一样一样的，增加它的目的有两个</p><ol><li>不要钱，也不增加工作量</li><li>有自己域名的可以 配置中国访问coding，外国访问 github内容。</li></ol><p><strong>开通步骤</strong> </p><ul><li>注册github账号</li><li>创建项目</li><li>开通page功能</li><li>配置公钥证书</li><li>修改hexo博客配置文件_config.yml<pre><code>deploy:    type: git    repo:      coding: git@git.coding.net:xxx/xxx.git,master      github:xxxxxxx,master    name:your name     email: xxx@163.com</code></pre></li></ul><h5 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h5><p><strong>目的</strong></p><ol><li>牛逼</li><li>方便</li></ol><h5 id="开通云主机"><a href="#开通云主机" class="headerlink" title="开通云主机"></a>开通云主机</h5><p><strong>目的</strong></p><ol><li>牛逼</li><li>hexo 部署到云主机上面可以随时写文字</li><li>可以直接部署自己的博客从而不再依赖coding，github。访问速度更快</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> plan </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>作战计划</title>
      <link href="/2018/11/28/%E4%BD%9C%E6%88%98%E8%AE%A1%E5%88%92/"/>
      <url>/2018/11/28/%E4%BD%9C%E6%88%98%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><h4 id="选定-amp-搭建好博客环境"><a href="#选定-amp-搭建好博客环境" class="headerlink" title="选定&amp;搭建好博客环境"></a><strong><em>选定&amp;搭建好博客环境</em></strong></h4><h4 id="制定渐进步骤"><a href="#制定渐进步骤" class="headerlink" title="制定渐进步骤"></a><strong><em>制定渐进步骤</em></strong></h4><h3 id="二、java基础"><a href="#二、java基础" class="headerlink" title="二、java基础"></a>二、java基础</h3><h4 id="java简介"><a href="#java简介" class="headerlink" title="java简介"></a>java简介</h4><h4 id="java的基础数据类型"><a href="#java的基础数据类型" class="headerlink" title="java的基础数据类型"></a>java的基础数据类型</h4><h4 id="java数据结构"><a href="#java数据结构" class="headerlink" title="java数据结构"></a>java数据结构</h4><h4 id="待完善……"><a href="#待完善……" class="headerlink" title="待完善……"></a>待完善……</h4><h3 id="三、常见系统架构"><a href="#三、常见系统架构" class="headerlink" title="三、常见系统架构"></a>三、常见系统架构</h3><h4 id="待完善……-1"><a href="#待完善……-1" class="headerlink" title="待完善……"></a>待完善……</h4><h3 id="四、常见问题-amp-解决方案"><a href="#四、常见问题-amp-解决方案" class="headerlink" title="四、常见问题&amp;解决方案"></a>四、常见问题&amp;解决方案</h3><h4 id="等待完善"><a href="#等待完善" class="headerlink" title="等待完善"></a>等待完善</h4><h3 id="五、常见面试题"><a href="#五、常见面试题" class="headerlink" title="五、常见面试题"></a>五、常见面试题</h3><h4 id="待完善……-2"><a href="#待完善……-2" class="headerlink" title="待完善……"></a>待完善……</h4>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> plan </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/13/hello-world/"/>
      <url>/2018/11/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
