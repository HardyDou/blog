<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小鱼先生</title>
  
  <subtitle>梦想还是要有的，万一忘记了咋办？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.hardydou.com/"/>
  <updated>2020-04-10T07:46:11.125Z</updated>
  <id>http://www.hardydou.com/</id>
  
  <author>
    <name>小鱼先生</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>boolean类型</title>
    <link href="http://www.hardydou.com/2020/04/10/boolean%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.hardydou.com/2020/04/10/boolean类型/</id>
    <published>2020-04-10T06:34:00.000Z</published>
    <updated>2020-04-10T07:46:11.125Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;boolean类型 占多大空间   &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.hardydou.com/categories/java/"/>
    
    
      <category term="java" scheme="http://www.hardydou.com/tags/java/"/>
    
      <category term="java数据类型" scheme="http://www.hardydou.com/tags/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java引用数据类型</title>
    <link href="http://www.hardydou.com/2020/04/09/Java%E5%BC%95%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://www.hardydou.com/2020/04/09/Java引用数据类型/</id>
    <published>2020-04-09T13:29:00.000Z</published>
    <updated>2020-04-10T07:37:03.559Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Java里除了基础数据类型就是引用数据类型。例如：类、接口、数组、枚举、标注&lt;/p&gt;
&lt;h2 id=&quot;对象内存布局&quot;&gt;&lt;a href=&quot;#对象内存布局&quot; class=&quot;headerlink&quot; title=&quot;对象内存布局&quot;&gt;&lt;/a&gt;对象内存布局&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-192.png&quot; alt=&quot;内存布局&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.hardydou.com/categories/java/"/>
    
    
      <category term="java" scheme="http://www.hardydou.com/tags/java/"/>
    
      <category term="java数据类型" scheme="http://www.hardydou.com/tags/java%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="http://www.hardydou.com/2019/07/24/strategy-pattern/"/>
    <id>http://www.hardydou.com/2019/07/24/strategy-pattern/</id>
    <published>2019-07-24T06:43:00.000Z</published>
    <updated>2020-02-19T05:35:32.296Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;行为模式，定义一组算法，将每个算法都封装起来，并且使他们之间可以互换。&lt;/p&gt;
&lt;h2 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-179.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构设计" scheme="http://www.hardydou.com/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计模式" scheme="http://www.hardydou.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="行为模式" scheme="http://www.hardydou.com/tags/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>责任链模式</title>
    <link href="http://www.hardydou.com/2019/07/24/chainofresponsibility-pattern/"/>
    <id>http://www.hardydou.com/2019/07/24/chainofresponsibility-pattern/</id>
    <published>2019-07-24T06:17:00.000Z</published>
    <updated>2020-02-19T05:35:43.220Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;行为模式，使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这些对象连城一条链，并沿着这条链传递请求，直到有对象处理它为止。&lt;/p&gt;
&lt;h2 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-177.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构设计" scheme="http://www.hardydou.com/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计模式" scheme="http://www.hardydou.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="行为模式" scheme="http://www.hardydou.com/tags/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>命令模式</title>
    <link href="http://www.hardydou.com/2019/07/23/command-pattern/"/>
    <id>http://www.hardydou.com/2019/07/23/command-pattern/</id>
    <published>2019-07-23T10:10:00.000Z</published>
    <updated>2020-02-19T05:35:50.359Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;行为模式，将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。&lt;/p&gt;
&lt;h2 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-176.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构设计" scheme="http://www.hardydou.com/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计模式" scheme="http://www.hardydou.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>模版方法模式</title>
    <link href="http://www.hardydou.com/2019/07/23/templateMethod-pattern/"/>
    <id>http://www.hardydou.com/2019/07/23/templateMethod-pattern/</id>
    <published>2019-07-23T05:25:00.000Z</published>
    <updated>2020-02-19T05:36:02.584Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;行为模式，定义一个操作中的算法的框架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。&lt;/p&gt;
&lt;h2 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-172.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构设计" scheme="http://www.hardydou.com/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计模式" scheme="http://www.hardydou.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="行为模式" scheme="http://www.hardydou.com/tags/%E8%A1%8C%E4%B8%BA%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>享元模式</title>
    <link href="http://www.hardydou.com/2019/07/22/flyweight-pattern/"/>
    <id>http://www.hardydou.com/2019/07/22/flyweight-pattern/</id>
    <published>2019-07-22T03:34:55.000Z</published>
    <updated>2020-02-19T05:36:10.962Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;使用共享对象可有效的支持大量细粒度的对象。享元对象能做到共享的关键是区分内部状态和外部状态。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;内部状态是存储在享元对象内部的、可以共享的信息，并且不会随环境改变而改变。&lt;/li&gt;
&lt;li&gt;外部状态是随环境改变而改变且不可以共享的状态。享元对象的外部状态必须又客户端保存，并在享元对象被创建之后，在需要使用的时候再传入到享元对象内部。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-170.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>外观模式</title>
    <link href="http://www.hardydou.com/2019/07/22/facade-pattern/"/>
    <id>http://www.hardydou.com/2019/07/22/facade-pattern/</id>
    <published>2019-07-22T03:22:00.000Z</published>
    <updated>2020-02-19T05:36:36.717Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。外观模式提供一个高层侧的接口，使得子系统更易使用。&lt;br&gt;&lt;img src=&quot;/images/pasted-166.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-167.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构设计" scheme="http://www.hardydou.com/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计模式" scheme="http://www.hardydou.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title> Git 分支协作模式</title>
    <link href="http://www.hardydou.com/2019/07/22/git/"/>
    <id>http://www.hardydou.com/2019/07/22/git/</id>
    <published>2019-07-22T02:17:00.000Z</published>
    <updated>2020-02-19T05:36:52.754Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;开始&quot;&gt;&lt;a href=&quot;#开始&quot; class=&quot;headerlink&quot; title=&quot;开始&quot;&gt;&lt;/a&gt;开始&lt;/h3&gt;&lt;p&gt; 3人通过本地仓库 master 分支向远程仓库 master 分支提交代码&lt;br&gt;&lt;img src=&quot;/images/pasted-161.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://www.hardydou.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://www.hardydou.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>桥梁模式</title>
    <link href="http://www.hardydou.com/2019/07/19/bridge-pattern/"/>
    <id>http://www.hardydou.com/2019/07/19/bridge-pattern/</id>
    <published>2019-07-19T07:34:00.000Z</published>
    <updated>2020-02-19T05:37:42.509Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;将抽象和实现解耦，使得两者可以独立变化。&lt;/p&gt;
&lt;h2 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-159.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构设计" scheme="http://www.hardydou.com/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计模式" scheme="http://www.hardydou.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>组合模式</title>
    <link href="http://www.hardydou.com/2019/07/10/composite-pattern/"/>
    <id>http://www.hardydou.com/2019/07/10/composite-pattern/</id>
    <published>2019-07-10T03:35:00.000Z</published>
    <updated>2020-02-19T05:37:48.329Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;将对象组合成树形结构以表示”部分-整体“的层次结构，使得用户对单个对象和组合对象的使用具有一致性。&lt;/p&gt;
&lt;h2 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-157.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构设计" scheme="http://www.hardydou.com/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计模式" scheme="http://www.hardydou.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>适配器模式</title>
    <link href="http://www.hardydou.com/2019/07/04/adapter-pattern/"/>
    <id>http://www.hardydou.com/2019/07/04/adapter-pattern/</id>
    <published>2019-07-04T04:25:00.000Z</published>
    <updated>2020-02-19T05:37:54.401Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;将一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无从在一起工作的两个类能够在一起工作&lt;/p&gt;
&lt;h2 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-155.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构设计" scheme="http://www.hardydou.com/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计模式" scheme="http://www.hardydou.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>装饰者模式</title>
    <link href="http://www.hardydou.com/2019/07/04/decorator-pattern/"/>
    <id>http://www.hardydou.com/2019/07/04/decorator-pattern/</id>
    <published>2019-07-04T02:43:34.000Z</published>
    <updated>2020-02-19T05:38:03.593Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;动态的给一个对象添加一些额外的职责。就增加功能来说，装饰模式比生成子类更为灵活。&lt;/p&gt;
&lt;h2 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-153.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="http://www.hardydou.com/2019/07/02/proxy-pattern/"/>
    <id>http://www.hardydou.com/2019/07/02/proxy-pattern/</id>
    <published>2019-07-02T07:28:00.000Z</published>
    <updated>2020-02-19T05:38:11.853Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;为其它对象提供一种代理以控制这个对象的访问。&lt;/p&gt;
&lt;h2 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-151.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构设计" scheme="http://www.hardydou.com/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计模式" scheme="http://www.hardydou.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>原型模式</title>
    <link href="http://www.hardydou.com/2019/07/02/prototype-pattern/"/>
    <id>http://www.hardydou.com/2019/07/02/prototype-pattern/</id>
    <published>2019-07-02T06:49:00.000Z</published>
    <updated>2020-02-19T05:38:26.000Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象。&lt;/p&gt;
&lt;h2 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-150.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构设计" scheme="http://www.hardydou.com/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计模式" scheme="http://www.hardydou.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>创建者模式</title>
    <link href="http://www.hardydou.com/2019/07/02/builder-pattern/"/>
    <id>http://www.hardydou.com/2019/07/02/builder-pattern/</id>
    <published>2019-07-02T06:10:00.000Z</published>
    <updated>2020-02-19T05:38:34.046Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;创建者模式关注的是零件类型和装配工艺顺序，这是与工厂方法模式最大的不同之处，虽然同为创建型模式，但是重点不同。&lt;/p&gt;
&lt;h2 id=&quot;类图&quot;&gt;&lt;a href=&quot;#类图&quot; class=&quot;headerlink&quot; title=&quot;类图&quot;&gt;&lt;/a&gt;类图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/pasted-149.png&quot; alt=&quot;upload successful&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构设计" scheme="http://www.hardydou.com/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计模式" scheme="http://www.hardydou.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>工厂模式</title>
    <link href="http://www.hardydou.com/2019/07/01/factory-parttern/"/>
    <id>http://www.hardydou.com/2019/07/01/factory-parttern/</id>
    <published>2019-07-01T12:30:00.000Z</published>
    <updated>2020-02-19T05:38:47.559Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h2&gt;&lt;p&gt;工厂模式是 创建型模式，可以分2大类：工厂方法模式、抽象工厂模式。工厂方法模式又可以分为：简单工厂模式、工厂方法模式。&lt;/p&gt;
    
    </summary>
    
      <category term="架构设计" scheme="http://www.hardydou.com/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="设计模式" scheme="http://www.hardydou.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>知识经济</title>
    <link href="http://www.hardydou.com/2019/06/24/Knowledge/"/>
    <id>http://www.hardydou.com/2019/06/24/Knowledge/</id>
    <published>2019-06-24T03:40:22.000Z</published>
    <updated>2020-02-19T05:39:04.037Z</updated>
    
    <summary type="html">
    
      &lt;font size=6&gt;
知识如果不能改变行为，就没有用处；
但是知识一旦改变了行为，知识本身就立刻失去意义  
&lt;/font &gt;
&lt;font style=&quot;display:block;text-align:right;&quot; size=6 &gt;--《未来简史》&lt;/font&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java线程安全</title>
    <link href="http://www.hardydou.com/2019/06/12/thread-safe/"/>
    <id>http://www.hardydou.com/2019/06/12/thread-safe/</id>
    <published>2019-06-12T09:12:00.000Z</published>
    <updated>2020-02-19T05:39:26.985Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么要用锁？&quot;&gt;&lt;a href=&quot;#为什么要用锁？&quot; class=&quot;headerlink&quot; title=&quot;为什么要用锁？&quot;&gt;&lt;/a&gt;为什么要用锁？&lt;/h2&gt;&lt;p&gt;锁-是为了解决并发操作引起的脏读、数据不一致的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.hardydou.com/categories/java/"/>
    
    
      <category term="thread" scheme="http://www.hardydou.com/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>scrum介绍</title>
    <link href="http://www.hardydou.com/2019/06/12/scrum/"/>
    <id>http://www.hardydou.com/2019/06/12/scrum/</id>
    <published>2019-06-12T02:28:00.000Z</published>
    <updated>2019-06-12T02:40:22.935Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;center&gt;  
  ![scrum](/images/pasted-123.png)
&lt;/center&gt;

&lt;h2 id=&quot;Scrum的历史&quot;&gt;&lt;a href=&quot;#Scrum的历史&quot; class=&quot;headerlink&quot;
        
      
    
    </summary>
    
      <category term="效率" scheme="http://www.hardydou.com/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="敏捷" scheme="http://www.hardydou.com/tags/%E6%95%8F%E6%8D%B7/"/>
    
      <category term="scrum" scheme="http://www.hardydou.com/tags/scrum/"/>
    
  </entry>
  
</feed>
